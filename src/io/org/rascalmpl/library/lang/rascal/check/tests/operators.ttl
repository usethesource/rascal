@@ ---- is

@@ ---- has

@@ ---- transitive closoure

test TC1 [[ module A rel[int,int] r = {<1,2>}+; ]]

test TC2 [[ module A rel[int,int] r = {<1,"a">}+; ]]
expect { "Invalid type: expected a binary relation over equivalent types, found `rel[int, str]`" }

@@ ---- reflexive transitive closure

test RTC1 [[ module A rel[int,int] r = {<1,2>}*; ]]

test RTC2 [[ module A rel[int,int] r = {<1,"a">}*; ]]
expect { "Invalid type: expected a binary relation over equivalent types, found `rel[int, str]`" }


test ID1 [[ module A  bool b = 1?; ]]

test NOT1 [[ module A  bool b = !true; ]]

test NEG1 [[ module A  int n = - 10; ]]

@@test SPL1 [[ module A list[int] lst = [1, *[2, 3], 4]; ]

@@-- composition

@@-- product

test PRODN1 [[ module A int x = 2 * 3; ]]
test PRODN2 [[ module A num x = 2 * 3.5; ]]

test PRODR1 [[ module A rel[int,int] x = {1, 2} * {3, 4}; ]]
test PRODR2 [[ module A rel[value,value] x = {1, "a"} * {3, "a"}; ]]

test PRODLR1 [[ module A lrel[int,int] x = [1, 2] * [3, 4]; ]]
test PRODLR2 [[ module A lrel[value,value] x = [1, "a"] * [3, "a"]; ]]

test PRODE1 [[ module A lrel[int,int] x = [1, 2] * 3; ]]
expect { "Product not defined on `list[int]` and `int`" }

@@---- join

test JOINR1 [[ module A  rel[int,int,int,int] r = {<1,10>} join {<2,20>}; ]]

test JOINR2 [[ module A  rel[int,int] r = {<1,10>} join {<2,20>}; ]]
expect { "Type of initialization should be subtype of `rel[int, int]`, found `rel[int, int, int, int]`" }

test JOINR3 [[ module A  rel[int a, int b,int c, str d] r = {<1,10>} join {<2,"a">}; set[str] s = r.d;]]

test JOINR4 [[ module A  rel[int a, int b,int, str d] r = {<1,10>} join {<2,"a">}; set[str] s = r.d;]]
expect { "Field name ignored, field names must be provided for all fields or for none" }

test JOINLR1 [[ module A  lrel[int,int,int,int] r = [<1,10>] join [<2,20>]; ]]

test JOINLR2 [[ module A  lrel[int,int] r = [<1,10>] join [<2,20>]; ]]
expect { "Type of initialization should be subtype of `lrel[int, int]`, found `lrel[int, int, int, int]`" }

test JOINLR3 [[ module A  lrel[int a, int b,int c, str d] r = [<1,10>] join [<2,"a">]; list[str] s = r.d;]]

test JOINLR4 [[ module A  lrel[int a, int b,int, str d] r = [<1,10>] join [<2,"a">]; list[str] s = r.d;]]
expect { "Field name ignored, field names must be provided for all fields or for none" }

test JOINSR1 [[ module A  rel[int,int,bool] r = {<1,10>} join {true}; ]]

test JOINSR2 [[ module A  rel[bool,int,int] r = {true} join {<1,10>}; ]]

test JOINSR1 [[ module A  rel[int,int,bool] r = {<1,10>} join true; ]]
expect { "Join not defined for `rel[int, int]` and `bool`" }


@@-- addition

test ADD1 [[ module A  int n = 1 + 2; ]]
test ADD2 [[ module A  num n = 1 + 2.5; ]]
test ADD3 [[ module A  str s = "a" + "b"; ]]
test ADD4 [[ module A  list[int] lst = [1,2] + [3,4]; ]]
test ADD5 [[ module A  list[int] lst = 1 + [3,4]; ]]
test ADD6 [[ module A  list[int] lst = [1,2] + 3; ]]
test ADD7 [[ module A  set[int] st = {1,2} + {3,4}; ]]
test ADD8 [[ module A  set[int] st = 1 + {3,4}; ]]
test ADD9 [[ module A  set[int] st = {1,2} + 3; ]]

test ATP1 [[ module A  tuple[int,str,int,bool] tp = <1,"a"> + <2, true>; ]]
test ATP1 [[ module A  tuple[int a, str b, int c, bool d] tp = <1,"a"> + <2, true>;  int n = tp.a; bool x = tp. d; ]]




