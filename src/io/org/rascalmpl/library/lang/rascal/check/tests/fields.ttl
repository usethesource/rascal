test LF1 [[ module A list[int n] l = []; ]]
@@expect {  "Field name `n` ignored" }

test SF1 [[ module A set[int n] l = {}; ]]
@@expect {  "Field name `n` ignored" }

test MF1 [[ module A map[str key, int val] x; set[str] y = x.key; ]]

test MF2 [[ module A map[str key, int val] x; set[int] y = x.key; ]]
expect { "Type of initialization should be subtype of `set[int]`, found `set[str]`" }

test MF3 [[ module A map[str key, int val] x; set[int] y = x.val; ]]

test MF4 [[ module A map[str key, int val] x; set[int] y = x.vals; ]]
expect { "Field `vals` does not exist" }

test MF5 [[ module A map[str key, int] x; ]]
expect { "Field name `key` ignored, field names must be provided for both fields or for none" }

test MF6 [[ module A map[str key, int key] x; ]]
expect { "Non-well-formed type, labels must be distinct" }

test RF1 [[ module A rel[str a, int b, real r] x; set[str] y = x.a; ]]

test RF2 [[ module A rel[str a, int b, real r] x; set[int] y = x.b; ]]

test RF3 [[ module A rel[str a, int b, real r] x; set[real] y = x.r; ]]

test RF4 [[ module A rel[str a, int b, real r] x; set[real] y = x.c; ]]
expect { "Field `c` does not exist" }

test RF5 [[ module A rel[str a, int b, real] x; ]]
expect { "Field name ignored, field names must be provided for all fields or for none" }

test RF6 [[ module A rel[str a, int b, real a] x; ]]
expect { "Non-well-formed relation type, labels must be distinct" }

test LRF1 [[ module A lrel[str a, int b, real r] x; list[str] y = x.a; ]]

test LRF2 [[ module A lrel[str a, int b, real r] x; list[int] y = x.b; ]]

test LRF3 [[ module A lrel[str a, int b, real r] x; list[real] y = x.r; ]]

test LRF4 [[ module A lrel[str a, int b, real r] x; list[real] y = x.c; ]]
expect { "Field `c` does not exist"  }

test LRF5 [[ module A lrel[str a, int b, real] x; ]]
expect { "Field name ignored, field names must be provided for all fields or for none" }

test LRF6 [[ module A lrel[str a, int b, real a] x; ]]
expect { "Non-well-formed list relation type, labels must be distinct" }

test TF1 [[ module A tuple[str a, int b, real r] x; str y = x.a; ]]

test RT2 [[ module A tuple[str a, int b, real r] x; int y = x.b; ]]

test RT3 [[ module A tuple[str a, int b, real r] x; real y = x.r; ]]

test TF4 [[ module A tuple[str a, int b, real r] x; real y = x.c; ]]
expect { "Field `c` does not exist"  }

test TF5 [[ module A tuple[str a, int b, real] x; ]]
expect { "Field name ignored, field names must be provided for all fields or for none" }

test TF6 [[ module A tuple[str a, int b, real a] x; ]]
expect { "Non-well-formed tuple type, labels must be distinct" }