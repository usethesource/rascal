test S1 [[ module A lexical INT = [0-9]+; ]]

test S2 [[ module A syntax EXP = EXP "+" EXP; ]]

test S3 [[ module A syntax EXP = EXP lhs "+" EXP rhs ; ]]

test S4 [[ module A syntax EXP = add: EXP lhs "+" EXP rhs ; ]]

test S5 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | add: EXP lhs "+" EXP rhs ; ]]
test S6 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: Int intcon 
                      | add: EXP lhs "+" EXP rhs ; 
]] expect { "Undefined nonterminal `Int`" }

test S7 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | add: EXP lhs "+" EXP rhs ;
           EXP exp;
]]

test S8 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | add: EXP lhs "+" EXP rhs ;
           Exp exp;
]] expect { "Undeclared type `Exp`" }

test FLD1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | add: EXP lhs "+" EXP rhs ;
           EXP exp1;
           EXP exp2 = exp1.lhs;
]]

test FLD2 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | add: EXP lhs "+" EXP rhs ;
           EXP exp;
           INT n = exp.intcon;
]]

test ITER1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | exps: {EXP ","}+ exps
                      ;
]]

test ITER2 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | exps: {EXP ","}+ exps
                      ;
           EXP exp;
           {EXP ","}+ es = exp.exps;
]]

test ITER3 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | exps: EXP+ exps
                      ;
           EXP exp;
           EXP+ es = exp.exps;
]]

test START1 [[ module A 
           lexical INT = [0-9]+; 
           start syntax EXP = intcon: INT intcon 
                      | exps: EXP+ exps
                      ;
           EXP exp;
           EXP+ es = exp.exps;
]]


test KEYWORD1 [[ module A 
                 keyword KEY = "a" | "b" | "c";
                 
                 KEY k;]]
                 
test LAYOUT1 [[ module A 
                 layout L = " "+;
             ]]

test PRIO1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | EXP "*" EXP
                      > EXP "+" EXP
                      ;
]]

test PRIO2 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | mul: EXP lhs "*" EXP rhs
                      > add: EXP lhs "+" EXP rhs
                      ;
]]

test PRIO2 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | mul: EXP lhs "*" EXP rhs
                      > add: EXP lhs "+" EXP rhs
                      ;
           EXP exp1;
           EXP exp2 = exp1.lhs;
]]

test LEFT1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | left( mul: EXP lhs "*" EXP rhs
                            > add: EXP lhs "+" EXP rhs
                            )
                      ;
           EXP exp1;
           EXP exp2 = exp1.lhs;
]]

test RIGHT1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | right( mul: EXP lhs "*" EXP rhs
                            > add: EXP lhs "+" EXP rhs
                            )
                      ;
           EXP exp1;
           EXP exp2 = exp1.lhs;
]]

test NONASSOC1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | non-assoc( mul: EXP lhs "*" EXP rhs
                            > add: EXP lhs "+" EXP rhs
                            )
                      ;
           EXP exp1;
           EXP exp2 = exp1.lhs;
]]

test ESC1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | \add: EXP lhs "+" EXP rhs ;
           EXP exp1;
           EXP exp2 = add(exp1, exp1);
]]

test COND1 [[ module A 
           lexical INT = [0-9]+; 
           syntax EXP = intcon: INT intcon 
                      | right( mul: EXP lhs "*" EXP rhs
                            > add: EXP lhs "+" EXP rhs !>> [0-9]
                            )
                      ;
           EXP exp1;
           EXP exp2 = add(exp1, exp1);
]]

