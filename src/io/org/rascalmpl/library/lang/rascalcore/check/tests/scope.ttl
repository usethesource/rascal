test S1 [[ module A
           value f(){
                x = 10; 
            }
]]

test S2 [[ module A
           value f(){
                int x = 10; 
            }
]]
test S3 [[ module A
           value f(){
                str x = 10; 
            }
]] expect { "Incompatible type `int` in initialization of `x`, expected `str`" }

test S4 [[ module A
           value f(){
                x = 10; 
                y = x;
            }
]]

test S5 [[ module A
           value f(){
                x = 10; 
                y = x + 1;
            }
]]

test S6 [[ module A
           value f(){
                x = 10; 
                y = "a";
            }
]]

test S7 [[ module A
           value f(){
                x = 10; 
                y = "a";
                x = x + 1;
                y = y + "b";
            }
]]

test S8 [[ module A
           value f(){
                x = y; 
            }
]] expect { "Undefined variable, function, formal, field or constructor `y`" }

test I1 [[ module A
           value f(){
                x = 10;
                if(true){ x = 1; }
                x + 1; 
            }
]]

test I2 [[ module A
           value f(){
                x = 10;
                if(true){ x = x + 1; }
                x + 1; 
            }
]]

test I3 [[ module A
           value f(){
                if(true){ x = 1; }
                x + 1; 
            }
]] expect { "Undefined variable, function, formal, field or constructor `x`" }

test I4 [[ module A
           value f(){
                int x = 10;
                if(true){ x = x + 1; }
                x + 1; 
            }
]]

test I5 [[ module A
           value f(){
                int x = 10;
                if(true){ x = "a"; }
                x + 1; 
            }
]] expect {  "Incompatible type `str` in assignment to `int` variable `x`" }

test B1 [[ module A
           value f(){
                if(x := 1){ x = x + 1; }
            }
]]

test B2 [[ module A
           value f(){
                if(x := 1){ x = x + 1; }
                x + 2;
            }
]] expect { "Undefined variable, function, formal, field or constructor `x`" }

test B3 [[ module A
           value f(){
                [x | x <- {1,2,3} ];
            }
]]

test B4 [[ module A
           value f(){
                [x | x <- {1,2,3}, x > 0];
            }
]]

test B5 [[ module A
           value f(){
                [x | x <- {1,2,3}, x > 0];
                x + 1;
            }
]] expect { "Undefined variable, function, formal, field or constructor `x`" }

test B6 [[ module A
           value f(){
                (10 | it + x | x <- {1,2,3});
            }
]]

test W1 [[ module A
           value f(){
                do { x=0; } while(x > 0);
            }
]]

test W2 [[ module A
           value f(){
                while(x := 0) { x+1; };
            }
]]

test N1 [[ module A
           value f(){
                if(true){ x = 10; x = x + 1; }
                if(true){ y = "a"; y = y + "b"; } 
            }
]]

test N2 [[ module A
           value f(){
                if(true){ x = 10; x = x + 1; }
                if(true){ y = "a"; y = x + "b"; } 
            }
]] expect { "Undefined variable, function, formal, field or constructor `x`" }

test N3 [[ module A
           value f(){
                if(true){ x = 10; x = x + 1; }
                if(true){ y = "a"; y = y + "b"; } 
                x + 1;
            }
]] expect { "Undefined variable, function, formal, field or constructor `x`" }

test N4 [[ module A
           value f(){
                if(true){ x = 10; x = x + 1; }
                if(true){ x = "a"; x = x + "b"; } 
            }
]]

test N5 [[ module A
           value f(){
                if(true){ int x = 10; x = x + 1; }
                if(true){ x = "a"; x = x + "b"; } 
            }
]]

test N6 [[ module A
           value f(){
                if(true){ x = 10; x = x + 1; }
                if(true){ str x = "a"; x = x + "b"; } 
            }
]]

test N7 [[ module A
           value f(){
                if(true){ int x = 10; x = x + 1; }
                if(true){ str x = "a"; x = x + "b"; } 
            }
]]

test N8 [[ module A
           bool x = true;
           value f(){
                if(true){ int x = 10; x = x + 1; }
                if(true){ str x = "a"; x = x + "b"; } 
            }
]]

test N9 [[ module A
            set[int] expand() {
              while (true) {
                instances = {};
                while (true) {
                   instances = instances ;
                }
              }
            }
]]