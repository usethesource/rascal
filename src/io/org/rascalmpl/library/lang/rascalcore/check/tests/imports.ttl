test LU1 [[ module A
            int twice(int n) = 2 * n;
            
            int M = twice(3);
]]

test LU2 [[ module A
            int twice(int n) = 2 * n;
            
            module B
            import A;
            int M = twice(3);
]]

test LU3 [[ module A
            int twice(int n) = 2 * n;
            
            module B
            import A;
            
            module C
            import A;
            int M = twice(3);
]]

test LU4 [[ module A
            int twice(int n) = 2 * n;
            
            module B
            import A;
            
            module C
            import A;
            import B;
            int M = twice(3);
]]

test LU5 [[ module A
            int twice(int n) = 2 * n;
            
            module B
            import A;
            import B;
            
            module C
            import A;
            import B;
            int M = twice(3);
]]

test LU6 [[ module A

            module B
            import A;
            int twice(int n) = 2 * n;
           
            int M = twice(3);
]]

test LU7 [[ module A

            module B
            import A;
            int twice(int n) = 2 * n;
            
            module C
            import B;
           
            int M = twice(3);
]]

test LU8 [[ module A

            module B
            import A;
            int twice(int n) = 2 * n;
            
            module C
            import A;
            import B;
           
            int M = twice(3);
]]

test I1 [[ module A
           public int N = 0;
           
           module B     // <-- missing import
           int M = N;
]] expect { "Undefined variable, constructor, function or formal `N`" }

test I2 [[ module A
           public int N = 0;
           
           module B
           import A;
           int M = N;
]]

test I3 [[ module A
           int N = 0;     // <-- not public
           
           module B
           import A;
           int M = N;
]] expect { "Undefined variable, constructor, function or formal `N`" }

test I4 [[ module A
           int N = 0;
           
           module B
           extend A;
           int M = N;
]] 

test I5 [[ module A
           public int N = 0;
           
           module B
           import A;    //  <-- import not transitive for decls
           
           module C
           import B;
           int X = N;
]] expect { "Undefined variable, constructor, function or formal `N`" }

test I6 [[ module A
           public int N = 0;
           
           module B
           extend A;
           
           module C
           import B;
           int X = N;
]]

test I7 [[ module A
           public int N = 0;
           
           module B
           extend A;
           
           module C
           extend B;
           int X = N;
]]

test I8 [[ module A
           public int N = 0;
           
           module B
           import A;
           
           module C
           extend B;
           int X = N;
]] expect { "Undefined variable, constructor, function or formal `N`" }

test I9 [[ module A
           import Z;
]] expect { "Undefined module `Z`" }


test C1 [[ module A
           import B;
           public int N = 0;
           
           module B
           import A;
           
           module C
           import A;
           int X = N;
]]

test EXT1 [[ module A
             data D = d1(int n);
             
             D d1(int n) { if(n < 0) return d1(-n); else fail; }
             
             module B
             extend A;
             
             module C
             extend B;
             
             module D
             import C;
             D ddd = d1(10);          
]]

test EXT2 [[ module A
             data D = d1(int n);
             
             module B
             extend A;
             
             module C
             extend B;
             
             D d1(int n) { if(n < 0) return d1(-n); else fail; }
             
             module D
             import C;
             D ddd = d1(10);          
]]