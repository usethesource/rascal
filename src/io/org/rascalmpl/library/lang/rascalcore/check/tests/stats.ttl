test Assert1 [[ module A void main(){ assert true; }]]

test Assert2 [[ module A void main(){ assert 1; } ]]
expect { "Assertion should be `bool`, found `int`" }

test Assert3 [[ module A void main(){ assert true: "msg" ; }]]

test Assert4 [[ module A void main(){ assert 1: "msg" ; }]]
expect { "Assertion should be `bool`, found `int`" }

test Assert5 [[ module A void main(){ assert true: 5 ; }]]
expect { "Assertion message should be `str`, found `int`" }

test Visit1  [[ module A void main() { visit(1) { case 1 => 2 } } ]]

test Visit2  [[ module A void main() { visit(1) { case 1 => "a" } } ]]
expect { "A pattern of type `int` cannot be replaced by `str`" }

test Visit3  [[ module A void main() { visit(1) { case 1: insert 2; } } ]]

test Visit4  [[ module A void main() { visit(1) { case 1: insert "a"; } } ]]
expect { "Insert type should be subtype of `int`, found `str`" }

test Visit5  [[ module A void main() { visit(1) { case int x: insert "a"; } } ]]
expect { "Insert type should be subtype of `int`, found `str`" }

test Visit6  [[ module A void main() { visit(1) { case int x: insert 1; }; x; } ]]
expect { "Undefined variable, constructor, function or formal `x`" }

test Visit7  [[ module A void main() { insert 2; } ]]
expect { "Insert found outside replacement context" }

test While1 [[ module A void main(){ while(true) 1; }]]
test While2 [[ module A void main(){ while(13) 1; }]]
expect { "Condition should be `bool`, found `int`" }

test Do1 [[ module A void main(){ do 1; while(true); }]]
test Do2 [[ module A void main(){ do 1; while(13); }]]
expect { "Condition should be `bool`, found `int`" }

test For1 [[ module A void main(){ for(true) 1; }]]
test For1 [[ module A void main(){ for(13) 1; }]]
expect { "Condition should be `bool`, found `int`" }