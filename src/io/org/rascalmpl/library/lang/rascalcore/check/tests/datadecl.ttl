test D1 [[ module A
           void main(){ D x; }
]] expect { "Type of variable declaration could not be computed" } @@ { "Undeclared type `D`" }

test D2 [[ module A
           data D;
           void main(){ D x; }
]]
test D3 [[ module A
           data D = d1();
           void main(){ D x; }
]]

test D4 [[ module A
           data D = d1();
           void main(){ D x = d1(); }
]]

test D5 [[ module A
           data D[&T] = d1(&T fld);
           void main(){ D[int] x = d1(3); }
]]

test D6 [[ module A
           data D[&T] = d1(&T fld);
           void main(){ D x = d1(3); }
]] expect { "Expected 1 type parameter for `D[&T]`, found 0" }

test D7 [[ module A
           data D[&T] = d1(&T fld);
           void main(){ D[int,str] x = d1(3); }
]] expect { "Expected 1 type parameter for `D[&T]`, found 2" }

test D8 [[ module A
           data D = d1();
           void main(){ D[&T] x = d1(); }
]] expect { "Expected 0 type parameters for `D`, found 1" }

test D9 [[ module A
           data D[&T, &U] = d1(&T fld1, &U fld2);
           void main(){ D[int] x = d1(3, "a"); }
]] expect { "Expected 2 type parameters for `D[&T, &U]`, found 1" }

test D10 [[ module A
           data D[&T] = d1(&T fld);
           module B
           import A;
           data D[&T, &U] = d1(&T fld1, &U fld2);
           void main(){ D[int] x = d1(3, "a"); }
]] expect { "Type `D` defined with 1 and 2 type parameters" }


test K1 [[ module A
           data D[&T] = d1(&T n, list[&T] l = [n]);

           value main() { d1(1, l=[2]); }
]]

test K2 [[ module A
           data D[&T] = d1(&T n, list[&T] l = [n]);

           value main() { d1(1, l=["a"]); }
]] expect { "Keyword argument `l` has type `list[str]`, expected `list[int]`" }


test K3 [[ module A
           data D[&T] = d1(&T n, list[&T] l = [n]) | d1(str s, &T x);

           value main() { d1(1, l=[2]); }
]]

test K4 [[ module A
           data D[&T] = d1(&T n, list[&T] l = [n]) | d1(str s, &T x);

           value main() { d1("a", "b"); }
]]

test K5 [[ module A
           data D[&T] = d1(&T n, list[&T] l = [n]) | d1(str s, &T x);

           value main() { D[str] x = d1("a", "b"); }
]]

test K6 [[ module A
           data D[&T] = d1(&T n, list[&T] l = [n]) | d1(str s, &T x);

           value main() { d1("a", 3); }
]]

test K7 [[ module A
           data D[&T] = d1(&T n, list[&T] l = [n]) | d1(str s, &T x);

           value main() { D[int] x = d1("a", 3); }
]]


test P1 [[ module A
           data D[&T] = d1(str s, &T x) | d1(&T n, list[&T] l = [n]);

           value main() { d1(1) := d1(1); }
]]

test P2 [[ module A
           data D[&T] = d1(str s, &T x) | d1(&T n, list[&T] l = [n]);

           value main() { d1(1, l=["a"]) := d1(1); }
]] expect { "No function or constructor d1 for arguments `int`" }

test P3 [[ module A
           data D[&T] = d1(str s, &T x) | d1(&T n, list[&T] l = [n]);

           value main() { d1("a", 3) := d1(1); }
]]

test P4 [[ module A
           data D[&T] = d1(str s, &T x) | d1(&T n, list[&T] l = [n]);

           value main() { d1("a", "b") := d1(1); }
]] expect { "Cannot match (:=) `D[str]` pattern with `D[int]` subject" }
