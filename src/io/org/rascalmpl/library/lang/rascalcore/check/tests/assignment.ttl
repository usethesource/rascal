test SUB1 [[ module A value main(){ lst = [0,1]; lst[0] = 10; } ]]

test SUB2 [[ module A value main(){ lst = [0,1]; lst[0] += 10; } ]]

test SUB3 [[ module A value main(){ lst = [0,1]; lst["a"] = 10; } ]]
expect { "Expected subscript of type `int`, not `str`" }

test SUB4 [[ module A value main(){ mp = ("a":1); mp["a"] = 10; } ]]
test SUB5 [[ module A value main(){ mp = ("a":1); mp["a"] += 10; } ]]

test SUB6 [[ module A value main(){ nd = "f"(0,"a"); nd[0] = 10; } ]]
test SUB7 [[ module A value main(){ nd = "f"(0,"a"); nd[0] += 10; } ]]
expect { "Addition not defined on `value` and `int`" }

test SUB8 [[ module A value main(){ tp = <0,"a",true>; tp[0] = 10; } ]]
test SUB9 [[ module A value main(){ tp = <0,"a",true>; tp[0] += 10; } ]]
test SUB10 [[ module A value main(){ tp = <0,"a",true>; tp[1] += 10; } ]]
expect { "Addition not defined on `str` and `int`" }

test SUB11 [[ module A value main(){ tp = <0,"a",true>; tp[3] += 10; } ]]
expect { "Tuple index must be between 0 and 2" }

test SLICE1 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[1..3] = 10; } ]]
test SLICE1 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[1..3] = "a"; } ]]
test SLICE2 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[1..3] += 10; } ]]

test SLICE3 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[..3] = 10; } ]]
test SLICE4 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[..] = 10; } ]]
test SLICE5 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[.."a"] = 10; } ]]
expect { "The last slice index must be of type `int`, found `str`" }

test SLICE6 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[1,2..3] = 10; } ]]
test SLICE7 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[1,2..3] += 10; } ]]

test SLICE8 [[ module A value main(){ lst = [0,1,2,3,4,5]; lst[1,"a"..3] = 10; } ]]
expect { "The slice step must be of type `int`, found `str`" }

test SLICE9 [[ module A value main(){ s = "abcdefg"; s[1..3] = "x"; } ]]
test SLICE10 [[ module A value main(){ s = "abcdefg"; s[1..3] += "x"; } ]]
test SLICE11 [[ module A value main(){ s = "abcdefg"; s[1..3] += 10; } ]]
expect { "Expected `str` in slice assignment, found `int`" }

test FIELD1 [[ module A data D = d1(int n); value main(){ x = d1(20); x.n = 30; } ]]
test FIELD2 [[ module A data D = d1(int n); value main(){ x = d1(20); x.n += 30; } ]]
test FIELD3 [[ module A data D = d1(int n); value main(){ x = d1(20); x.n += "a"; } ]]
expect { "Addition not defined on `int` and `str`" }

test FIELD4 [[ module A value main(){ tuple[str s, int n] x = <"a", 1>; x.s = "A"; } ]]
test FIELD5 [[ module A value main(){ tuple[str s, int n] x = <"a", 1>; x.s += "A"; } ]]
test FIELD6 [[ module A value main(){ tuple[str s, int n] x = <"a", 1>; x.n = 30; } ]]
test FIELD7 [[ module A value main(){ tuple[str s, int n] x = <"a", 1>; x.n += 30; } ]]
test FIELD8 [[ module A value main(){ tuple[str s, int n] x = <"a", 1>; x.n = true; } ]]
expect { "Field `n` requires `int`, found `bool`" }

test FIELDSUB1 [[ module A data D = d1(list[int] ns); value main(){ x = d1([0,1,2,3,4]); x.ns[1] = 10; } ]]
test FIELDSUB2 [[ module A data D = d1(list[int] ns); value main(){ x = d1([0,1,2,3,4]); x.ns[1] += 10; } ]]
test FIELDSUB1 [[ module A data D = d1(list[int] ns); value main(){ x = d1([0,1,2,3,4]); x.ns[1] = "a"; } ]]


test TUPLE1 [[ module A value main(){ tuple[str s, int n] x = <"a", 1>; <a, b> = x; a == "a"; b == 1;} ]]

test TUPLE2 [[ module A value main(){ <a, b> = <"a", 1>; a == "a"; b == 1;} ]]
test TUPLE3 [[ module A value main(){ <a, b> = <"a", 1>; b == "a"; } ]]
expect { "Comparison `==` not defined on `int` and `str`" }

test TUPLE3 [[ module A 
               int head(list[int] l) = l[0];
               list[int] tail(list[int] l) = l[1..];
               value main(){
                    l = [1,2,3];
                    <lhead,ltail> = <head(l), tail(l)>;
                    lhead == 1;
                    ltail == [2,3];
               }
]]
