package rascal;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
import java.util.regex.Matcher;
import io.usethesource.vallang.*;
import io.usethesource.vallang.type.*;
import org.rascalmpl.runtime.*;
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.runtime.function.*;
import org.rascalmpl.runtime.traverse.*;
import org.rascalmpl.runtime.utils.*;
import org.rascalmpl.exceptions.RuntimeExceptionFactory;
import org.rascalmpl.exceptions.Throw; 
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.interpreter.control_exceptions.Filtered;
import org.rascalmpl.types.NonTerminalType;
import org.rascalmpl.types.RascalTypeFactory;
import org.rascalmpl.util.ExpiringFunctionResultCache;
import org.rascalmpl.values.RascalValueFactory;
import org.rascalmpl.values.ValueFactoryFactory;
import org.rascalmpl.values.parsetrees.ITree;
import org.rascalmpl.values.parsetrees.TreeAdapter;



@SuppressWarnings({"unused","unchecked","deprecation"})
public class $ValueIO 
    extends
        org.rascalmpl.runtime.$RascalModule
    implements 
    	rascal.$ValueIO_$I {

    private final $ValueIO_$I $me;
    private final IList $constants;
    final java.util.Map<java.lang.String,IValue> $kwpDefaults_ValueIO_writeBinaryValueFile$54f312ebb70160dd;

    
    public final rascal.$Type M_Type;

    
    final org.rascalmpl.library.Prelude $Prelude; // TODO: asBaseClassName will generate name collisions if there are more of the same name in different packages

    
    public final io.usethesource.vallang.type.Type $T4;	/*astr()*/
    public final io.usethesource.vallang.type.Type $T1;	/*avalue()*/
    public final io.usethesource.vallang.type.Type $T0;	/*aloc()*/
    public final io.usethesource.vallang.type.Type $T3;	/*aparameter("T",avalue(),closed=false)*/
    public final io.usethesource.vallang.type.Type $T5;	/*aparameter("T",avalue(),closed=true)*/
    public final io.usethesource.vallang.type.Type ADT_Production;	/*aadt("Production",[],dataSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Exception;	/*aadt("Exception",[],dataSyntax())*/
    public final io.usethesource.vallang.type.Type $T2;	/*areified(aparameter("T",avalue(),closed=false))*/
    public final io.usethesource.vallang.type.Type ADT_Symbol;	/*aadt("Symbol",[],dataSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Attr;	/*aadt("Attr",[],dataSyntax())*/
    public final IConstructor $R1;	/*adt("Symbol",[])*/
    public final IConstructor $R2;	/*adt("Production",[])*/
    public final IConstructor $R0;	/*value()*/

    public $ValueIO(RascalExecutionContext rex){
        this(rex, null);
    }
    
    public $ValueIO(RascalExecutionContext rex, Object extended){
       super(rex);
       this.$me = extended == null ? this : ($ValueIO_$I)extended;
       ModuleStore mstore = rex.getModuleStore();
       mstore.put(rascal.$ValueIO.class, this);
       
       mstore.importModule(rascal.$Type.class, rex, rascal.$Type::new); 
       
       M_Type = mstore.getModule(rascal.$Type.class); 
       
                          
       
       $TS.importStore(M_Type.$TS);
       
       $Prelude = $initLibrary("org.rascalmpl.library.Prelude"); 
    
       $constants = readBinaryConstantsFile(this.getClass(), "rascal/$ValueIO.constants", 92, "63764b732e7b657e1f23fc5b01a5a6b0");
       ADT_Production = $adt("Production");
       ADT_Exception = $adt("Exception");
       ADT_Symbol = $adt("Symbol");
       ADT_Attr = $adt("Attr");
       $T4 = $TF.stringType();
       $T1 = $TF.valueType();
       $T0 = $TF.sourceLocationType();
       $T3 = $TF.parameterType("T", $T1);
       $T5 = $TF.parameterType("T", $T1);
       $T2 = $RTF.reifiedType($T3);
       $R1 = $RVF.reifiedType(((IConstructor)$constants.get(2)/*adt("Symbol",[])*/), ((IMap)$constants.get(3)/*(adt("Symbol",[]):choice(adt("Symbol",[]),{cons(label("datetime",adt("Symbol",[])),[],[],{}),cons(la ...*/));
       $R2 = $RVF.reifiedType(((IConstructor)$constants.get(74)/*adt("Production",[])*/), ((IMap)$constants.get(75)/*(adt("Production",[]):choice(adt("Production",[]),{cons(label("cons",adt("Production",[])),[label("d ...*/));
       $R0 = $RVF.reifiedType(((IConstructor)$constants.get(0)/*value()*/), ((IMap)$constants.get(1)/*()*/));
    
       
       $kwpDefaults_ValueIO_writeBinaryValueFile$54f312ebb70160dd = Util.kwpMap("compression", ((IBool)$constants.get(91)/*true*/));
    
    }
    public IBool isTypeVar(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isTypeVar($P0);
    }
    public IBool isMapType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isMapType($P0);
    }
    public IBool isBoolType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isBoolType($P0);
    }
    public IBool isSetType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isSetType($P0);
    }
    public IBool isRatType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isRatType($P0);
    }
    public IValue readValueFile(IValue $P0){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IValue)ValueIO_readValueFile$ea309a030fc08f08((ISourceLocation) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IValue glb(IValue $P0, IValue $P1){ // Generated by Resolver
       return (IValue) M_Type.glb($P0, $P1);
    }
    public IList addLabels(IValue $P0, IValue $P1){ // Generated by Resolver
       return (IList) M_Type.addLabels($P0, $P1);
    }
    public IBool isAliasType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isAliasType($P0);
    }
    public IBool isStrType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isStrType($P0);
    }
    public IConstructor choice(IValue $P0, IValue $P1){ // Generated by Resolver
       return (IConstructor) M_Type.choice($P0, $P1);
    }
    public IBool isADTType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isADTType($P0);
    }
    public void writeTextValueFile(IValue $P0, IValue $P1){ // Generated by Resolver
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T1)){
         try { ValueIO_writeTextValueFile$c43c732407724c55((ISourceLocation) $P0, (IValue) $P1); return; } catch (FailReturnFromVoidException e){};
       
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IBool isValueType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isValueType($P0);
    }
    public IBool isListType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isListType($P0);
    }
    public IBool isRealType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isRealType($P0);
    }
    public IBool isNodeType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isNodeType($P0);
    }
    public IBool isReifiedType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isReifiedType($P0);
    }
    public IBool isRelType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isRelType($P0);
    }
    public IBool isConstructorType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isConstructorType($P0);
    }
    public IValue readTextValueFile(IValue $P0){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IValue)ValueIO_readTextValueFile$299cac6baeeea723((ISourceLocation) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IValue readTextValueFile(IValue $P0, IValue $P1){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T2) && $isSubtypeOf($P1Type,$T0)){
         $result = (IValue)ValueIO_readTextValueFile$30ae6fc8c0910f54((IConstructor) $P0, (ISourceLocation) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IBool isListRelType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isListRelType($P0);
    }
    public IList addParamLabels(IValue $P0, IValue $P1){ // Generated by Resolver
       return (IList) M_Type.addParamLabels($P0, $P1);
    }
    public void writeBinaryValueFile(IValue $P0, IValue $P1, java.util.Map<java.lang.String,IValue> $kwpActuals){ // Generated by Resolver
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T1)){
         try { ValueIO_writeBinaryValueFile$54f312ebb70160dd((ISourceLocation) $P0, (IValue) $P1, $kwpActuals); return; } catch (FailReturnFromVoidException e){};
       
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IBool isLocType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isLocType($P0);
    }
    public IBool isNumType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isNumType($P0);
    }
    public IValue readBinaryValueFile(IValue $P0){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IValue)ValueIO_readBinaryValueFile$1b30fe51945a51e9((ISourceLocation) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IValue readBinaryValueFile(IValue $P0, IValue $P1){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T2) && $isSubtypeOf($P1Type,$T0)){
         $result = (IValue)ValueIO_readBinaryValueFile$654d9d02462c8a2e((IConstructor) $P0, (ISourceLocation) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IBool isTupleType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isTupleType($P0);
    }
    public IBool isBagType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isBagType($P0);
    }
    public IInteger getFileLength(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)ValueIO_getFileLength$2a69625057bd6abb((ISourceLocation) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IBool isVoidType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isVoidType($P0);
    }
    public IValue lub(IValue $P0, IValue $P1){ // Generated by Resolver
       return (IValue) M_Type.lub($P0, $P1);
    }
    public IBool subtype(IValue $P0, IValue $P1){ // Generated by Resolver
       return (IBool) M_Type.subtype($P0, $P1);
    }
    public IBool isFunctionType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isFunctionType($P0);
    }
    public IValue readTextValueFileWithEmbeddedTypes(IValue $P0, IValue $P1){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T2) && $isSubtypeOf($P1Type,$T0)){
         $result = (IValue)ValueIO_readTextValueFileWithEmbeddedTypes$eb2dc9cf7e58ab2a((IConstructor) $P0, (ISourceLocation) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IBool isIntType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isIntType($P0);
    }
    public IBool isDateTimeType(IValue $P0){ // Generated by Resolver
       return (IBool) M_Type.isDateTimeType($P0);
    }
    public IValue readTextValueString(IValue $P0){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T4)){
         $result = (IValue)ValueIO_readTextValueString$ca7c08a51b726474((IString) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IValue readTextValueString(IValue $P0, IValue $P1){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T2) && $isSubtypeOf($P1Type,$T4)){
         $result = (IValue)ValueIO_readTextValueString$ddb9fd6afef8f2d6((IConstructor) $P0, (IString) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }

    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(568,143,<18,0>,<21,1>) 
    public IValue ValueIO_readValueFile$ea309a030fc08f08(ISourceLocation file_0){ 
        
        
        return ((IValue)($me.readBinaryValueFile(((IConstructor)($R0)), ((ISourceLocation)file_0))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(714,134,<24,0>,<26,40>) 
    public IInteger ValueIO_getFileLength$2a69625057bd6abb(ISourceLocation file_0){ 
        
        
        return ((IInteger)((IInteger)$Prelude.getFileLength(file_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(851,154,<29,0>,<31,62>) 
    public IValue ValueIO_readBinaryValueFile$654d9d02462c8a2e(IConstructor result_0, ISourceLocation file_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T2.match(result_0.getType(), $typeBindings)){
           final IValue $result0 = ((IValue)((IValue)$Prelude.readBinaryValueFile(result_0, file_1)));
           if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result0.getType(),$T5)){
              return ((IValue)($result0));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(1007,90,<33,0>,<35,1>) 
    public IValue ValueIO_readBinaryValueFile$1b30fe51945a51e9(ISourceLocation file_0){ 
        
        
        return ((IValue)($me.readBinaryValueFile(((IConstructor)($R0)), ((ISourceLocation)file_0))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(1100,150,<38,0>,<40,60>) 
    public IValue ValueIO_readTextValueFile$30ae6fc8c0910f54(IConstructor result_0, ISourceLocation file_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T2.match(result_0.getType(), $typeBindings)){
           final IValue $result1 = ((IValue)((IValue)$Prelude.readTextValueFile(result_0, file_1)));
           if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result1.getType(),$T5)){
              return ((IValue)($result1));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(1252,86,<42,0>,<44,1>) 
    public IValue ValueIO_readTextValueFile$299cac6baeeea723(ISourceLocation file_0){ 
        
        
        return ((IValue)($me.readTextValueFile(((IConstructor)($R0)), ((ISourceLocation)file_0))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(1341,314,<47,0>,<51,1>) 
    public IValue ValueIO_readTextValueFileWithEmbeddedTypes$eb2dc9cf7e58ab2a(IConstructor result_0, ISourceLocation file_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T2.match(result_0.getType(), $typeBindings)){
           final IValue $result2 = ((IValue)($me.readTextValueFile(((IConstructor)($reifiedAType((IConstructor) ((IConstructor)($areified_get_field(result_0, "symbol"))), $amap_add_amap(((IMap)($amap_add_amap(((IMap)(((IMap)($areified_get_field(result_0, "definitions"))))),((IMap)(((IMap)($areified_get_field($R1, "definitions")))))))),((IMap)(((IMap)($areified_get_field($R2, "definitions"))))))))), ((ISourceLocation)file_1))));
           if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result2.getType(),$T5)){
              return ((IValue)($result2));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(1658,153,<54,0>,<57,1>) 
    public IValue ValueIO_readTextValueString$ca7c08a51b726474(IString input_0){ 
        
        
        return ((IValue)($me.readTextValueString(((IConstructor)($R0)), ((IString)input_0))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(1814,205,<60,0>,<62,63>) 
    public IValue ValueIO_readTextValueString$ddb9fd6afef8f2d6(IConstructor result_0, IString input_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T2.match(result_0.getType(), $typeBindings)){
           final IValue $result3 = ((IValue)((IValue)$Prelude.readTextValueString(result_0, input_1)));
           if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result3.getType(),$T5)){
              return ((IValue)($result3));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(2023,200,<65,0>,<67,84>) 
    public void ValueIO_writeBinaryValueFile$54f312ebb70160dd(ISourceLocation file_0, IValue val_1, java.util.Map<java.lang.String,IValue> $kwpActuals){ 
        
        java.util.Map<java.lang.String,IValue> $kwpDefaults = $kwpDefaults_ValueIO_writeBinaryValueFile$54f312ebb70160dd;
    
        $Prelude.writeBinaryValueFile(file_0, val_1, (IBool)($kwpActuals.containsKey("compression") ? $kwpActuals.get("compression") : $kwpDefaults.get("compression"))); 
        return;
        
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/ValueIO.rsc|(2227,163,<70,0>,<72,57>) 
    public void ValueIO_writeTextValueFile$c43c732407724c55(ISourceLocation file_0, IValue val_1){ 
        
        
        $Prelude.writeTextValueFile(file_0, val_1); 
        return;
        
    
    }
    

    public static void main(String[] args) {
      throw new RuntimeException("No function `main` found in Rascal module `ValueIO`");
    }
}