package rascal;
import io.usethesource.vallang.*;
import org.rascalmpl.runtime.function.*;

@SuppressWarnings("unused")
public interface $List_$I  {
    IValue concat(IValue $0);
    IValue delete(IValue $0, IValue $1);
    IValue distribution(IValue $0);
    IValue drop(IValue $0, IValue $1);
    IValue dup(IValue $0);
    IValue elementAt(IValue $0, IValue $1);
    IValue getFirstFrom(IValue $0);
    IValue getOneFrom(IValue $0);
    IValue head(IValue $0, IValue $1);
    IValue head(IValue $0);
    IValue headTail(IValue $0);
    IValue index(IValue $0);
    IValue indexOf(IValue $0, IValue $1);
    IValue insertAt(IValue $0, IValue $1, IValue $2);
    IValue intercalate(IValue $0, IValue $1);
    IValue intersperse(IValue $0, IValue $1);
    IValue isEmpty(IValue $0);
    IValue isSorted(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue itoString(IValue $0);
    IValue last(IValue $0);
    IValue lastIndexOf(IValue $0, IValue $1);
    IValue mapper(IValue $0, IValue $1);
    IValue max(IValue $0);
    IValue merge(IValue $0, IValue $1);
    IValue merge(IValue $0, IValue $1, IValue $2);
    IValue min(IValue $0);
    IValue mix(IValue $0, IValue $1);
    IValue permutations(IValue $0);
    IValue permutationsBag(IValue $0);
    IValue pop(IValue $0);
    IValue prefix(IValue $0);
    IValue push(IValue $0, IValue $1);
    IValue reducer(IValue $0, IValue $1, IValue $2);
    IValue remove(IValue $0, IValue $1);
    IValue removeFromBag(IValue $0, IValue $1);
    IValue removeFromBag(IValue $0, IValue $1, IValue $2);
    IValue reverse(IValue $0);
    IValue shuffle(IValue $0);
    IValue shuffle(IValue $0, IValue $1);
    IValue size(IValue $0);
    IValue slice(IValue $0, IValue $1, IValue $2);
    IValue sort(IValue $0);
    IValue sort(IValue $0, IValue $1);
    IValue split(IValue $0);
    IValue sum(IValue $0);
    IValue tail(IValue $0);
    IValue tail(IValue $0, IValue $1);
    IValue take(IValue $0, IValue $1);
    IValue takeOneFrom(IValue $0);
    IValue takeWhile(IValue $0, IValue $1);
    IValue toMap(IValue $0);
    IValue toMapUnique(IValue $0);
    IValue toRel(IValue $0);
    IValue toSet(IValue $0);
    IValue toString(IValue $0);
    IValue top(IValue $0);
    IValue unzip2(IValue $0);
    IValue unzip3(IValue $0);
    IValue upTill(IValue $0);
    IValue zip2(IValue $0, IValue $1);
    IValue zip3(IValue $0, IValue $1, IValue $2);
}