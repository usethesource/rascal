package rascal;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
import java.util.regex.Matcher;
import io.usethesource.vallang.*;
import io.usethesource.vallang.type.*;
import org.rascalmpl.runtime.*;
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.runtime.function.*;
import org.rascalmpl.runtime.traverse.*;
import org.rascalmpl.runtime.utils.*;
import org.rascalmpl.exceptions.RuntimeExceptionFactory;
import org.rascalmpl.exceptions.Throw; 
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.interpreter.control_exceptions.Filtered;
import org.rascalmpl.types.NonTerminalType;
import org.rascalmpl.types.RascalTypeFactory;
import org.rascalmpl.util.ExpiringFunctionResultCache;
import org.rascalmpl.values.RascalValueFactory;
import org.rascalmpl.values.ValueFactoryFactory;
import org.rascalmpl.values.parsetrees.ITree;
import org.rascalmpl.values.parsetrees.TreeAdapter;



@SuppressWarnings({"unused","unchecked","deprecation"})
public class $Node 
    extends
        org.rascalmpl.runtime.$RascalModule
    implements 
    	rascal.$Node_$I {

    private final $Node_$I $me;
    private final IList $constants;
    final java.util.Map<java.lang.String,IValue> $kwpDefaults_Node_makeNode$a205564acc8fbb7f;

    

    
    final org.rascalmpl.library.Prelude $Prelude; // TODO: asBaseClassName will generate name collisions if there are more of the same name in different packages

    
    public final io.usethesource.vallang.type.Type $T3;	/*astr()*/
    public final io.usethesource.vallang.type.Type $T4;	/*avalue()*/
    public final io.usethesource.vallang.type.Type $T9;	/*aparameter("T",avalue(),closed=true)*/
    public final io.usethesource.vallang.type.Type $T6;	/*aparameter("T",avalue(),closed=false)*/
    public final io.usethesource.vallang.type.Type $T7;	/*aset(astr())*/
    public final io.usethesource.vallang.type.Type $T0;	/*anode([])*/
    public final io.usethesource.vallang.type.Type $T1;	/*aparameter("T",anode([]),closed=false)*/
    public final io.usethesource.vallang.type.Type $T2;	/*amap(astr(),avalue())*/
    public final io.usethesource.vallang.type.Type $T8;	/*aparameter("T",anode([]),closed=true)*/
    public final io.usethesource.vallang.type.Type $T5;	/*alist(avalue())*/

    public $Node(RascalExecutionContext rex){
        this(rex, null);
    }
    
    public $Node(RascalExecutionContext rex, Object extended){
       super(rex);
       this.$me = extended == null ? this : ($Node_$I)extended;
       ModuleStore mstore = rex.getModuleStore();
       mstore.put(rascal.$Node.class, this);
        
        
       
                          
       
       
       $Prelude = $initLibrary("org.rascalmpl.library.Prelude"); 
    
       $constants = readBinaryConstantsFile(this.getClass(), "rascal/$Node.constants", 1, "2f8cfc21de2cecb8efada9d0a44f68a8");
       $T3 = $TF.stringType();
       $T4 = $TF.valueType();
       $T9 = $TF.parameterType("T", $T4);
       $T6 = $TF.parameterType("T", $T4);
       $T7 = $TF.setType($T3);
       $T0 = $TF.nodeType();
       $T1 = $TF.parameterType("T", $T0);
       $T2 = $TF.mapType($T3,$T4);
       $T8 = $TF.parameterType("T", $T0);
       $T5 = $TF.listType($T4);
    
       
       $kwpDefaults_Node_makeNode$a205564acc8fbb7f = Util.kwpMap("keywordParameters", ((IMap)$constants.get(0)/*()*/));
    
    }
    public IString getName(IValue $P0){ // Generated by Resolver
       IString $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IString)Node_getName$8220c1ee18300d75((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INode setAnnotations(IValue $P0, IValue $P1){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T1) && $isSubtypeOf($P1Type,$T2)){
         $result = (INode)Node_setAnnotations$4a78ea2e810e4a12((INode) $P0, (IMap) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IString toString(IValue $P0){ // Generated by Resolver
       IString $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IString)Node_toString$60c74d13a3a05889((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IMap getAnnotations(IValue $P0){ // Generated by Resolver
       IMap $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IMap)Node_getAnnotations$997a085416e764e9((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INode makeNode(IValue $P0, IValue $P1, java.util.Map<java.lang.String,IValue> $kwpActuals){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T3) && $isSubtypeOf($P1Type,$T5)){
         $result = (INode)Node_makeNode$a205564acc8fbb7f((IString) $P0, (IList) $P1, $kwpActuals);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public INode setKeywordParameters(IValue $P0, IValue $P1){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T1) && $isSubtypeOf($P1Type,$T2)){
         $result = (INode)Node_setKeywordParameters$21db00ddc2ae8b1f((INode) $P0, (IMap) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public INode arbNode(){ // Generated by Resolver
       INode $result = null;
       $result = (INode)Node_arbNode$5d7a2766c8e547f5();
       if($result != null) return $result;
       throw RuntimeExceptionFactory.callFailed($RVF.list());
    }
    public IValue delAnnotationsRec(IValue $P0){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T6)){
         $result = (IValue)Node_delAnnotationsRec$ce78888ea6751c16((IValue) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INode delAnnotations(IValue $P0){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T1)){
         $result = (INode)Node_delAnnotations$789589503b5f45a3((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INode delAnnotation(IValue $P0, IValue $P1){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T1) && $isSubtypeOf($P1Type,$T3)){
         $result = (INode)Node_delAnnotation$e3637c451560b3f6((INode) $P0, (IString) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IValue unsetRec(IValue $P0){ // Generated by Resolver
       IValue $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T6)){
         $result = (IValue)Node_unsetRec$f0d37b6f74d90365((IValue) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INode unsetRec(IValue $P0, IValue $P1){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T6) && $isSubtypeOf($P1Type,$T3)){
         $result = (INode)Node_unsetRec$b63c422bf0e84dd0((IValue) $P0, (IString) $P1);
         if($result != null) return $result;
       }
       if($isSubtypeOf($P0Type,$T1) && $isSubtypeOf($P1Type,$T7)){
         $result = (INode)Node_unsetRec$5394aa5e7b98f9a0((INode) $P0, (ISet) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public INode unset(IValue $P0){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T1)){
         $result = (INode)Node_unset$bdf124b95343e3f6((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INode unset(IValue $P0, IValue $P1){ // Generated by Resolver
       INode $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T1) && $isSubtypeOf($P1Type,$T3)){
         $result = (INode)Node_unset$2a772a89c1766534((INode) $P0, (IString) $P1);
         if($result != null) return $result;
       }
       if($isSubtypeOf($P0Type,$T1) && $isSubtypeOf($P1Type,$T7)){
         $result = (INode)Node_unset$1de12aecb35205c6((INode) $P0, (ISet) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IString itoString(IValue $P0){ // Generated by Resolver
       IString $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IString)Node_itoString$68d8ab63abcf7845((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IList getChildren(IValue $P0){ // Generated by Resolver
       IList $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IList)Node_getChildren$f264bd0f46070402((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger arity(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)Node_arity$4d0848d1bb09281c((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IMap getKeywordParameters(IValue $P0){ // Generated by Resolver
       IMap $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IMap)Node_getKeywordParameters$a6c3c6e6c375754b((INode) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }

    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(531,226,<19,0>,<28,30>) 
    public IInteger Node_arity$4d0848d1bb09281c(INode T_0){ 
        
        
        return ((IInteger)((IInteger)$Prelude.arity(T_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(760,200,<31,0>,<39,44>) 
    public IList Node_getChildren$f264bd0f46070402(INode T_0){ 
        
        
        return ((IList)((IList)$Prelude.getChildren(T_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(963,241,<42,0>,<50,56>) 
    public IMap Node_getKeywordParameters$a6c3c6e6c375754b(INode T_0){ 
        
        
        return ((IMap)((IMap)$Prelude.getKeywordParameters(T_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(1206,115,<52,0>,<55,72>) 
    public IMap Node_getAnnotations$997a085416e764e9(INode T_0){ 
        
        
        return ((IMap)($me.getKeywordParameters(((INode)T_0))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(1324,281,<58,0>,<66,92>) 
    public INode Node_setKeywordParameters$21db00ddc2ae8b1f(INode x_0, IMap keywordParameters_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T1.match(x_0.getType(), $typeBindings)){
           final INode $result0 = ((INode)((INode)$Prelude.setKeywordParameters(x_0, keywordParameters_1)));
           if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result0.getType(),$T8)){
              return ((INode)($result0));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(2035,190,<80,0>,<84,47>) 
    public INode Node_setAnnotations$4a78ea2e810e4a12(INode x_0, IMap keywordParameters_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T1.match(x_0.getType(), $typeBindings)){
           final INode $result1 = ((INode)($me.setKeywordParameters(((INode)x_0), ((IMap)keywordParameters_1))));
           if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result1.getType(),$T8)){
              return ((INode)($result1));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(2230,186,<87,0>,<95,32>) 
    public IString Node_getName$8220c1ee18300d75(INode T_0){ 
        
        
        return ((IString)((IString)$Prelude.getName(T_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(2419,265,<98,0>,<106,85>) 
    public INode Node_makeNode$a205564acc8fbb7f(IString N_0, IList V_1, java.util.Map<java.lang.String,IValue> $kwpActuals){ 
        
        java.util.Map<java.lang.String,IValue> $kwpDefaults = $kwpDefaults_Node_makeNode$a205564acc8fbb7f;
    
        return ((INode)((INode)$Prelude.makeNode(N_0, V_1, (IMap)($kwpActuals.containsKey("keywordParameters") ? $kwpActuals.get("keywordParameters") : $kwpDefaults.get("keywordParameters")))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(2687,186,<109,0>,<111,65>) 
    public INode Node_unset$2a772a89c1766534(INode x_0, IString keywordParameter_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T1.match(x_0.getType(), $typeBindings)){
           final INode $result2 = ((INode)((INode)$Prelude.unset(x_0, keywordParameter_1)));
           if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result2.getType(),$T8)){
              return ((INode)($result2));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(2875,130,<113,0>,<116,98>) 
    public INode Node_delAnnotation$e3637c451560b3f6(INode x_0, IString keywordParameter_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T1.match(x_0.getType(), $typeBindings)){
           final INode $result3 = ((INode)($me.unset(((INode)x_0), ((IString)keywordParameter_1))));
           if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result3.getType(),$T8)){
              return ((INode)($result3));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(3009,254,<119,0>,<125,1>) 
    public INode Node_unset$1de12aecb35205c6(INode x_0, ISet keywordParameters_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T1.match(x_0.getType(), $typeBindings)){
           if(true){
              if(true){
                 /*muExists*/FOR0: 
                     do {
                         FOR0_GEN3162:
                         for(IValue $elem4_for : ((ISet)keywordParameters_1)){
                             IString $elem4 = (IString) $elem4_for;
                             IString keywordParameter_2 = ((IString)($elem4));
                             x_0 = ((INode)($me.unset(((INode)x_0), ((IString)keywordParameter_2))));
                         
                         }
                         continue FOR0;
                                     
                     } while(false);
                 /* void:  muCon([]) */final INode $result5 = ((INode)x_0);
                 if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result5.getType(),$T8)){
                    return ((INode)($result5));
                 
                 } else {
                    return null;
                 }
              } else {
                 return null;
              }
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(3267,148,<129,0>,<131,43>) 
    public INode Node_unset$bdf124b95343e3f6(INode x_0){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T1.match(x_0.getType(), $typeBindings)){
           final INode $result6 = ((INode)((INode)$Prelude.unset(x_0)));
           if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result6.getType(),$T8)){
              return ((INode)($result6));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(3417,88,<133,0>,<136,58>) 
    public INode Node_delAnnotations$789589503b5f45a3(INode x_0){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T1.match(x_0.getType(), $typeBindings)){
           final INode $result7 = ((INode)($me.unset(((INode)x_0))));
           if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result7.getType(),$T8)){
              return ((INode)($result7));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(3508,176,<139,0>,<141,30>) 
    public IValue Node_unsetRec$f0d37b6f74d90365(IValue x_0){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T6.match(x_0.getType(), $typeBindings)){
           final IValue $result8 = ((IValue)((IValue)$Prelude.unsetRec(x_0)));
           if($T9.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result8.getType(),$T9)){
              return ((IValue)($result8));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(3686,81,<143,0>,<146,48>) 
    public IValue Node_delAnnotationsRec$ce78888ea6751c16(IValue x_0){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T6.match(x_0.getType(), $typeBindings)){
           final IValue $result9 = ((IValue)($me.unsetRec(((IValue)x_0))));
           if($T9.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result9.getType(),$T9)){
              return ((IValue)($result9));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(3770,215,<149,0>,<152,2>) 
    public IValue Node_unsetRec$b63c422bf0e84dd0(IValue x_0, IString $aux_keywordParameter_1){ 
        ValueRef<IString> keywordParameter_1 = new ValueRef<IString>("keywordParameter_1", $aux_keywordParameter_1);
    
        
        try {
            HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
            if($T6.match(x_0.getType(), $typeBindings)){
               final IValue $result11 = ((IValue)($TRAVERSE.traverse(DIRECTION.BottomUp, PROGRESS.Continuing, FIXEDPOINT.No, REBUILD.Yes, 
                    new DescendantDescriptorAlwaysTrue($RVF.bool(false)),
                    x_0,
                    (IVisitFunction) (IValue $VISIT1_subject, TraversalState $traversalState) -> {
                        VISIT1:switch(Fingerprint.getFingerprint($VISIT1_subject)){
                        
                            case 0:
                                
                        
                            default: 
                                if($isSubtypeOf($VISIT1_subject.getType(),$T0)){
                                   /*muExists*/CASE_0_0: 
                                       do {
                                           if($isSubtypeOf($VISIT1_subject.getType(),$T0.instantiate($typeBindings))){
                                              INode n_2 = ((INode)($VISIT1_subject));
                                              INode $replacement10 = (INode)($me.unset(((INode)n_2), keywordParameter_1.getValue()));
                                              if($isSubtypeOf($replacement10.getType(),$VISIT1_subject.getType())){
                                                 $traversalState.setMatchedAndChanged(true, true);
                                                 return $replacement10;
                                              
                                              } else {
                                                 break VISIT1;// switch
                                              
                                              }
                                           }
                                   
                                       } while(false);
                                
                                }
               
                        }
                        return $VISIT1_subject;
                    })));
               if($T9.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result11.getType(),$T9)){
                  return ((IValue)($result11));
               
               } else {
                  return null;
               }
            } else {
               return null;
            }
        } catch (ReturnFromTraversalException e) {
            return (IValue) e.getValue();
        }
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(3988,307,<155,0>,<158,2>) 
    public INode Node_unsetRec$5394aa5e7b98f9a0(INode x_0, ISet $aux_keywordParameters_1){ 
        ValueRef<ISet> keywordParameters_1 = new ValueRef<ISet>("keywordParameters_1", $aux_keywordParameters_1);
    
        
        try {
            HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
            if($T1.match(x_0.getType(), $typeBindings)){
               if(true){
                  if(true){
                     final INode $result13 = ((INode)($TRAVERSE.traverse(DIRECTION.BottomUp, PROGRESS.Continuing, FIXEDPOINT.No, REBUILD.Yes, 
                          new DescendantDescriptorAlwaysTrue($RVF.bool(false)),
                          x_0,
                          (IVisitFunction) (IValue $VISIT2_subject, TraversalState $traversalState) -> {
                              VISIT2:switch(Fingerprint.getFingerprint($VISIT2_subject)){
                              
                                  case 0:
                                      
                              
                                  default: 
                                      if($isSubtypeOf($VISIT2_subject.getType(),$T0)){
                                         /*muExists*/CASE_0_0: 
                                             do {
                                                 if($isSubtypeOf($VISIT2_subject.getType(),$T0.instantiate($typeBindings))){
                                                    INode n_2 = ((INode)($VISIT2_subject));
                                                    /*muExists*/FOR3: 
                                                        do {
                                                            FOR3_GEN4210:
                                                            for(IValue $elem12_for : keywordParameters_1.getValue()){
                                                                IString $elem12 = (IString) $elem12_for;
                                                                IString keywordParameter_3 = ((IString)($elem12));
                                                                n_2 = ((INode)($me.unset(((INode)n_2), ((IString)keywordParameter_3))));
                                                            
                                                            }
                                                            continue FOR3;
                                                                        
                                                        } while(false);
                                                    /* void:  muCon([]) */$traversalState.setMatchedAndChanged(true, true);
                                                    return n_2;
                                                 
                                                 }
                                         
                                             } while(false);
                                      
                                      }
                     
                              }
                              return $VISIT2_subject;
                          })));
                     if($T8.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result13.getType(),$T8)){
                        return ((INode)($result13));
                     
                     } else {
                        return null;
                     }
                  } else {
                     return null;
                  }
               } else {
                  return null;
               }
            } else {
               return null;
            }
        } catch (ReturnFromTraversalException e) {
            return (INode) e.getValue();
        }
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(4298,69,<161,0>,<162,27>) 
    public INode Node_arbNode$5d7a2766c8e547f5(){ 
        
        
        return ((INode)((INode)$Prelude.arbNode()));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(4371,220,<166,0>,<175,33>) 
    public IString Node_toString$60c74d13a3a05889(INode T_0){ 
        
        
        return ((IString)((IString)$Prelude.toString(T_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/Node.rsc|(4595,232,<179,0>,<188,34>) 
    public IString Node_itoString$68d8ab63abcf7845(INode T_0){ 
        
        
        return ((IString)((IString)$Prelude.itoString(T_0)));
    
    }
    

    public static void main(String[] args) {
      throw new RuntimeException("No function `main` found in Rascal module `Node`");
    }
}