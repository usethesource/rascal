package rascal.util;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
import java.util.regex.Matcher;
import io.usethesource.vallang.*;
import io.usethesource.vallang.type.*;
import org.rascalmpl.runtime.*;
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.runtime.function.*;
import org.rascalmpl.runtime.traverse.*;
import org.rascalmpl.runtime.utils.*;
import org.rascalmpl.exceptions.RuntimeExceptionFactory;
import org.rascalmpl.exceptions.Throw; 
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.interpreter.control_exceptions.Filtered;
import org.rascalmpl.types.NonTerminalType;
import org.rascalmpl.types.RascalTypeFactory;
import org.rascalmpl.util.ExpiringFunctionResultCache;
import org.rascalmpl.values.RascalValueFactory;
import org.rascalmpl.values.ValueFactoryFactory;
import org.rascalmpl.values.parsetrees.ITree;
import org.rascalmpl.values.parsetrees.TreeAdapter;



@SuppressWarnings({"unused","unchecked","deprecation"})
public class $Math 
    extends
        org.rascalmpl.runtime.$RascalModule
    implements 
    	rascal.util.$Math_$I {

    private final $Math_$I $me;
    private final IList $constants;
    
    
    public final rascal.$Exception M_Exception;
    public final rascal.$List M_List;

    
    final org.rascalmpl.library.util.Math $Math; // TODO: asBaseClassName will generate name collisions if there are more of the same name in different packages

    
    public final io.usethesource.vallang.type.Type $T0;	/*anum()*/
    public final io.usethesource.vallang.type.Type $T4;	/*aparameter("T",anum(),closed=false)*/
    public final io.usethesource.vallang.type.Type $T3;	/*areal()*/
    public final io.usethesource.vallang.type.Type $T1;	/*arat()*/
    public final io.usethesource.vallang.type.Type $T2;	/*aint()*/
    public final io.usethesource.vallang.type.Type $T5;	/*aparameter("T",anum(),closed=true)*/
    public final io.usethesource.vallang.type.Type ADT_RuntimeException;	/*aadt("RuntimeException",[],dataSyntax())*/

    public $Math(RascalExecutionContext rex){
        this(rex, null);
    }
    
    public $Math(RascalExecutionContext rex, Object extended){
       super(rex);
       this.$me = extended == null ? this : ($Math_$I)extended;
       ModuleStore mstore = rex.getModuleStore();
       mstore.put(rascal.util.$Math.class, this);
       
       mstore.importModule(rascal.$Exception.class, rex, rascal.$Exception::new);
       mstore.importModule(rascal.$List.class, rex, rascal.$List::new); 
       
       M_Exception = mstore.getModule(rascal.$Exception.class);
       M_List = mstore.getModule(rascal.$List.class); 
       
                          
       
       $TS.importStore(M_Exception.$TS);
       $TS.importStore(M_List.$TS);
       
       $Math = $initLibrary("org.rascalmpl.library.util.Math"); 
    
       $constants = readBinaryConstantsFile(this.getClass(), "rascal/util/$Math.constants", 10, "904fed9d00b63f2afab18f6f7f7ec9ea");
       ADT_RuntimeException = $adt("RuntimeException");
       $T0 = $TF.numberType();
       $T4 = $TF.parameterType("T", $T0);
       $T3 = $TF.realType();
       $T1 = $TF.rationalType();
       $T2 = $TF.integerType();
       $T5 = $TF.parameterType("T", $T0);
    
       
       
    }
    public IReal log10(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_log10$92e5941cc325ab04((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal cos(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_cos$25fdb620b3eb75d8((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger numerator(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T1)){
         $result = (IInteger)util_Math_numerator$61e94e5a5f76f380((IRational) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal exp(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_exp$ee5a897e762c5904((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal sqrt(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_sqrt$2b673fb474e9231f((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IValue head(IValue $P0){ // Generated by Resolver
       return (IValue) M_List.head($P0);
    }
    public IReal tan(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_tan$981a5d54892b4828((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public void arbSeed(IValue $P0){ // Generated by Resolver
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T2)){
         try { util_Math_arbSeed$43617edad6318847((IInteger) $P0); return; } catch (FailReturnFromVoidException e){};
       
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal ln(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_ln$2d862535e4b2cbea((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal fitDouble(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T3)){
         $result = (IReal)util_Math_fitDouble$a6a47c152ee8e809((IReal) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INumber max(IValue $P0, IValue $P1){ // Generated by Resolver
       INumber $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T4) && $isSubtypeOf($P1Type,$T4)){
         $result = (INumber)util_Math_max$f859d573f509aca0((INumber) $P0, (INumber) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IReal log(IValue $P0, IValue $P1){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T0)){
         $result = (IReal)util_Math_log$a0da2d174a34d686((INumber) $P0, (INumber) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IInteger ceil(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)util_Math_ceil$206c17dde36fddb6((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger remainder(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T1)){
         $result = (IInteger)util_Math_remainder$eff4c728c226a26d((IRational) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal E(){ // Generated by Resolver
       IReal $result = null;
       $result = (IReal)util_Math_E$a634c3472007cc51();
       if($result != null) return $result;
       throw RuntimeExceptionFactory.callFailed($RVF.list());
    }
    public IInteger percent(IValue $P0, IValue $P1){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T0)){
         $result = (IInteger)util_Math_percent$eb710c0af01295a1((INumber) $P0, (INumber) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IInteger denominator(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T1)){
         $result = (IInteger)util_Math_denominator$2b16b1dd44bfd930((IRational) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger scale(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)util_Math_scale$57ab720514843992((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IRational toRat(IValue $P0, IValue $P1){ // Generated by Resolver
       IRational $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T2) && $isSubtypeOf($P1Type,$T2)){
         $result = (IRational)util_Math_toRat$f5f51286b388713b((IInteger) $P0, (IInteger) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IReal fitFloat(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T3)){
         $result = (IReal)util_Math_fitFloat$e288e1b3587e03aa((IReal) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger floor(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)util_Math_floor$58690a2755890a89((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IString toString(IValue $P0){ // Generated by Resolver
       IString $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IString)util_Math_toString$d077706afbfe26cb((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal log2(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_log2$d2ec1e9d591b7b56((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger arbPrime(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T2)){
         $result = (IInteger)util_Math_arbPrime$e6701dcd9718f457((IInteger) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger round(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)util_Math_round$0ce679d3da862392((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INumber round(IValue $P0, IValue $P1){ // Generated by Resolver
       INumber $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T4) && $isSubtypeOf($P1Type,$T4)){
         $result = (INumber)util_Math_round$890d09d5b0a9251a((INumber) $P0, (INumber) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IReal arbReal(){ // Generated by Resolver
       IReal $result = null;
       $result = (IReal)util_Math_arbReal$4590901f60d3c53e();
       if($result != null) return $result;
       throw RuntimeExceptionFactory.callFailed($RVF.list());
    }
    public IList tail(IValue $P0){ // Generated by Resolver
       return (IList) M_List.tail($P0);
    }
    public ITuple headTail(IValue $P0){ // Generated by Resolver
       return (ITuple) M_List.headTail($P0);
    }
    public IReal nroot(IValue $P0, IValue $P1){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T2)){
         $result = (IReal)util_Math_nroot$9e6edb0a3ad436fd((INumber) $P0, (IInteger) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public INumber abs(IValue $P0){ // Generated by Resolver
       INumber $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T4)){
         $result = (INumber)util_Math_abs$0e04fdcbccce288f((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public INumber min(IValue $P0, IValue $P1){ // Generated by Resolver
       INumber $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T4) && $isSubtypeOf($P1Type,$T4)){
         $result = (INumber)util_Math_min$503b13941def78aa((INumber) $P0, (INumber) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IInteger unscaled(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T3)){
         $result = (IInteger)util_Math_unscaled$44066a1c838c6c08((IReal) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IList primes(IValue $P0){ // Generated by Resolver
       IList $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T2)){
         $result = (IList)util_Math_primes$7f2a2df02bbf181b((IInteger) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger toInt(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)util_Math_toInt$90db44238d53444e((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IRational arbRat(IValue $P0, IValue $P1){ // Generated by Resolver
       IRational $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T2) && $isSubtypeOf($P1Type,$T2)){
         $result = (IRational)util_Math_arbRat$e9a5b5406c51e456((IInteger) $P0, (IInteger) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IRational arbRat(){ // Generated by Resolver
       IRational $result = null;
       $result = (IRational)util_Math_arbRat$6d2dcd00ab5ec3f0();
       if($result != null) return $result;
       throw RuntimeExceptionFactory.callFailed($RVF.list());
    }
    public IReal sin(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_sin$9ed61b08a75c8bc3((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal pow(IValue $P0, IValue $P1){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T3)){
         $result = (IReal)util_Math_pow$2845813828589954((INumber) $P0, (IReal) $P1);
         if($result != null) return $result;
       }
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T2)){
         $result = (IReal)util_Math_pow$87f4c82cab4a297c((INumber) $P0, (IInteger) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IReal PI(){ // Generated by Resolver
       IReal $result = null;
       $result = (IReal)util_Math_PI$5ff2190de6bfeaca();
       if($result != null) return $result;
       throw RuntimeExceptionFactory.callFailed($RVF.list());
    }
    public IReal toReal(IValue $P0){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IReal)util_Math_toReal$0f28a5d4173e938f((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger setPrecision(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T2)){
         $result = (IInteger)util_Math_setPrecision$e34d4ada2ae3c42f((IInteger) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger precision(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T0)){
         $result = (IInteger)util_Math_precision$096d067774cb10ba((INumber) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IReal precision(IValue $P0, IValue $P1){ // Generated by Resolver
       IReal $result = null;
       Type $P0Type = $P0.getType();
       Type $P1Type = $P1.getType();
       if($isSubtypeOf($P0Type,$T0) && $isSubtypeOf($P1Type,$T2)){
         $result = (IReal)util_Math_precision$df80f78f0ec7a633((INumber) $P0, (IInteger) $P1);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0, $P1));
    }
    public IInteger arbInt(IValue $P0){ // Generated by Resolver
       IInteger $result = null;
       Type $P0Type = $P0.getType();
       if($isSubtypeOf($P0Type,$T2)){
         $result = (IInteger)util_Math_arbInt$774439ec3c7cb5ab((IInteger) $P0);
         if($result != null) return $result;
       }
       
       throw RuntimeExceptionFactory.callFailed($RVF.list($P0));
    }
    public IInteger arbInt(){ // Generated by Resolver
       IInteger $result = null;
       $result = (IInteger)util_Math_arbInt$82b38d5b0ef9bf80();
       if($result != null) return $result;
       throw RuntimeExceptionFactory.callFailed($RVF.list());
    }

    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(667,299,<25,0>,<41,1>) 
    public INumber util_Math_abs$0e04fdcbccce288f(INumber N_0){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T4.match(N_0.getType(), $typeBindings)){
           /*muExists*/$RET0: 
               do {
                   if((((IBool)($anum_less_aint(((INumber)N_0),((IInteger)$constants.get(0)/*0*/)).not()))).getValue()){
                      final INumber $result1 = ((INumber)N_0);
                      if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result1.getType(),$T5)){
                         return ((INumber)($result1));
                      
                      } else {
                         return null;
                      }
                   }
           
               } while(false);
           final INumber $result1 = ((INumber)(((INumber)N_0).negate()));
           if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result1.getType(),$T5)){
              return ((INumber)($result1));
           
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(969,477,<44,0>,<64,25>) 
    public IInteger util_Math_arbInt$82b38d5b0ef9bf80(){ 
        
        
        return ((IInteger)((IInteger)$Math.arbInt()));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(1448,78,<66,0>,<67,34>) 
    public IInteger util_Math_arbInt$774439ec3c7cb5ab(IInteger limit_0){ 
        
        
        return ((IInteger)((IInteger)$Math.arbInt(limit_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(1529,301,<70,0>,<83,27>) 
    public IReal util_Math_arbReal$4590901f60d3c53e(){ 
        
        
        return ((IReal)((IReal)$Math.arbReal()));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(1833,512,<86,0>,<93,35>) 
    public void util_Math_arbSeed$43617edad6318847(IInteger seed_0){ 
        
        
        $Math.arbSeed(seed_0); 
        return;
        
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(2348,275,<96,0>,<115,1>) 
    public IRational util_Math_arbRat$6d2dcd00ab5ec3f0(){ 
        
        
        IInteger n_0 = ((IInteger)($me.arbInt()));
        IInteger d_1 = ((IInteger)($me.arbInt()));
        if((((IBool)($equal(((IInteger)d_1), ((IInteger)$constants.get(0)/*0*/))))).getValue()){
           d_1 = ((IInteger)$constants.get(1)/*1*/);
        
        }
        return ((IRational)($me.toRat(((IInteger)n_0), ((IInteger)d_1))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(2625,129,<117,0>,<123,1>) 
    public IRational util_Math_arbRat$e9a5b5406c51e456(IInteger limit1_0, IInteger limit2_1){ 
        
        
        IInteger n_2 = ((IInteger)($me.arbInt(((IInteger)limit1_0))));
        IInteger d_3 = ((IInteger)($me.arbInt(((IInteger)limit2_1))));
        if((((IBool)($equal(((IInteger)d_3), ((IInteger)$constants.get(0)/*0*/))))).getValue()){
           d_3 = ((IInteger)$constants.get(1)/*1*/);
        
        }
        return ((IRational)($me.toRat(((IInteger)n_2), ((IInteger)d_3))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(2757,354,<126,0>,<146,1>) 
    public IInteger util_Math_ceil$206c17dde36fddb6(INumber x_0){ 
        
        
        IInteger i_1 = ((IInteger)($me.toInt(((INumber)x_0))));
        if((((IBool)($equal(((IInteger)i_1), ((INumber)x_0))))).getValue()){
           return ((IInteger)i_1);
        
        } else {
           if((((IBool)($anum_less_aint(((INumber)x_0),((IInteger)$constants.get(0)/*0*/))))).getValue()){
              return ((IInteger)i_1);
           
           } else {
              return ((IInteger)($aint_add_aint(((IInteger)i_1),((IInteger)$constants.get(1)/*1*/))));
           
           }
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(3114,252,<149,0>,<161,28>) 
    public IReal util_Math_cos$25fdb620b3eb75d8(INumber x_0){ 
        
        
        return ((IReal)((IReal)$Math.cos(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(3369,134,<164,0>,<166,35>) 
    public IInteger util_Math_denominator$2b16b1dd44bfd930(IRational n_0){ 
        
        
        return ((IInteger)((IInteger)$Math.denominator(n_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(3506,149,<169,0>,<177,21>) 
    public IReal util_Math_E$a634c3472007cc51(){ 
        
        
        return ((IReal)((IReal)$Math.E()));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(3659,144,<181,0>,<186,28>) 
    public IReal util_Math_exp$ee5a897e762c5904(INumber x_0){ 
        
        
        return ((IReal)((IReal)$Math.exp(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(3806,351,<189,0>,<209,1>) 
    public IInteger util_Math_floor$58690a2755890a89(INumber x_0){ 
        
        
        IInteger i_1 = ((IInteger)($me.toInt(((INumber)x_0))));
        if((((IBool)($equal(((IInteger)i_1), ((INumber)x_0))))).getValue()){
           return ((IInteger)i_1);
        
        } else {
           if((((IBool)($anum_less_aint(((INumber)x_0),((IInteger)$constants.get(0)/*0*/)).not()))).getValue()){
              return ((IInteger)i_1);
           
           } else {
              return ((IInteger)(((IInteger) ((IInteger)i_1).subtract(((IInteger)$constants.get(1)/*1*/)))));
           
           }
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(4160,244,<212,0>,<224,27>) 
    public IReal util_Math_ln$2d862535e4b2cbea(INumber x_0){ 
        
        
        return ((IReal)((IReal)$Math.ln(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(4407,297,<227,0>,<240,38>) 
    public IReal util_Math_log$a0da2d174a34d686(INumber x_0, INumber base_1){ 
        
        
        return ((IReal)((IReal)$Math.log(x_0, base_1)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(4707,80,<243,0>,<244,40>) 
    public IReal util_Math_log10$92e5941cc325ab04(INumber x_0){ 
        
        
        return ((IReal)($me.log(((INumber)x_0), ((IReal)$constants.get(2)/*10.0*/))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(4790,77,<247,0>,<248,38>) 
    public IReal util_Math_log2$d2ec1e9d591b7b56(INumber x_0){ 
        
        
        return ((IReal)($me.log(((INumber)x_0), ((IReal)$constants.get(3)/*2.0*/))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(4870,340,<251,0>,<266,1>) 
    public INumber util_Math_max$f859d573f509aca0(INumber N_0, INumber M_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T4.match(N_0.getType(), $typeBindings)){
           if($T4.match(M_1.getType(), $typeBindings)){
              /*muExists*/$RET2: 
                  do {
                      if((((IBool)($anum_lessequal_anum(((INumber)N_0),((INumber)M_1)).not()))).getValue()){
                         final INumber $result3 = ((INumber)N_0);
                         if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result3.getType(),$T5)){
                            return ((INumber)($result3));
                         
                         } else {
                            return null;
                         }
                      }
              
                  } while(false);
              final INumber $result3 = ((INumber)M_1);
              if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result3.getType(),$T5)){
                 return ((INumber)($result3));
              
              } else {
                 return null;
              }
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(5213,341,<269,0>,<284,1>) 
    public INumber util_Math_min$503b13941def78aa(INumber N_0, INumber M_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T4.match(N_0.getType(), $typeBindings)){
           if($T4.match(M_1.getType(), $typeBindings)){
              /*muExists*/$RET4: 
                  do {
                      if((((IBool)($anum_less_anum(((INumber)N_0),((INumber)M_1))))).getValue()){
                         final INumber $result5 = ((INumber)N_0);
                         if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result5.getType(),$T5)){
                            return ((INumber)($result5));
                         
                         } else {
                            return null;
                         }
                      }
              
                  } while(false);
              final INumber $result5 = ((INumber)M_1);
              if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result5.getType(),$T5)){
                 return ((INumber)($result5));
              
              } else {
                 return null;
              }
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(5557,130,<287,0>,<289,33>) 
    public IInteger util_Math_numerator$61e94e5a5f76f380(IRational n_0){ 
        
        
        return ((IInteger)((IInteger)$Math.numerator(n_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(5690,377,<292,0>,<305,37>) 
    public IReal util_Math_nroot$9e6edb0a3ad436fd(INumber x_0, IInteger n_1){ 
        
        
        return ((IReal)((IReal)$Math.nroot(x_0, n_1)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(6070,152,<308,0>,<316,22>) 
    public IReal util_Math_PI$5ff2190de6bfeaca(){ 
        
        
        return ((IReal)((IReal)$Math.PI()));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(6225,323,<319,0>,<331,35>) 
    public IReal util_Math_pow$87f4c82cab4a297c(INumber x_0, IInteger y_1){ 
        
        
        return ((IReal)((IReal)$Math.pow(x_0, y_1)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(6550,327,<333,0>,<345,36>) 
    public IReal util_Math_pow$2845813828589954(INumber x_0, IReal y_1){ 
        
        
        return ((IReal)((IReal)$Math.pow(x_0, y_1)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(6880,127,<348,0>,<350,33>) 
    public IInteger util_Math_precision$096d067774cb10ba(INumber x_0){ 
        
        
        return ((IInteger)((IInteger)$Math.precision(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(7012,138,<355,0>,<357,41>) 
    public IReal util_Math_precision$df80f78f0ec7a633(INumber x_0, IInteger p_1){ 
        
        
        return ((IReal)((IReal)$Math.precision(x_0, p_1)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(7153,170,<360,0>,<362,36>) 
    public IInteger util_Math_setPrecision$e34d4ada2ae3c42f(IInteger p_0){ 
        
        
        return ((IInteger)((IInteger)$Math.setPrecision(p_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(7326,119,<365,0>,<367,29>) 
    public IInteger util_Math_scale$57ab720514843992(INumber x_0){ 
        
        
        return ((IInteger)((IInteger)$Math.scale(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(7448,127,<370,0>,<372,33>) 
    public IInteger util_Math_unscaled$44066a1c838c6c08(IReal x_0){ 
        
        
        return ((IInteger)((IInteger)$Math.unscaled(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(7578,155,<375,0>,<377,33>) 
    public IInteger util_Math_remainder$eff4c728c226a26d(IRational n_0){ 
        
        
        return ((IInteger)((IInteger)$Math.remainder(n_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(7736,327,<380,0>,<396,29>) 
    public IInteger util_Math_round$0ce679d3da862392(INumber d_0){ 
        
        
        return ((IInteger)((IInteger)$Math.round(d_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(8064,96,<397,0>,<397,96>) 
    public INumber util_Math_round$890d09d5b0a9251a(INumber r_0, INumber nearest_1){ 
        
        
        HashMap<io.usethesource.vallang.type.Type,io.usethesource.vallang.type.Type> $typeBindings = new HashMap<>();
        if($T4.match(r_0.getType(), $typeBindings)){
           if($T4.match(nearest_1.getType(), $typeBindings)){
              final INumber $result6 = ((INumber)($aint_product_anum(((IInteger)($me.round(((INumber)($anum_divide_anum(((INumber)r_0),((INumber)($anum_product_areal(((INumber)nearest_1),((IReal)$constants.get(4)/*1.0*/)))))))))),((INumber)nearest_1))));
              if($T5.instantiate($typeBindings) != $TF.voidType() && $isSubtypeOf($result6.getType(),$T5)){
                 return ((INumber)($result6));
              
              } else {
                 return null;
              }
           } else {
              return null;
           }
        } else {
           return null;
        }
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(8164,720,<401,0>,<416,61>) 
    public IReal util_Math_fitFloat$e288e1b3587e03aa(IReal r_0){ 
        
        
        return ((IReal)((IReal)$Math.fitFloat(r_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(8887,732,<419,0>,<433,62>) 
    public IReal util_Math_fitDouble$a6a47c152ee8e809(IReal r_0){ 
        
        
        return ((IReal)((IReal)$Math.fitDouble(r_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(9622,251,<436,0>,<445,78>) 
    public IInteger util_Math_percent$eb710c0af01295a1(INumber part_0, INumber whole_1){ 
        
        
        return ((IInteger)($me.round(((INumber)($anum_product_aint(((INumber)($anum_divide_anum(((INumber)part_0),((INumber)($anum_product_areal(((INumber)whole_1),((IReal)$constants.get(4)/*1.0*/))))))),((IInteger)$constants.get(5)/*100*/)))))));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(9876,239,<448,0>,<460,28>) 
    public IReal util_Math_sin$9ed61b08a75c8bc3(INumber x_0){ 
        
        
        return ((IReal)((IReal)$Math.sin(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(10118,290,<463,0>,<475,29>) 
    public IReal util_Math_sqrt$2b673fb474e9231f(INumber x_0){ 
        
        
        return ((IReal)((IReal)$Math.sqrt(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(10411,246,<478,0>,<490,28>) 
    public IReal util_Math_tan$981a5d54892b4828(INumber x_0){ 
        
        
        return ((IReal)((IReal)$Math.tan(x_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(10660,666,<493,0>,<505,29>) 
    public IInteger util_Math_toInt$90db44238d53444e(INumber N_0){ 
        
        
        return ((IInteger)((IInteger)$Math.toInt(N_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(11329,175,<508,0>,<510,54>) 
    public IRational util_Math_toRat$f5f51286b388713b(IInteger numerator_0, IInteger denominator_1){ 
        
        
        return ((IRational)((IRational)$Math.toRat(numerator_0, denominator_1)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(11507,197,<513,0>,<522,31>) 
    public IReal util_Math_toReal$0f28a5d4173e938f(INumber N_0){ 
        
        
        return ((IReal)((IReal)$Math.toReal(N_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(11707,204,<525,0>,<534,32>) 
    public IString util_Math_toString$d077706afbfe26cb(INumber N_0){ 
        
        
        return ((IString)((IString)$Math.toString(N_0)));
    
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(11914,261,<537,0>,<540,99>) 
    private final ExpiringFunctionResultCache<IValue> $memo_util_Math_primes$7f2a2df02bbf181b = new ExpiringFunctionResultCache<IValue>(-1, -1);
    public IList util_Math_primes$7f2a2df02bbf181b(IInteger upTo_0){ 
        
        
        final IValue[] $actuals = new IValue[] {upTo_0};
        IValue $memoVal = $memo_util_Math_primes$7f2a2df02bbf181b.lookup($actuals, Collections.emptyMap());
        if($memoVal != null) return (IList) $memoVal;
        final IListWriter $listwriter7 = (IListWriter)$RVF.listWriter();
        final IInteger $lst2 = ((IInteger)upTo_0);
        final boolean $dir3 = ((IInteger)$constants.get(6)/*2*/).less($lst2).getValue();
        
        $LCOMP8_GEN12085:
        for(IInteger $elem13 = ((IInteger)$constants.get(6)/*2*/); $dir3 ? $aint_less_aint($elem13,$lst2).getValue() 
                                  : $aint_lessequal_aint($elem13,$lst2).not().getValue(); $elem13 = $aint_add_aint($elem13,$dir3 ? ((IInteger)$constants.get(1)/*1*/) : ((IInteger)$constants.get(7)/*-1*/))){
            if(true){
               IInteger p_1 = ((IInteger)($elem13));
               if((((IBool)($aint_less_aint(((IInteger)p_1),((IInteger)$constants.get(8)/*4*/))))).getValue()){
                 $listwriter7.append(p_1);
               
               } else {
                 IBool $done10 = (IBool)(((IBool)$constants.get(9)/*true*/));
                 final IInteger $lst7 = ((IInteger)($aint_add_aint(((IInteger)($me.toInt(((INumber)($me.sqrt(((INumber)p_1))))))),((IInteger)$constants.get(1)/*1*/))));
                 final boolean $dir8 = ((IInteger)$constants.get(6)/*2*/).less($lst7).getValue();
                 
                 $ALL11_GEN12118:
                 for(IInteger $elem12 = ((IInteger)$constants.get(6)/*2*/); $dir8 ? $aint_less_aint($elem12,$lst7).getValue() 
                                           : $aint_lessequal_aint($elem12,$lst7).not().getValue(); $elem12 = $aint_add_aint($elem12,$dir8 ? ((IInteger)$constants.get(1)/*1*/) : ((IInteger)$constants.get(7)/*-1*/))){
                     IInteger i_2 = null;
                     if((((IBool)($equal(((IInteger)p_1),((IInteger)($elem12))).not()))).getValue()){
                       if((((IBool)($equal(((IInteger)(((IInteger)p_1).remainder(((IInteger)($elem12))))),((IInteger)$constants.get(0)/*0*/)).not()))).getValue()){
                         continue $ALL11_GEN12118;
                       
                       } else {
                         continue $ALL11_GEN12118;
                       
                       }
                     
                     } else {
                       continue $ALL11_GEN12118;
                     
                     }
                 }
                 
                 if((((IBool)($done10))).getValue()){
                   $listwriter7.append(p_1);
                 
                 } else {
                   continue $LCOMP8_GEN12085;
                 }
               
               }
            
            } else {
               continue $LCOMP8_GEN12085;
            }}
        
        $memoVal = $listwriter7.done();
        $memo_util_Math_primes$7f2a2df02bbf181b.store($actuals, Collections.emptyMap(), $memoVal);
        return (IList)$memoVal;
    }
    
    // Source: |file:///Users/paulklint/git/rascal/src/org/rascalmpl/library/util/Math.rsc|(12324,87,<544,0>,<544,87>) 
    public IInteger util_Math_arbPrime$e6701dcd9718f457(IInteger upTo_0){ 
        
        
        final IList $subject_val15 = ((IList)($me.primes(((IInteger)upTo_0))));
        IList ps_1 = ((IList)($subject_val15));
        return ((IInteger)($alist_subscript_int(((IList)ps_1),((IInteger)($me.arbInt(((IInteger)(M_List.size(((IList)ps_1))))))).intValue())));
    
    }
    

    public static void main(String[] args) {
      throw new RuntimeException("No function `main` found in Rascal module `util::Math`");
    }
}