package rascal;
import io.usethesource.vallang.*;
import org.rascalmpl.runtime.function.*;

@SuppressWarnings("unused")
public interface $IO_$I  {
    void appendToFile(IValue $0, IValue $1, java.util.Map<java.lang.String,IValue> $kwpActuals);
    void appendToFileEnc(IValue $0, IValue $1, IValue $2);
    IValue arbLoc();
    IValue bprintln(IValue $0);
    IValue canEncode(IValue $0);
    IValue capabilities(IValue $0);
    IValue charsets();
    void copy(IValue $0, IValue $1, java.util.Map<java.lang.String,IValue> $kwpActuals);
    void copyDirectory(IValue $0, IValue $1);
    void copyFile(IValue $0, IValue $1);
    IValue createLink(IValue $0, IValue $1);
    IValue created(IValue $0);
    IValue exists(IValue $0);
    IValue find(IValue $0, IValue $1);
    IValue findResources(IValue $0);
    IValue getResource(IValue $0);
    void iprint(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue iprintExp(IValue $0);
    void iprintToFile(IValue $0, IValue $1, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue iprintToString(IValue $0);
    void iprintln(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue iprintlnExp(IValue $0);
    IValue isDirectory(IValue $0);
    IValue isFile(IValue $0);
    IValue lastModified(IValue $0);
    IValue listEntries(IValue $0);
    IValue md5Hash(IValue $0);
    IValue md5HashFile(IValue $0);
    void mkDirectory(IValue $0);
    void move(IValue $0, IValue $1, java.util.Map<java.lang.String,IValue> $kwpActuals);
    void print(IValue $0);
    IValue printExp(IValue $0);
    IValue printExp(IValue $0, IValue $1);
    void println();
    void println(IValue $0);
    IValue printlnExp(IValue $0);
    IValue printlnExp(IValue $0, IValue $1);
    IValue readBase32(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue readBase64(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue readFile(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue readFileBytes(IValue $0);
    IValue readFileEnc(IValue $0, IValue $1);
    IValue readFileLines(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue readFileLinesEnc(IValue $0, IValue $1);
    void registerLocations(IValue $0, IValue $1, IValue $2);
    void remove(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    IValue resolveLocation(IValue $0);
    void rprint(IValue $0);
    void rprintln(IValue $0);
    void setLastModified(IValue $0, IValue $1);
    IValue toBase64(IValue $0, java.util.Map<java.lang.String,IValue> $kwpActuals);
    void touch(IValue $0);
    void unregisterLocations(IValue $0, IValue $1);
    void unwatch(IValue $0, IValue $1, IValue $2);
    void uudecode(IValue $0, IValue $1);
    IValue uuencode(IValue $0);
    void watch(IValue $0, IValue $1, IValue $2);
    void writeBase32(IValue $0, IValue $1);
    void writeBase64(IValue $0, IValue $1);
    void writeFile(IValue $0, IValue $1, java.util.Map<java.lang.String,IValue> $kwpActuals);
    void writeFileBytes(IValue $0, IValue $1);
    void writeFileEnc(IValue $0, IValue $1, IValue $2);
    void writeFileLines(IValue $0, IValue $1, java.util.Map<java.lang.String,IValue> $kwpActuals);
}