package rascal.lang.rascal.syntax;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
import java.util.regex.Matcher;
import io.usethesource.vallang.*;
import io.usethesource.vallang.type.*;
import org.rascalmpl.runtime.*;
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.runtime.function.*;
import org.rascalmpl.runtime.traverse.*;
import org.rascalmpl.runtime.utils.*;
import org.rascalmpl.exceptions.RuntimeExceptionFactory;
import org.rascalmpl.exceptions.Throw; 
import org.rascalmpl.runtime.RascalExecutionContext;
import org.rascalmpl.interpreter.control_exceptions.Filtered;
import org.rascalmpl.types.NonTerminalType;
import org.rascalmpl.types.RascalTypeFactory;
import org.rascalmpl.util.ExpiringFunctionResultCache;
import org.rascalmpl.values.RascalValueFactory;
import org.rascalmpl.values.ValueFactoryFactory;
import org.rascalmpl.values.parsetrees.ITree;
import org.rascalmpl.values.parsetrees.TreeAdapter;



@SuppressWarnings({"unused","unchecked","deprecation"})
public class $Rascal 
    extends
        org.rascalmpl.runtime.$RascalModule
    implements 
    	rascal.lang.rascal.syntax.$Rascal_$I {

    private final $Rascal_$I $me;
    private final IList $constants;
    
    

    
    
    public final io.usethesource.vallang.type.Type $T36;	/*astr()*/
    public final io.usethesource.vallang.type.Type ADT_Concrete;	/*aadt("Concrete",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Concrete;	/*aadt("Concrete",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Concrete_typed_str_Sym_str_str_str;	/*acons(aadt("Concrete",[],lexicalSyntax()),[astr(),aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),astr(),astr(),astr()],[],alabel="typed")*/
    public final io.usethesource.vallang.type.Type ADT_Expression;	/*aadt("Expression",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Expression;	/*aadt("Expression",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Expression_qualifiedName_QualifiedName;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="qualifiedName")],[],alabel="qualifiedName")*/
    public final io.usethesource.vallang.type.Type Expression_greaterThanOrEq_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="greaterThanOrEq")*/
    public final io.usethesource.vallang.type.Type ADT_Statement;	/*aadt("Statement",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Statement;	/*aadt("Statement",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_LAYOUTLIST;	/*aadt("LAYOUTLIST",[],layoutSyntax())*/
    public final io.usethesource.vallang.type.Type $T15;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStatsElse")*/
    public final io.usethesource.vallang.type.Type ADT_UnicodeEscape;	/*aadt("UnicodeEscape",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_UnicodeEscape;	/*aadt("UnicodeEscape",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type UnicodeEscape_utf32_;	/*acons(aadt("UnicodeEscape",[],lexicalSyntax()),[],[],alabel="utf32")*/
    public final io.usethesource.vallang.type.Type ADT_BooleanLiteral;	/*aadt("BooleanLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_BooleanLiteral;	/*aadt("BooleanLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Case;	/*aadt("Case",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Case;	/*aadt("Case",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Pattern;	/*aadt("Pattern",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Pattern;	/*aadt("Pattern",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_ProtocolPart;	/*aadt("ProtocolPart",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ProtocolPart;	/*aadt("ProtocolPart",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ProtocolPart_nonInterpolated_ProtocolChars;	/*acons(aadt("ProtocolPart",[],contextFreeSyntax()),[aadt("ProtocolChars",[],lexicalSyntax(),alabel="protocolChars")],[],alabel="nonInterpolated")*/
    public final io.usethesource.vallang.type.Type ADT_MidStringChars;	/*aadt("MidStringChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_MidStringChars;	/*aadt("MidStringChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Strategy;	/*aadt("Strategy",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Strategy;	/*aadt("Strategy",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_ShellCommand;	/*aadt("ShellCommand",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ShellCommand;	/*aadt("ShellCommand",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ShellCommand_setOption_QualifiedName_Expression;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="setOption")*/
    public final io.usethesource.vallang.type.Type ADT_Tree;	/*aadt("Tree",[],dataSyntax())*/
    public final io.usethesource.vallang.type.Type $T1;	/*aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)*/
    public final io.usethesource.vallang.type.Type ADT_KeywordArguments_1;	/*aadt("KeywordArguments",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_KeywordArguments_1;	/*aadt("KeywordArguments",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Type;	/*aadt("Type",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Type;	/*aadt("Type",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Type_bracket_Type;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type")],[],alabel="bracket")*/
    public final io.usethesource.vallang.type.Type ADT_StringLiteral;	/*aadt("StringLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_StringLiteral;	/*aadt("StringLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type StringLiteral_interpolated_PreStringChars_Expression_StringTail;	/*acons(aadt("StringLiteral",[],contextFreeSyntax()),[aadt("PreStringChars",[],lexicalSyntax(),alabel="pre"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("StringTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="interpolated")*/
    public final io.usethesource.vallang.type.Type ADT_Renamings;	/*aadt("Renamings",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Renamings;	/*aadt("Renamings",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Renaming;	/*aadt("Renaming",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Renaming;	/*aadt("Renaming",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T3;	/*alit(",")*/
    public final io.usethesource.vallang.type.Type $T47;	/*\iter-seps(aadt("Renaming",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="renamings")*/
    public final io.usethesource.vallang.type.Type Renamings_default_iter_seps_Renaming;	/*acons(aadt("Renamings",[],contextFreeSyntax()),[\iter-seps(aadt("Renaming",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="renamings")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_Mapping_Expression;	/*aadt("Mapping",[aadt("Expression",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Mapping_Expression;	/*aadt("Mapping",[aadt("Expression",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_KeywordFormal;	/*aadt("KeywordFormal",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_KeywordFormal;	/*aadt("KeywordFormal",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type KeywordFormal_default_Type_Name_Expression;	/*acons(aadt("KeywordFormal",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Statement_expression_Expression;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="expression")*/
    public final io.usethesource.vallang.type.Type ADT_FunctionModifier;	/*aadt("FunctionModifier",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_FunctionModifier;	/*aadt("FunctionModifier",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type FunctionModifier_default_;	/*acons(aadt("FunctionModifier",[],contextFreeSyntax()),[],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_TimePartNoTZ;	/*aadt("TimePartNoTZ",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_TimePartNoTZ;	/*aadt("TimePartNoTZ",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Assignable;	/*aadt("Assignable",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Assignable;	/*aadt("Assignable",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T46;	/*\iter-seps(aadt("Assignable",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements")*/
    public final io.usethesource.vallang.type.Type Assignable_tuple_iter_seps_Assignable;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[\iter-seps(aadt("Assignable",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements")],[],alabel="tuple")*/
    public final io.usethesource.vallang.type.Type ADT_Sym;	/*aadt("Sym",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Sym;	/*aadt("Sym",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Sym_iterStarSep_Sym_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("Sym",[],contextFreeSyntax(),alabel="sep")],[],alabel="iterStarSep")*/
    public final io.usethesource.vallang.type.Type ADT_Target;	/*aadt("Target",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Target;	/*aadt("Target",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_IntegerLiteral;	/*aadt("IntegerLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_IntegerLiteral;	/*aadt("IntegerLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Catch;	/*aadt("Catch",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Catch;	/*aadt("Catch",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T33;	/*\iter-seps(aadt("Catch",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="handlers")*/
    public final io.usethesource.vallang.type.Type ADT_OptionalExpression;	/*aadt("OptionalExpression",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_OptionalExpression;	/*aadt("OptionalExpression",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type OptionalExpression_expression_Expression;	/*acons(aadt("OptionalExpression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="expression")*/
    public final io.usethesource.vallang.type.Type ADT_KeywordArguments_Expression;	/*aadt("KeywordArguments",[aadt("Expression",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_KeywordArguments_Expression;	/*aadt("KeywordArguments",[aadt("Expression",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Expression_composition_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="composition")*/
    public final io.usethesource.vallang.type.Type ADT_Comprehension;	/*aadt("Comprehension",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Comprehension;	/*aadt("Comprehension",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T4;	/*\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="results")*/
    public final io.usethesource.vallang.type.Type $T5;	/*\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators")*/
    public final io.usethesource.vallang.type.Type Comprehension_set_iter_seps_Expression_iter_seps_Expression;	/*acons(aadt("Comprehension",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="results"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators")],[],alabel="set")*/
    public final io.usethesource.vallang.type.Type ADT_Mapping_1;	/*aadt("Mapping",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Mapping_1;	/*aadt("Mapping",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Kind;	/*aadt("Kind",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Kind;	/*aadt("Kind",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Kind_all_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="all")*/
    public final io.usethesource.vallang.type.Type Sym_iterStar_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="iterStar")*/
    public final io.usethesource.vallang.type.Type $T24;	/*\iter-star-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")*/
    public final io.usethesource.vallang.type.Type $T7;	/*\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions")*/
    public final io.usethesource.vallang.type.Type Statement_ifThenElse_Label_iter_seps_Expression_Statement_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions"),aadt("Statement",[],contextFreeSyntax(),alabel="thenStatement"),aadt("Statement",[],contextFreeSyntax(),alabel="elseStatement")],[],alabel="ifThenElse")*/
    public final io.usethesource.vallang.type.Type Expression_join_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="join")*/
    public final io.usethesource.vallang.type.Type ADT_ImportedModule;	/*aadt("ImportedModule",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ImportedModule;	/*aadt("ImportedModule",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Class;	/*aadt("Class",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Class;	/*aadt("Class",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Class_intersection_Class_Class;	/*acons(aadt("Class",[],contextFreeSyntax()),[aadt("Class",[],contextFreeSyntax(),alabel="lhs"),aadt("Class",[],contextFreeSyntax(),alabel="rhs")],[],alabel="intersection")*/
    public final io.usethesource.vallang.type.Type ADT_FunctionType;	/*aadt("FunctionType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_FunctionType;	/*aadt("FunctionType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Range;	/*aadt("Range",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Range;	/*aadt("Range",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_PostProtocolChars;	/*aadt("PostProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PostProtocolChars;	/*aadt("PostProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type $T28;	/*\iter-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements")*/
    public final io.usethesource.vallang.type.Type ADT_Output;	/*aadt("Output",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Output;	/*aadt("Output",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Output_resultOutput_;	/*acons(aadt("Output",[],lexicalSyntax()),[],[],alabel="resultOutput")*/
    public final io.usethesource.vallang.type.Type $T9;	/*alit("|")*/
    public final io.usethesource.vallang.type.Type $T10;	/*\iter-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit("|"),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="alternatives")*/
    public final io.usethesource.vallang.type.Type ADT_BasicType;	/*aadt("BasicType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_BasicType;	/*aadt("BasicType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type BasicType_tuple_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="tuple")*/
    public final io.usethesource.vallang.type.Type Expression_sliceStep_Expression_OptionalExpression_Expression_OptionalExpression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optFirst"),aadt("Expression",[],contextFreeSyntax(),alabel="second"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optLast")],[],alabel="sliceStep")*/
    public final io.usethesource.vallang.type.Type Expression_has_Expression_Name;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="has")*/
    public final io.usethesource.vallang.type.Type BasicType_dateTime_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="dateTime")*/
    public final io.usethesource.vallang.type.Type ShellCommand_edit_QualifiedName;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name")],[],alabel="edit")*/
    public final io.usethesource.vallang.type.Type ADT_Variable;	/*aadt("Variable",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Variable;	/*aadt("Variable",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Variable_initialized_Name_Expression;	/*acons(aadt("Variable",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Expression",[],contextFreeSyntax(),alabel="initial")],[],alabel="initialized")*/
    public final io.usethesource.vallang.type.Type ADT_Signature;	/*aadt("Signature",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Signature;	/*aadt("Signature",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Signature_noThrows_FunctionModifiers_Type_Name_Parameters;	/*acons(aadt("Signature",[],contextFreeSyntax()),[aadt("FunctionModifiers",[],contextFreeSyntax(),alabel="modifiers"),aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Parameters",[],contextFreeSyntax(),alabel="parameters")],[],alabel="noThrows")*/
    public final io.usethesource.vallang.type.Type ADT_LAYOUT;	/*aadt("LAYOUT",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_LAYOUT;	/*aadt("LAYOUT",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Expression_concrete_Concrete;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Concrete",[],lexicalSyntax(),alabel="concrete")],[],alabel="concrete")*/
    public final io.usethesource.vallang.type.Type $T18;	/*\iter-seps(aadt("Type",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="types")*/
    public final io.usethesource.vallang.type.Type ADT_Literal;	/*aadt("Literal",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Literal;	/*aadt("Literal",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Literal_string_StringLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("StringLiteral",[],contextFreeSyntax(),alabel="stringLiteral")],[],alabel="string")*/
    public final io.usethesource.vallang.type.Type UnicodeEscape_ascii_;	/*acons(aadt("UnicodeEscape",[],lexicalSyntax()),[],[],alabel="ascii")*/
    public final io.usethesource.vallang.type.Type ADT_Tag;	/*aadt("Tag",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Tag;	/*aadt("Tag",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Tag_expression_Name_Expression;	/*acons(aadt("Tag",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="expression")*/
    public final io.usethesource.vallang.type.Type Kind_module_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="module")*/
    public final io.usethesource.vallang.type.Type ImportedModule_renamings_QualifiedName_Renamings;	/*acons(aadt("ImportedModule",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),aadt("Renamings",[],contextFreeSyntax(),alabel="renamings")],[],alabel="renamings")*/
    public final io.usethesource.vallang.type.Type ADT_LocalVariableDeclaration;	/*aadt("LocalVariableDeclaration",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_LocalVariableDeclaration;	/*aadt("LocalVariableDeclaration",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type KeywordArguments_1_none_;	/*acons(aadt("KeywordArguments",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax()),[],[],alabel="none")*/
    public final io.usethesource.vallang.type.Type ADT_Replacement;	/*aadt("Replacement",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Replacement;	/*aadt("Replacement",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_PatternWithAction;	/*aadt("PatternWithAction",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PatternWithAction;	/*aadt("PatternWithAction",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type PatternWithAction_replacing_Pattern_Replacement;	/*acons(aadt("PatternWithAction",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern"),aadt("Replacement",[],contextFreeSyntax(),alabel="replacement")],[],alabel="replacing")*/
    public final io.usethesource.vallang.type.Type ADT_Assignment;	/*aadt("Assignment",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Assignment;	/*aadt("Assignment",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Assignment_division_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="division")*/
    public final io.usethesource.vallang.type.Type Sym_optional_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="optional")*/
    public final io.usethesource.vallang.type.Type Class_bracket_Class;	/*acons(aadt("Class",[],contextFreeSyntax()),[aadt("Class",[],contextFreeSyntax(),alabel="charClass")],[],alabel="bracket")*/
    public final io.usethesource.vallang.type.Type ADT_Prod;	/*aadt("Prod",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Prod;	/*aadt("Prod",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_ProdModifier;	/*aadt("ProdModifier",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ProdModifier;	/*aadt("ProdModifier",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T48;	/*\iter-star-seps(aadt("ProdModifier",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="modifiers")*/
    public final io.usethesource.vallang.type.Type $T49;	/*\iter-star-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="syms")*/
    public final io.usethesource.vallang.type.Type Prod_labeled_iter_star_seps_ProdModifier_Name_iter_star_seps_Sym;	/*acons(aadt("Prod",[],contextFreeSyntax()),[\iter-star-seps(aadt("ProdModifier",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="modifiers"),aadt("Name",[],lexicalSyntax(),alabel="name"),\iter-star-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="syms")],[],alabel="labeled")*/
    public final io.usethesource.vallang.type.Type BasicType_bag_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="bag")*/
    public final io.usethesource.vallang.type.Type ADT_Visibility;	/*aadt("Visibility",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Visibility;	/*aadt("Visibility",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_ProtocolChars;	/*aadt("ProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ProtocolChars;	/*aadt("ProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Pattern_multiVariable_QualifiedName;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="qualifiedName")],[],alabel="multiVariable")*/
    public final io.usethesource.vallang.type.Type Literal_boolean_BooleanLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("BooleanLiteral",[],lexicalSyntax(),alabel="booleanLiteral")],[],alabel="boolean")*/
    public final io.usethesource.vallang.type.Type ADT_ConcretePart;	/*aadt("ConcretePart",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ConcretePart;	/*aadt("ConcretePart",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ConcretePart_gt_;	/*acons(aadt("ConcretePart",[],lexicalSyntax()),[],[],alabel="gt")*/
    public final io.usethesource.vallang.type.Type ADT_Label;	/*aadt("Label",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Label;	/*aadt("Label",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Output_stdoutOutput_;	/*acons(aadt("Output",[],lexicalSyntax()),[],[],alabel="stdoutOutput")*/
    public final io.usethesource.vallang.type.Type Expression_transitiveReflexiveClosure_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="argument")],[],alabel="transitiveReflexiveClosure")*/
    public final io.usethesource.vallang.type.Type ADT_SyntaxDefinition;	/*aadt("SyntaxDefinition",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_SyntaxDefinition;	/*aadt("SyntaxDefinition",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type SyntaxDefinition_layout_Visibility_Sym_Prod;	/*acons(aadt("SyntaxDefinition",[],contextFreeSyntax()),[aadt("Visibility",[],contextFreeSyntax(),alabel="vis"),aadt("Sym",[],contextFreeSyntax(),alabel="defined"),aadt("Prod",[],contextFreeSyntax(),alabel="production")],[],alabel="layout")*/
    public final io.usethesource.vallang.type.Type Expression_modulo_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="modulo")*/
    public final io.usethesource.vallang.type.Type ADT_TypeArg;	/*aadt("TypeArg",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_TypeArg;	/*aadt("TypeArg",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T54;	/*\iter-seps(aadt("TypeArg",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")*/
    public final io.usethesource.vallang.type.Type Range_character_Char;	/*acons(aadt("Range",[],contextFreeSyntax()),[aadt("Char",[],lexicalSyntax(),alabel="character")],[],alabel="character")*/
    public final io.usethesource.vallang.type.Type SyntaxDefinition_keyword_Sym_Prod;	/*acons(aadt("SyntaxDefinition",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="defined"),aadt("Prod",[],contextFreeSyntax(),alabel="production")],[],alabel="keyword")*/
    public final io.usethesource.vallang.type.Type ADT_RegExpModifier;	/*aadt("RegExpModifier",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_RegExpModifier;	/*aadt("RegExpModifier",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Statement_filter_;	/*acons(aadt("Statement",[],contextFreeSyntax()),[],[],alabel="filter")*/
    public final io.usethesource.vallang.type.Type Expression_reifiedType_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="symbol"),aadt("Expression",[],contextFreeSyntax(),alabel="definitions")],[],alabel="reifiedType")*/
    public final io.usethesource.vallang.type.Type StringLiteral_nonInterpolated_StringConstant;	/*acons(aadt("StringLiteral",[],contextFreeSyntax()),[aadt("StringConstant",[],lexicalSyntax(),alabel="constant")],[],alabel="nonInterpolated")*/
    public final io.usethesource.vallang.type.Type Visibility_private_;	/*acons(aadt("Visibility",[],contextFreeSyntax()),[],[],alabel="private")*/
    public final io.usethesource.vallang.type.Type Statement_doWhile_Label_Statement_Expression;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),aadt("Statement",[],contextFreeSyntax(),alabel="body"),aadt("Expression",[],contextFreeSyntax(),alabel="condition")],[],alabel="doWhile")*/
    public final io.usethesource.vallang.type.Type ADT_ProtocolTail;	/*aadt("ProtocolTail",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ProtocolTail;	/*aadt("ProtocolTail",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ProtocolTail_post_PostProtocolChars;	/*acons(aadt("ProtocolTail",[],contextFreeSyntax()),[aadt("PostProtocolChars",[],lexicalSyntax(),alabel="post")],[],alabel="post")*/
    public final io.usethesource.vallang.type.Type ADT_StringTail;	/*aadt("StringTail",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_StringTail;	/*aadt("StringTail",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type StringTail_midTemplate_MidStringChars_StringTemplate_StringTail;	/*acons(aadt("StringTail",[],contextFreeSyntax()),[aadt("MidStringChars",[],lexicalSyntax(),alabel="mid"),aadt("StringTemplate",[],contextFreeSyntax(),alabel="template"),aadt("StringTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="midTemplate")*/
    public final io.usethesource.vallang.type.Type BasicType_real_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="real")*/
    public final io.usethesource.vallang.type.Type ADT_EvalCommand;	/*aadt("EvalCommand",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_EvalCommand;	/*aadt("EvalCommand",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type EvalCommand_declaration_Declaration;	/*acons(aadt("EvalCommand",[],contextFreeSyntax()),[aadt("Declaration",[],contextFreeSyntax(),alabel="declaration")],[],alabel="declaration")*/
    public final io.usethesource.vallang.type.Type ShellCommand_help_;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[],[],alabel="help")*/
    public final io.usethesource.vallang.type.Type ADT_Assoc;	/*aadt("Assoc",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Assoc;	/*aadt("Assoc",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T12;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStatsThen")*/
    public final io.usethesource.vallang.type.Type Pattern_negative_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="argument")],[],alabel="negative")*/
    public final io.usethesource.vallang.type.Type ADT_DecimalIntegerLiteral;	/*aadt("DecimalIntegerLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_DecimalIntegerLiteral;	/*aadt("DecimalIntegerLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Statement_return_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="return")*/
    public final io.usethesource.vallang.type.Type Comprehension_map_Expression_Expression_iter_seps_Expression;	/*acons(aadt("Comprehension",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="from"),aadt("Expression",[],contextFreeSyntax(),alabel="to"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators")],[],alabel="map")*/
    public final io.usethesource.vallang.type.Type ADT_DateTimeLiteral;	/*aadt("DateTimeLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_DateTimeLiteral;	/*aadt("DateTimeLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_FunctionDeclaration;	/*aadt("FunctionDeclaration",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_FunctionDeclaration;	/*aadt("FunctionDeclaration",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type FunctionDeclaration_conditional_Tags_Visibility_Signature_Expression_iter_seps_Expression;	/*acons(aadt("FunctionDeclaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("Signature",[],contextFreeSyntax(),alabel="signature"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions")],[],alabel="conditional")*/
    public final io.usethesource.vallang.type.Type $T58;	/*\iter-seps(aadt("Assignable",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")*/
    public final io.usethesource.vallang.type.Type BasicType_list_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="list")*/
    public final io.usethesource.vallang.type.Type Strategy_bottomUpBreak_;	/*acons(aadt("Strategy",[],contextFreeSyntax()),[],[],alabel="bottomUpBreak")*/
    public final io.usethesource.vallang.type.Type ADT_Toplevel;	/*aadt("Toplevel",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Toplevel;	/*aadt("Toplevel",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T32;	/*\iter-star-seps(aadt("Toplevel",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="toplevels")*/
    public final io.usethesource.vallang.type.Type $T53;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements")*/
    public final io.usethesource.vallang.type.Type Strategy_innermost_;	/*acons(aadt("Strategy",[],contextFreeSyntax()),[],[],alabel="innermost")*/
    public final io.usethesource.vallang.type.Type $T44;	/*\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements")*/
    public final io.usethesource.vallang.type.Type Expression_tuple_iter_seps_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements")],[],alabel="tuple")*/
    public final io.usethesource.vallang.type.Type ADT_RationalLiteral;	/*aadt("RationalLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_RationalLiteral;	/*aadt("RationalLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Literal_rational_RationalLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("RationalLiteral",[],lexicalSyntax(),alabel="rationalLiteral")],[],alabel="rational")*/
    public final io.usethesource.vallang.type.Type Strategy_topDown_;	/*acons(aadt("Strategy",[],contextFreeSyntax()),[],[],alabel="topDown")*/
    public final io.usethesource.vallang.type.Type Expression_equals_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="equals")*/
    public final io.usethesource.vallang.type.Type Expression_nonEquals_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="nonEquals")*/
    public final io.usethesource.vallang.type.Type $T16;	/*start(aadt("EvalCommand",[],contextFreeSyntax()))*/
    public final io.usethesource.vallang.type.Type $T17;	/*\iter-seps(start(aadt("EvalCommand",[],contextFreeSyntax())),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="commands")*/
    public final io.usethesource.vallang.type.Type ProdModifier_associativity_Assoc;	/*acons(aadt("ProdModifier",[],contextFreeSyntax()),[aadt("Assoc",[],contextFreeSyntax(),alabel="associativity")],[],alabel="associativity")*/
    public final io.usethesource.vallang.type.Type ADT_DatePart;	/*aadt("DatePart",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_DatePart;	/*aadt("DatePart",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Declarator;	/*aadt("Declarator",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Declarator;	/*aadt("Declarator",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T40;	/*\iter-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="parameters")*/
    public final io.usethesource.vallang.type.Type $T39;	/*\iter-star-seps(aadt("TypeArg",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")*/
    public final io.usethesource.vallang.type.Type FunctionType_typeArguments_Type_iter_star_seps_TypeArg;	/*acons(aadt("FunctionType",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),\iter-star-seps(aadt("TypeArg",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")],[],alabel="typeArguments")*/
    public final io.usethesource.vallang.type.Type ADT_PathTail;	/*aadt("PathTail",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PathTail;	/*aadt("PathTail",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type PathTail_mid_MidPathChars_Expression_PathTail;	/*acons(aadt("PathTail",[],contextFreeSyntax()),[aadt("MidPathChars",[],lexicalSyntax(),alabel="mid"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("PathTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="mid")*/
    public final io.usethesource.vallang.type.Type ADT_Field;	/*aadt("Field",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Field;	/*aadt("Field",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T45;	/*\iter-seps(aadt("Field",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="fields")*/
    public final io.usethesource.vallang.type.Type Expression_fieldProject_Expression_iter_seps_Field;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),\iter-seps(aadt("Field",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="fields")],[],alabel="fieldProject")*/
    public final io.usethesource.vallang.type.Type ADT_StringMiddle;	/*aadt("StringMiddle",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_StringMiddle;	/*aadt("StringMiddle",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type StringMiddle_template_MidStringChars_StringTemplate_StringMiddle;	/*acons(aadt("StringMiddle",[],contextFreeSyntax()),[aadt("MidStringChars",[],lexicalSyntax(),alabel="mid"),aadt("StringTemplate",[],contextFreeSyntax(),alabel="template"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="tail")],[],alabel="template")*/
    public final io.usethesource.vallang.type.Type IntegerLiteral_decimalIntegerLiteral_DecimalIntegerLiteral;	/*acons(aadt("IntegerLiteral",[],contextFreeSyntax()),[aadt("DecimalIntegerLiteral",[],lexicalSyntax(),alabel="decimal")],[],alabel="decimalIntegerLiteral")*/
    public final io.usethesource.vallang.type.Type ADT_RegExpLiteral;	/*aadt("RegExpLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_RegExpLiteral;	/*aadt("RegExpLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ProtocolPart_interpolated_PreProtocolChars_Expression_ProtocolTail;	/*acons(aadt("ProtocolPart",[],contextFreeSyntax()),[aadt("PreProtocolChars",[],lexicalSyntax(),alabel="pre"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("ProtocolTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="interpolated")*/
    public final io.usethesource.vallang.type.Type Expression_equivalence_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="equivalence")*/
    public final io.usethesource.vallang.type.Type StringTail_post_PostStringChars;	/*acons(aadt("StringTail",[],contextFreeSyntax()),[aadt("PostStringChars",[],lexicalSyntax(),alabel="post")],[],alabel="post")*/
    public final io.usethesource.vallang.type.Type $T43;	/*\iter-star-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements0")*/
    public final io.usethesource.vallang.type.Type Expression_set_iter_star_seps_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[\iter-star-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements0")],[],alabel="set")*/
    public final io.usethesource.vallang.type.Type OptionalExpression_noExpression_;	/*acons(aadt("OptionalExpression",[],contextFreeSyntax()),[],[],alabel="noExpression")*/
    public final io.usethesource.vallang.type.Type Literal_location_LocationLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("LocationLiteral",[],contextFreeSyntax(),alabel="locationLiteral")],[],alabel="location")*/
    public final io.usethesource.vallang.type.Type Assignable_ifDefinedOrDefault_Assignable_Expression;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="receiver"),aadt("Expression",[],contextFreeSyntax(),alabel="defaultExpression")],[],alabel="ifDefinedOrDefault")*/
    public final io.usethesource.vallang.type.Type Label_empty_;	/*acons(aadt("Label",[],contextFreeSyntax()),[],[],alabel="empty")*/
    public final io.usethesource.vallang.type.Type ADT_Import;	/*aadt("Import",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Import;	/*aadt("Import",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Import_default_ImportedModule;	/*acons(aadt("Import",[],contextFreeSyntax()),[aadt("ImportedModule",[],contextFreeSyntax(),alabel="module")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Sym_column_Sym_IntegerLiteral;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("IntegerLiteral",[],contextFreeSyntax(),alabel="column")],[],alabel="column")*/
    public final io.usethesource.vallang.type.Type ADT_ModuleParameters;	/*aadt("ModuleParameters",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ModuleParameters;	/*aadt("ModuleParameters",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T0;	/*aparameter("T",aadt("Tree",[],dataSyntax()),closed=false)*/
    public final io.usethesource.vallang.type.Type Expression_reducer_Expression_Expression_iter_seps_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="init"),aadt("Expression",[],contextFreeSyntax(),alabel="result"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators")],[],alabel="reducer")*/
    public final io.usethesource.vallang.type.Type BasicType_void_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="void")*/
    public final io.usethesource.vallang.type.Type Expression_stepRange_Expression_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="first"),aadt("Expression",[],contextFreeSyntax(),alabel="second"),aadt("Expression",[],contextFreeSyntax(),alabel="last")],[],alabel="stepRange")*/
    public final io.usethesource.vallang.type.Type $T31;	/*\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="subscripts")*/
    public final io.usethesource.vallang.type.Type Kind_function_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="function")*/
    public final io.usethesource.vallang.type.Type Pattern_qualifiedName_QualifiedName;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="qualifiedName")],[],alabel="qualifiedName")*/
    public final io.usethesource.vallang.type.Type BasicType_type_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="type")*/
    public final io.usethesource.vallang.type.Type $T19;	/*\iter-seps(aadt("Case",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="cases")*/
    public final io.usethesource.vallang.type.Type Pattern_literal_Literal;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Literal",[],contextFreeSyntax(),alabel="literal")],[],alabel="literal")*/
    public final io.usethesource.vallang.type.Type Literal_regExp_RegExpLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("RegExpLiteral",[],lexicalSyntax(),alabel="regExpLiteral")],[],alabel="regExp")*/
    public final io.usethesource.vallang.type.Type ADT_KeywordArgument_1;	/*aadt("KeywordArgument",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_KeywordArgument_1;	/*aadt("KeywordArgument",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_StructuredType;	/*aadt("StructuredType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_StructuredType;	/*aadt("StructuredType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type StructuredType_default_BasicType_iter_seps_TypeArg;	/*acons(aadt("StructuredType",[],contextFreeSyntax()),[aadt("BasicType",[],contextFreeSyntax(),alabel="basicType"),\iter-seps(aadt("TypeArg",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_Command;	/*aadt("Command",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Command;	/*aadt("Command",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Command_declaration_Declaration;	/*acons(aadt("Command",[],contextFreeSyntax()),[aadt("Declaration",[],contextFreeSyntax(),alabel="declaration")],[],alabel="declaration")*/
    public final io.usethesource.vallang.type.Type ADT_QualifiedName;	/*aadt("QualifiedName",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_QualifiedName;	/*aadt("QualifiedName",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T55;	/*\iter-seps(aadt("QualifiedName",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="variables")*/
    public final io.usethesource.vallang.type.Type Statement_solve_iter_seps_QualifiedName_Bound_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[\iter-seps(aadt("QualifiedName",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="variables"),aadt("Bound",[],contextFreeSyntax(),alabel="bound"),aadt("Statement",[],contextFreeSyntax(),alabel="body")],[],alabel="solve")*/
    public final io.usethesource.vallang.type.Type Pattern_typedVariableBecomes_Type_Name_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Pattern",[],contextFreeSyntax(),alabel="pattern")],[],alabel="typedVariableBecomes")*/
    public final io.usethesource.vallang.type.Type Assoc_left_;	/*acons(aadt("Assoc",[],contextFreeSyntax()),[],[],alabel="left")*/
    public final io.usethesource.vallang.type.Type ADT_Name;	/*aadt("Name",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Name;	/*aadt("Name",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type $T34;	/*alit("::")*/
    public final io.usethesource.vallang.type.Type $T35;	/*\iter-seps(aadt("Name",[],lexicalSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit("::"),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="names")*/
    public final io.usethesource.vallang.type.Type ADT_UserType;	/*aadt("UserType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_UserType;	/*aadt("UserType",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type UserType_name_QualifiedName;	/*acons(aadt("UserType",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name")],[],alabel="name")*/
    public final io.usethesource.vallang.type.Type ADT_ModuleActuals;	/*aadt("ModuleActuals",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ModuleActuals;	/*aadt("ModuleActuals",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Assignment_ifDefined_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="ifDefined")*/
    public final io.usethesource.vallang.type.Type ImportedModule_actualsRenaming_QualifiedName_ModuleActuals_Renamings;	/*acons(aadt("ImportedModule",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),aadt("ModuleActuals",[],contextFreeSyntax(),alabel="actuals"),aadt("Renamings",[],contextFreeSyntax(),alabel="renamings")],[],alabel="actualsRenaming")*/
    public final io.usethesource.vallang.type.Type ShellCommand_unimport_QualifiedName;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name")],[],alabel="unimport")*/
    public final io.usethesource.vallang.type.Type $T14;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStatsElse")*/
    public final io.usethesource.vallang.type.Type ADT_PathPart;	/*aadt("PathPart",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PathPart;	/*aadt("PathPart",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type PathPart_nonInterpolated_PathChars;	/*acons(aadt("PathPart",[],contextFreeSyntax()),[aadt("PathChars",[],lexicalSyntax(),alabel="pathChars")],[],alabel="nonInterpolated")*/
    public final io.usethesource.vallang.type.Type ADT_Tags;	/*aadt("Tags",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Tags;	/*aadt("Tags",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type ShellCommand_test_;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[],[],alabel="test")*/
    public final io.usethesource.vallang.type.Type BasicType_int_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="int")*/
    public final io.usethesource.vallang.type.Type BasicType_listRelation_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="listRelation")*/
    public final io.usethesource.vallang.type.Type Expression_negation_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="argument")],[],alabel="negation")*/
    public final io.usethesource.vallang.type.Type $T29;	/*\iter-star-seps(aadt("Import",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="imports")*/
    public final io.usethesource.vallang.type.Type ADT_URLChars;	/*aadt("URLChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_URLChars;	/*aadt("URLChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type DateTimeLiteral_dateAndTimeLiteral_DateAndTime;	/*acons(aadt("DateTimeLiteral",[],contextFreeSyntax()),[aadt("DateAndTime",[],lexicalSyntax(),alabel="dateAndTime")],[],alabel="dateAndTimeLiteral")*/
    public final io.usethesource.vallang.type.Type $T42;	/*\iter-star-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements0")*/
    public final io.usethesource.vallang.type.Type Pattern_list_iter_star_seps_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[\iter-star-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements0")],[],alabel="list")*/
    public final io.usethesource.vallang.type.Type Visibility_default_;	/*acons(aadt("Visibility",[],contextFreeSyntax()),[],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_Parameters;	/*aadt("Parameters",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Parameters;	/*aadt("Parameters",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Parameters_varArgs_Formals_KeywordFormals;	/*acons(aadt("Parameters",[],contextFreeSyntax()),[aadt("Formals",[],contextFreeSyntax(),alabel="formals"),aadt("KeywordFormals",[],contextFreeSyntax(),alabel="keywordFormals")],[],alabel="varArgs")*/
    public final io.usethesource.vallang.type.Type ADT_FunctionBody;	/*aadt("FunctionBody",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_FunctionBody;	/*aadt("FunctionBody",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Assignable_constructor_Name_iter_seps_Assignable;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name"),\iter-seps(aadt("Assignable",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")],[],alabel="constructor")*/
    public final io.usethesource.vallang.type.Type Expression_ifDefinedOtherwise_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="ifDefinedOtherwise")*/
    public final io.usethesource.vallang.type.Type Assignable_bracket_Assignable;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="arg")],[],alabel="bracket")*/
    public final io.usethesource.vallang.type.Type LocalVariableDeclaration_default_Declarator;	/*acons(aadt("LocalVariableDeclaration",[],contextFreeSyntax()),[aadt("Declarator",[],contextFreeSyntax(),alabel="declarator")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_Declaration;	/*aadt("Declaration",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Declaration;	/*aadt("Declaration",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Statement_visit_Label_Visit;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),aadt("Visit",[],contextFreeSyntax(),alabel="visit")],[],alabel="visit")*/
    public final io.usethesource.vallang.type.Type StringMiddle_interpolated_MidStringChars_Expression_StringMiddle;	/*acons(aadt("StringMiddle",[],contextFreeSyntax()),[aadt("MidStringChars",[],lexicalSyntax(),alabel="mid"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="tail")],[],alabel="interpolated")*/
    public final io.usethesource.vallang.type.Type Expression_list_iter_star_seps_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[\iter-star-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements0")],[],alabel="list")*/
    public final io.usethesource.vallang.type.Type Expression_asType_Type_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Expression",[],contextFreeSyntax(),alabel="argument")],[],alabel="asType")*/
    public final io.usethesource.vallang.type.Type ADT_LocationLiteral;	/*aadt("LocationLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_LocationLiteral;	/*aadt("LocationLiteral",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T2;	/*\iter-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements")*/
    public final io.usethesource.vallang.type.Type Expression_closure_Type_Parameters_iter_seps_Statement;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Parameters",[],contextFreeSyntax(),alabel="parameters"),\iter-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements")],[],alabel="closure")*/
    public final io.usethesource.vallang.type.Type Statement_append_DataTarget_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("DataTarget",[],contextFreeSyntax(),alabel="dataTarget"),aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="append")*/
    public final io.usethesource.vallang.type.Type PathTail_post_PostPathChars;	/*acons(aadt("PathTail",[],contextFreeSyntax()),[aadt("PostPathChars",[],lexicalSyntax(),alabel="post")],[],alabel="post")*/
    public final io.usethesource.vallang.type.Type DateTimeLiteral_timeLiteral_JustTime;	/*acons(aadt("DateTimeLiteral",[],contextFreeSyntax()),[aadt("JustTime",[],lexicalSyntax(),alabel="time")],[],alabel="timeLiteral")*/
    public final io.usethesource.vallang.type.Type Pattern_splice_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="argument")],[],alabel="splice")*/
    public final io.usethesource.vallang.type.Type $T56;	/*\iter-star-seps(aadt("Range",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="ranges")*/
    public final io.usethesource.vallang.type.Type Class_simpleCharclass_iter_star_seps_Range;	/*acons(aadt("Class",[],contextFreeSyntax()),[\iter-star-seps(aadt("Range",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="ranges")],[],alabel="simpleCharclass")*/
    public final io.usethesource.vallang.type.Type ADT_DataTypeSelector;	/*aadt("DataTypeSelector",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_DataTypeSelector;	/*aadt("DataTypeSelector",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type DataTypeSelector_selector_QualifiedName_Name;	/*acons(aadt("DataTypeSelector",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="sort"),aadt("Name",[],lexicalSyntax(),alabel="production")],[],alabel="selector")*/
    public final io.usethesource.vallang.type.Type ADT_OptionalComma;	/*aadt("OptionalComma",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_OptionalComma;	/*aadt("OptionalComma",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type OptionalComma_default_str;	/*acons(aadt("OptionalComma",[],lexicalSyntax()),[astr()],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ConcretePart_newline_;	/*acons(aadt("ConcretePart",[],lexicalSyntax()),[],[],alabel="newline")*/
    public final io.usethesource.vallang.type.Type IntegerLiteral_octalIntegerLiteral_OctalIntegerLiteral;	/*acons(aadt("IntegerLiteral",[],contextFreeSyntax()),[aadt("OctalIntegerLiteral",[],lexicalSyntax(),alabel="octal")],[],alabel="octalIntegerLiteral")*/
    public final io.usethesource.vallang.type.Type ADT_DataTarget;	/*aadt("DataTarget",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_DataTarget;	/*aadt("DataTarget",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Prod_unlabeled_iter_star_seps_ProdModifier_iter_star_seps_Sym;	/*acons(aadt("Prod",[],contextFreeSyntax()),[\iter-star-seps(aadt("ProdModifier",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="modifiers"),\iter-star-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="syms")],[],alabel="unlabeled")*/
    public final io.usethesource.vallang.type.Type ADT_HexIntegerLiteral;	/*aadt("HexIntegerLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_HexIntegerLiteral;	/*aadt("HexIntegerLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_TimeZonePart;	/*aadt("TimeZonePart",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_TimeZonePart;	/*aadt("TimeZonePart",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type $T57;	/*\iter-seps(aadt("Type",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="exceptions")*/
    public final io.usethesource.vallang.type.Type Signature_withThrows_FunctionModifiers_Type_Name_Parameters_iter_seps_Type;	/*acons(aadt("Signature",[],contextFreeSyntax()),[aadt("FunctionModifiers",[],contextFreeSyntax(),alabel="modifiers"),aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Parameters",[],contextFreeSyntax(),alabel="parameters"),\iter-seps(aadt("Type",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="exceptions")],[],alabel="withThrows")*/
    public final io.usethesource.vallang.type.Type Assignable_annotation_Assignable_Name;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="receiver"),aadt("Name",[],lexicalSyntax(),alabel="annotation")],[],alabel="annotation")*/
    public final io.usethesource.vallang.type.Type $T6;	/*\iter-seps(aadt("QualifiedName",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="names")*/
    public final io.usethesource.vallang.type.Type ADT_KeywordFormals;	/*aadt("KeywordFormals",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_KeywordFormals;	/*aadt("KeywordFormals",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Sym_characterClass_Class;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Class",[],contextFreeSyntax(),alabel="charClass")],[],alabel="characterClass")*/
    public final io.usethesource.vallang.type.Type Expression_intersection_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="intersection")*/
    public final io.usethesource.vallang.type.Type $T50;	/*\iter-star-seps(aadt("Tag",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="tags")*/
    public final io.usethesource.vallang.type.Type Tags_default_iter_star_seps_Tag;	/*acons(aadt("Tags",[],contextFreeSyntax()),[\iter-star-seps(aadt("Tag",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="tags")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_Variant;	/*aadt("Variant",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Variant;	/*aadt("Variant",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T51;	/*\iter-seps(aadt("Variant",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit("|"),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="variants")*/
    public final io.usethesource.vallang.type.Type Declaration_data_Tags_Visibility_UserType_CommonKeywordParameters_iter_seps_Variant;	/*acons(aadt("Declaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("UserType",[],contextFreeSyntax(),alabel="user"),aadt("CommonKeywordParameters",[],contextFreeSyntax(),alabel="commonKeywordParameters"),\iter-seps(aadt("Variant",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit("|"),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="variants")],[],alabel="data")*/
    public final io.usethesource.vallang.type.Type Class_complement_Class;	/*acons(aadt("Class",[],contextFreeSyntax()),[aadt("Class",[],contextFreeSyntax(),alabel="charClass")],[],alabel="complement")*/
    public final io.usethesource.vallang.type.Type ShellCommand_history_;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[],[],alabel="history")*/
    public final io.usethesource.vallang.type.Type BasicType_num_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="num")*/
    public final io.usethesource.vallang.type.Type Declaration_alias_Tags_Visibility_UserType_Type;	/*acons(aadt("Declaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("UserType",[],contextFreeSyntax(),alabel="user"),aadt("Type",[],contextFreeSyntax(),alabel="base")],[],alabel="alias")*/
    public final io.usethesource.vallang.type.Type BasicType_string_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="string")*/
    public final io.usethesource.vallang.type.Type Literal_dateTime_DateTimeLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("DateTimeLiteral",[],contextFreeSyntax(),alabel="dateTimeLiteral")],[],alabel="dateTime")*/
    public final io.usethesource.vallang.type.Type Pattern_reifiedType_Pattern_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="symbol"),aadt("Pattern",[],contextFreeSyntax(),alabel="definitions")],[],alabel="reifiedType")*/
    public final io.usethesource.vallang.type.Type Expression_lessThanOrEq_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="lessThanOrEq")*/
    public final io.usethesource.vallang.type.Type $T23;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStats")*/
    public final io.usethesource.vallang.type.Type Statement_for_Label_iter_seps_Expression_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators"),aadt("Statement",[],contextFreeSyntax(),alabel="body")],[],alabel="for")*/
    public final io.usethesource.vallang.type.Type Target_labeled_Name;	/*acons(aadt("Target",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="labeled")*/
    public final io.usethesource.vallang.type.Type BasicType_value_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="value")*/
    public final io.usethesource.vallang.type.Type Expression_setAnnotation_Expression_Name_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Expression",[],contextFreeSyntax(),alabel="value")],[],alabel="setAnnotation")*/
    public final io.usethesource.vallang.type.Type ADT_Start;	/*aadt("Start",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Start;	/*aadt("Start",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Start_present_;	/*acons(aadt("Start",[],contextFreeSyntax()),[],[],alabel="present")*/
    public final io.usethesource.vallang.type.Type ShellCommand_listModules_;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[],[],alabel="listModules")*/
    public final io.usethesource.vallang.type.Type Expression_getAnnotation_Expression_Name;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="getAnnotation")*/
    public final io.usethesource.vallang.type.Type ADT_TagString;	/*aadt("TagString",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_TagString;	/*aadt("TagString",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Kind_data_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="data")*/
    public final io.usethesource.vallang.type.Type ADT_Mapping_Pattern;	/*aadt("Mapping",[aadt("Pattern",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Mapping_Pattern;	/*aadt("Mapping",[aadt("Pattern",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Prod_associativityGroup_Assoc_Prod;	/*acons(aadt("Prod",[],contextFreeSyntax()),[aadt("Assoc",[],contextFreeSyntax(),alabel="associativity"),aadt("Prod",[],contextFreeSyntax(),alabel="group")],[],alabel="associativityGroup")*/
    public final io.usethesource.vallang.type.Type Statement_variableDeclaration_LocalVariableDeclaration;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("LocalVariableDeclaration",[],contextFreeSyntax(),alabel="declaration")],[],alabel="variableDeclaration")*/
    public final io.usethesource.vallang.type.Type Expression_comprehension_Comprehension;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Comprehension",[],contextFreeSyntax(),alabel="comprehension")],[],alabel="comprehension")*/
    public final io.usethesource.vallang.type.Type ADT_NonterminalLabel;	/*aadt("NonterminalLabel",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_NonterminalLabel;	/*aadt("NonterminalLabel",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Expression_splice_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="argument")],[],alabel="splice")*/
    public final io.usethesource.vallang.type.Type Sym_empty_;	/*acons(aadt("Sym",[],contextFreeSyntax()),[],[],alabel="empty")*/
    public final io.usethesource.vallang.type.Type $T30;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements0")*/
    public final io.usethesource.vallang.type.Type Replacement_unconditional_Expression;	/*acons(aadt("Replacement",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="replacementExpression")],[],alabel="unconditional")*/
    public final io.usethesource.vallang.type.Type Declaration_dataAbstract_Tags_Visibility_UserType_CommonKeywordParameters;	/*acons(aadt("Declaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("UserType",[],contextFreeSyntax(),alabel="user"),aadt("CommonKeywordParameters",[],contextFreeSyntax(),alabel="commonKeywordParameters")],[],alabel="dataAbstract")*/
    public final io.usethesource.vallang.type.Type Sym_iterSep_Sym_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("Sym",[],contextFreeSyntax(),alabel="sep")],[],alabel="iterSep")*/
    public final io.usethesource.vallang.type.Type ConcretePart_hole_ConcreteHole;	/*acons(aadt("ConcretePart",[],lexicalSyntax()),[aadt("ConcreteHole",[],contextFreeSyntax(),alabel="hole")],[],alabel="hole")*/
    public final io.usethesource.vallang.type.Type ADT_Nonterminal;	/*aadt("Nonterminal",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Nonterminal;	/*aadt("Nonterminal",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type BasicType_map_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="map")*/
    public final io.usethesource.vallang.type.Type ADT_KeywordArguments_Pattern;	/*aadt("KeywordArguments",[aadt("Pattern",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_KeywordArguments_Pattern;	/*aadt("KeywordArguments",[aadt("Pattern",[],contextFreeSyntax())],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Sym_labeled_Sym_NonterminalLabel;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("NonterminalLabel",[],lexicalSyntax(),alabel="label")],[],alabel="labeled")*/
    public final io.usethesource.vallang.type.Type ADT_RegExp;	/*aadt("RegExp",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_RegExp;	/*aadt("RegExp",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Expression_slice_Expression_OptionalExpression_OptionalExpression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optFirst"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optLast")],[],alabel="slice")*/
    public final io.usethesource.vallang.type.Type Sym_start_Nonterminal;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Nonterminal",[],lexicalSyntax(),alabel="nonterminal")],[],alabel="start")*/
    public final io.usethesource.vallang.type.Type Assignable_sliceStep_Assignable_OptionalExpression_Expression_OptionalExpression;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="receiver"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optFirst"),aadt("Expression",[],contextFreeSyntax(),alabel="second"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optLast")],[],alabel="sliceStep")*/
    public final io.usethesource.vallang.type.Type TypeArg_named_Type_Name;	/*acons(aadt("TypeArg",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="named")*/
    public final io.usethesource.vallang.type.Type ADT_PostStringChars;	/*aadt("PostStringChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PostStringChars;	/*aadt("PostStringChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_PreStringChars;	/*aadt("PreStringChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PreStringChars;	/*aadt("PreStringChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Header;	/*aadt("Header",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Header;	/*aadt("Header",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Header_default_Tags_QualifiedName_iter_star_seps_Import;	/*acons(aadt("Header",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),\iter-star-seps(aadt("Import",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="imports")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Expression_ifThenElse_Expression_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="condition"),aadt("Expression",[],contextFreeSyntax(),alabel="thenExp"),aadt("Expression",[],contextFreeSyntax(),alabel="elseExp")],[],alabel="ifThenElse")*/
    public final io.usethesource.vallang.type.Type Case_default_Statement;	/*acons(aadt("Case",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Statement_tryFinally_Statement_iter_seps_Catch_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="body"),\iter-seps(aadt("Catch",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="handlers"),aadt("Statement",[],contextFreeSyntax(),alabel="finallyBody")],[],alabel="tryFinally")*/
    public final io.usethesource.vallang.type.Type $T27;	/*\iter-seps(aadt("Variable",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="variables")*/
    public final io.usethesource.vallang.type.Type Declaration_variable_Tags_Visibility_Type_iter_seps_Variable;	/*acons(aadt("Declaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("Type",[],contextFreeSyntax(),alabel="type"),\iter-seps(aadt("Variable",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="variables")],[],alabel="variable")*/
    public final io.usethesource.vallang.type.Type Target_empty_;	/*acons(aadt("Target",[],contextFreeSyntax()),[],[],alabel="empty")*/
    public final io.usethesource.vallang.type.Type ADT_Bound;	/*aadt("Bound",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Bound;	/*aadt("Bound",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type FunctionDeclaration_expression_Tags_Visibility_Signature_Expression;	/*acons(aadt("FunctionDeclaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("Signature",[],contextFreeSyntax(),alabel="signature"),aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="expression")*/
    public final io.usethesource.vallang.type.Type Sym_caseInsensitiveLiteral_CaseInsensitiveStringConstant;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("CaseInsensitiveStringConstant",[],lexicalSyntax(),alabel="cistring")],[],alabel="caseInsensitiveLiteral")*/
    public final io.usethesource.vallang.type.Type Pattern_anti_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern")],[],alabel="anti")*/
    public final io.usethesource.vallang.type.Type ADT_TypeVar;	/*aadt("TypeVar",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_TypeVar;	/*aadt("TypeVar",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T52;	/*\iter-seps(aadt("TypeVar",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="parameters")*/
    public final io.usethesource.vallang.type.Type ModuleParameters_default_iter_seps_TypeVar;	/*acons(aadt("ModuleParameters",[],contextFreeSyntax()),[\iter-seps(aadt("TypeVar",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="parameters")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Prod_all_Prod_Prod;	/*acons(aadt("Prod",[],contextFreeSyntax()),[aadt("Prod",[],contextFreeSyntax(),alabel="lhs"),aadt("Prod",[],contextFreeSyntax(),alabel="rhs")],[],alabel="all")*/
    public final io.usethesource.vallang.type.Type BasicType_relation_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="relation")*/
    public final io.usethesource.vallang.type.Type Class_difference_Class_Class;	/*acons(aadt("Class",[],contextFreeSyntax()),[aadt("Class",[],contextFreeSyntax(),alabel="lhs"),aadt("Class",[],contextFreeSyntax(),alabel="rhs")],[],alabel="difference")*/
    public final io.usethesource.vallang.type.Type FunctionBody_default_iter_star_seps_Statement;	/*acons(aadt("FunctionBody",[],contextFreeSyntax()),[\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Case_patternWithAction_PatternWithAction;	/*acons(aadt("Case",[],contextFreeSyntax()),[aadt("PatternWithAction",[],contextFreeSyntax(),alabel="patternWithAction")],[],alabel="patternWithAction")*/
    public final io.usethesource.vallang.type.Type Assignment_default_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Renaming_default_Name_Name;	/*acons(aadt("Renaming",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="from"),aadt("Name",[],lexicalSyntax(),alabel="to")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Expression_subtraction_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="subtraction")*/
    public final io.usethesource.vallang.type.Type ADT_StringTemplate;	/*aadt("StringTemplate",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_StringTemplate;	/*aadt("StringTemplate",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T22;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStats")*/
    public final io.usethesource.vallang.type.Type StringTemplate_doWhile_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement_Expression;	/*acons(aadt("StringTemplate",[],contextFreeSyntax()),[\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStats"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="body"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStats"),aadt("Expression",[],contextFreeSyntax(),alabel="condition")],[],alabel="doWhile")*/
    public final io.usethesource.vallang.type.Type Bound_default_Expression;	/*acons(aadt("Bound",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type $T26;	/*\iter-seps(aadt("KeywordFormal",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="keywordFormalList")*/
    public final io.usethesource.vallang.type.Type Prod_reference_Name;	/*acons(aadt("Prod",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="referenced")],[],alabel="reference")*/
    public final io.usethesource.vallang.type.Type Expression_reifyType_Type;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type")],[],alabel="reifyType")*/
    public final io.usethesource.vallang.type.Type Assignable_fieldAccess_Assignable_Name;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="receiver"),aadt("Name",[],lexicalSyntax(),alabel="field")],[],alabel="fieldAccess")*/
    public final io.usethesource.vallang.type.Type BasicType_node_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="node")*/
    public final io.usethesource.vallang.type.Type Expression_remainder_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="remainder")*/
    public final io.usethesource.vallang.type.Type Statement_while_Label_iter_seps_Expression_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions"),aadt("Statement",[],contextFreeSyntax(),alabel="body")],[],alabel="while")*/
    public final io.usethesource.vallang.type.Type Expression_in_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="in")*/
    public final io.usethesource.vallang.type.Type ADT_Commands;	/*aadt("Commands",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Commands;	/*aadt("Commands",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Commands_commandlist_iter_seps_start_EvalCommand;	/*acons(aadt("Commands",[],contextFreeSyntax()),[\iter-seps(start(aadt("EvalCommand",[],contextFreeSyntax())),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="commands")],[],alabel="commandlist")*/
    public final io.usethesource.vallang.type.Type BasicType_set_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="set")*/
    public final io.usethesource.vallang.type.Type Import_extend_ImportedModule;	/*acons(aadt("Import",[],contextFreeSyntax()),[aadt("ImportedModule",[],contextFreeSyntax(),alabel="module")],[],alabel="extend")*/
    public final io.usethesource.vallang.type.Type ModuleActuals_default_iter_seps_Type;	/*acons(aadt("ModuleActuals",[],contextFreeSyntax()),[\iter-seps(aadt("Type",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="types")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Start_absent_;	/*acons(aadt("Start",[],contextFreeSyntax()),[],[],alabel="absent")*/
    public final io.usethesource.vallang.type.Type Statement_insert_DataTarget_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("DataTarget",[],contextFreeSyntax(),alabel="dataTarget"),aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="insert")*/
    public final io.usethesource.vallang.type.Type Statement_functionDeclaration_FunctionDeclaration;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("FunctionDeclaration",[],contextFreeSyntax(),alabel="functionDeclaration")],[],alabel="functionDeclaration")*/
    public final io.usethesource.vallang.type.Type IntegerLiteral_hexIntegerLiteral_HexIntegerLiteral;	/*acons(aadt("IntegerLiteral",[],contextFreeSyntax()),[aadt("HexIntegerLiteral",[],lexicalSyntax(),alabel="hex")],[],alabel="hexIntegerLiteral")*/
    public final io.usethesource.vallang.type.Type ProdModifier_bracket_;	/*acons(aadt("ProdModifier",[],contextFreeSyntax()),[],[],alabel="bracket")*/
    public final io.usethesource.vallang.type.Type Expression_bracket_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="bracket")*/
    public final io.usethesource.vallang.type.Type ProdModifier_tag_Tag;	/*acons(aadt("ProdModifier",[],contextFreeSyntax()),[aadt("Tag",[],contextFreeSyntax(),alabel="tag")],[],alabel="tag")*/
    public final io.usethesource.vallang.type.Type Assoc_right_;	/*acons(aadt("Assoc",[],contextFreeSyntax()),[],[],alabel="right")*/
    public final io.usethesource.vallang.type.Type Expression_any_iter_seps_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators")],[],alabel="any")*/
    public final io.usethesource.vallang.type.Type ConcretePart_bs_;	/*acons(aadt("ConcretePart",[],lexicalSyntax()),[],[],alabel="bs")*/
    public final io.usethesource.vallang.type.Type Expression_literal_Literal;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Literal",[],contextFreeSyntax(),alabel="literal")],[],alabel="literal")*/
    public final io.usethesource.vallang.type.Type Expression_lessThan_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="lessThan")*/
    public final io.usethesource.vallang.type.Type Statement_switch_Label_Expression_iter_seps_Case;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),\iter-seps(aadt("Case",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="cases")],[],alabel="switch")*/
    public final io.usethesource.vallang.type.Type Bound_empty_;	/*acons(aadt("Bound",[],contextFreeSyntax()),[],[],alabel="empty")*/
    public final io.usethesource.vallang.type.Type $T13;	/*\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStatsThen")*/
    public final io.usethesource.vallang.type.Type StringTemplate_ifThenElse_iter_seps_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement;	/*acons(aadt("StringTemplate",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStatsThen"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="thenString"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStatsThen"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStatsElse"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="elseString"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStatsElse")],[],alabel="ifThenElse")*/
    public final io.usethesource.vallang.type.Type ShellCommand_undeclare_QualifiedName;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name")],[],alabel="undeclare")*/
    public final io.usethesource.vallang.type.Type Catch_default_Statement;	/*acons(aadt("Catch",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="body")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Import_syntax_SyntaxDefinition;	/*acons(aadt("Import",[],contextFreeSyntax()),[aadt("SyntaxDefinition",[],contextFreeSyntax(),alabel="syntax")],[],alabel="syntax")*/
    public final io.usethesource.vallang.type.Type PatternWithAction_arbitrary_Pattern_Statement;	/*acons(aadt("PatternWithAction",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern"),aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="arbitrary")*/
    public final io.usethesource.vallang.type.Type Pattern_callOrTree_Pattern_iter_star_seps_Pattern_KeywordArguments_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="expression"),\iter-star-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments"),aadt("KeywordArguments",[aadt("Pattern",[],contextFreeSyntax())],contextFreeSyntax(),alabel="keywordArguments")],[],alabel="callOrTree")*/
    public final io.usethesource.vallang.type.Type Expression_match_Pattern_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern"),aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="match")*/
    public final io.usethesource.vallang.type.Type Statement_assert_Expression;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="assert")*/
    public final io.usethesource.vallang.type.Type Expression_transitiveClosure_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="argument")],[],alabel="transitiveClosure")*/
    public final io.usethesource.vallang.type.Type ADT_Formals;	/*aadt("Formals",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Formals;	/*aadt("Formals",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T21;	/*\iter-star-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="formals")*/
    public final io.usethesource.vallang.type.Type Formals_default_iter_star_seps_Pattern;	/*acons(aadt("Formals",[],contextFreeSyntax()),[\iter-star-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="formals")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_PrePathChars;	/*aadt("PrePathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PrePathChars;	/*aadt("PrePathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type UnicodeEscape_utf16_;	/*acons(aadt("UnicodeEscape",[],lexicalSyntax()),[],[],alabel="utf16")*/
    public final io.usethesource.vallang.type.Type $T25;	/*\iter-star-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments")*/
    public final io.usethesource.vallang.type.Type Expression_callOrTree_Expression_iter_star_seps_Expression_KeywordArguments_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),\iter-star-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments"),aadt("KeywordArguments",[aadt("Expression",[],contextFreeSyntax())],contextFreeSyntax(),alabel="keywordArguments")],[],alabel="callOrTree")*/
    public final io.usethesource.vallang.type.Type Literal_integer_IntegerLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("IntegerLiteral",[],contextFreeSyntax(),alabel="integerLiteral")],[],alabel="integer")*/
    public final io.usethesource.vallang.type.Type Statement_fail_Target;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Target",[],contextFreeSyntax(),alabel="target")],[],alabel="fail")*/
    public final io.usethesource.vallang.type.Type StringTemplate_while_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement;	/*acons(aadt("StringTemplate",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="condition"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStats"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="body"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStats")],[],alabel="while")*/
    public final io.usethesource.vallang.type.Type Expression_or_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="or")*/
    public final io.usethesource.vallang.type.Type Expression_is_Expression_Name;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="is")*/
    public final io.usethesource.vallang.type.Type Strategy_topDownBreak_;	/*acons(aadt("Strategy",[],contextFreeSyntax()),[],[],alabel="topDownBreak")*/
    public final io.usethesource.vallang.type.Type ADT_Visit;	/*aadt("Visit",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Visit;	/*aadt("Visit",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Visit_givenStrategy_Strategy_Expression_iter_seps_Case;	/*acons(aadt("Visit",[],contextFreeSyntax()),[aadt("Strategy",[],contextFreeSyntax(),alabel="strategy"),aadt("Expression",[],contextFreeSyntax(),alabel="subject"),\iter-seps(aadt("Case",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="cases")],[],alabel="givenStrategy")*/
    public final io.usethesource.vallang.type.Type ConcretePart_bq_;	/*acons(aadt("ConcretePart",[],lexicalSyntax()),[],[],alabel="bq")*/
    public final io.usethesource.vallang.type.Type Expression_fieldUpdate_Expression_Name_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("Name",[],lexicalSyntax(),alabel="key"),aadt("Expression",[],contextFreeSyntax(),alabel="replacement")],[],alabel="fieldUpdate")*/
    public final io.usethesource.vallang.type.Type Output_stderrOutput_;	/*acons(aadt("Output",[],lexicalSyntax()),[],[],alabel="stderrOutput")*/
    public final io.usethesource.vallang.type.Type ImportedModule_default_QualifiedName;	/*acons(aadt("ImportedModule",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Type_variable_TypeVar;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("TypeVar",[],contextFreeSyntax(),alabel="typeVar")],[],alabel="variable")*/
    public final io.usethesource.vallang.type.Type ADT_Body;	/*aadt("Body",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Body;	/*aadt("Body",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type $T20;	/*\iter-star-seps(aadt("Mapping",[aadt("Pattern",[],contextFreeSyntax())],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="mappings")*/
    public final io.usethesource.vallang.type.Type Pattern_map_iter_star_seps_Mapping_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[\iter-star-seps(aadt("Mapping",[aadt("Pattern",[],contextFreeSyntax())],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="mappings")],[],alabel="map")*/
    public final io.usethesource.vallang.type.Type FunctionDeclaration_default_Tags_Visibility_Signature_FunctionBody;	/*acons(aadt("FunctionDeclaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("Signature",[],contextFreeSyntax(),alabel="signature"),aadt("FunctionBody",[],contextFreeSyntax(),alabel="body")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_JustDate;	/*aadt("JustDate",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_JustDate;	/*aadt("JustDate",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Type_user_UserType;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("UserType",[],contextFreeSyntax(),alabel="user")],[],alabel="user")*/
    public final io.usethesource.vallang.type.Type Kind_variable_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="variable")*/
    public final io.usethesource.vallang.type.Type ADT_StringConstant;	/*aadt("StringConstant",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_StringConstant;	/*aadt("StringConstant",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_FunctionModifiers;	/*aadt("FunctionModifiers",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_FunctionModifiers;	/*aadt("FunctionModifiers",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Expression_it_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax())],[],alabel="it")*/
    public final io.usethesource.vallang.type.Type ADT_Module;	/*aadt("Module",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Module;	/*aadt("Module",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type Module_default_Header_Body;	/*acons(aadt("Module",[],contextFreeSyntax()),[aadt("Header",[],contextFreeSyntax(),alabel="header"),aadt("Body",[],contextFreeSyntax(),alabel="body")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Statement_assertWithMessage_Expression_Expression;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("Expression",[],contextFreeSyntax(),alabel="message")],[],alabel="assertWithMessage")*/
    public final io.usethesource.vallang.type.Type Sym_endOfLine_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="endOfLine")*/
    public final io.usethesource.vallang.type.Type $T8;	/*\iter-star-seps(aadt("Mapping",[aadt("Expression",[],contextFreeSyntax())],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="mappings")*/
    public final io.usethesource.vallang.type.Type Command_expression_Expression;	/*acons(aadt("Command",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="expression")*/
    public final io.usethesource.vallang.type.Type ADT_MidPathChars;	/*aadt("MidPathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_MidPathChars;	/*aadt("MidPathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Label_default_Name;	/*acons(aadt("Label",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Statement_ifThen_Label_iter_seps_Expression_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions"),aadt("Statement",[],contextFreeSyntax(),alabel="thenStatement")],[],alabel="ifThen")*/
    public final io.usethesource.vallang.type.Type Mapping_1_default_;	/*acons(aadt("Mapping",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax()),[],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Statement_globalDirective_Type_iter_seps_QualifiedName;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),\iter-seps(aadt("QualifiedName",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="names")],[],alabel="globalDirective")*/
    public final io.usethesource.vallang.type.Type LocationLiteral_default_ProtocolPart_PathPart;	/*acons(aadt("LocationLiteral",[],contextFreeSyntax()),[aadt("ProtocolPart",[],contextFreeSyntax(),alabel="protocolPart"),aadt("PathPart",[],contextFreeSyntax(),alabel="pathPart")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ConcretePart_lt_;	/*acons(aadt("ConcretePart",[],lexicalSyntax()),[],[],alabel="lt")*/
    public final io.usethesource.vallang.type.Type Field_index_IntegerLiteral;	/*acons(aadt("Field",[],contextFreeSyntax()),[aadt("IntegerLiteral",[],contextFreeSyntax(),alabel="fieldIndex")],[],alabel="index")*/
    public final io.usethesource.vallang.type.Type Expression_implication_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="implication")*/
    public final io.usethesource.vallang.type.Type Tag_default_Name_TagString;	/*acons(aadt("Tag",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("TagString",[],lexicalSyntax(),alabel="contents")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Expression_nonEmptyBlock_iter_seps_Statement;	/*acons(aadt("Expression",[],contextFreeSyntax()),[\iter-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements")],[],alabel="nonEmptyBlock")*/
    public final io.usethesource.vallang.type.Type ADT_ConcreteHole;	/*aadt("ConcreteHole",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_ConcreteHole;	/*aadt("ConcreteHole",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type FunctionModifier_test_;	/*acons(aadt("FunctionModifier",[],contextFreeSyntax()),[],[],alabel="test")*/
    public final io.usethesource.vallang.type.Type Expression_greaterThan_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="greaterThan")*/
    public final io.usethesource.vallang.type.Type Class_union_Class_Class;	/*acons(aadt("Class",[],contextFreeSyntax()),[aadt("Class",[],contextFreeSyntax(),alabel="lhs"),aadt("Class",[],contextFreeSyntax(),alabel="rhs")],[],alabel="union")*/
    public final io.usethesource.vallang.type.Type BasicType_rational_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="rational")*/
    public final io.usethesource.vallang.type.Type LocalVariableDeclaration_dynamic_Declarator;	/*acons(aadt("LocalVariableDeclaration",[],contextFreeSyntax()),[aadt("Declarator",[],contextFreeSyntax(),alabel="declarator")],[],alabel="dynamic")*/
    public final io.usethesource.vallang.type.Type Strategy_outermost_;	/*acons(aadt("Strategy",[],contextFreeSyntax()),[],[],alabel="outermost")*/
    public final io.usethesource.vallang.type.Type Type_basic_BasicType;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("BasicType",[],contextFreeSyntax(),alabel="basic")],[],alabel="basic")*/
    public final io.usethesource.vallang.type.Type Statement_nonEmptyBlock_Label_iter_seps_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),\iter-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements")],[],alabel="nonEmptyBlock")*/
    public final io.usethesource.vallang.type.Type Parameters_default_Formals_KeywordFormals;	/*acons(aadt("Parameters",[],contextFreeSyntax()),[aadt("Formals",[],contextFreeSyntax(),alabel="formals"),aadt("KeywordFormals",[],contextFreeSyntax(),alabel="keywordFormals")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Sym_alternative_Sym_iter_seps_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="first"),\iter-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit("|"),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="alternatives")],[],alabel="alternative")*/
    public final io.usethesource.vallang.type.Type Sym_follow_Sym_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("Sym",[],contextFreeSyntax(),alabel="match")],[],alabel="follow")*/
    public final io.usethesource.vallang.type.Type Expression_product_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="product")*/
    public final io.usethesource.vallang.type.Type ShellCommand_quit_;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[],[],alabel="quit")*/
    public final io.usethesource.vallang.type.Type Expression_addition_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="addition")*/
    public final io.usethesource.vallang.type.Type ImportedModule_actuals_QualifiedName_ModuleActuals;	/*acons(aadt("ImportedModule",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),aadt("ModuleActuals",[],contextFreeSyntax(),alabel="actuals")],[],alabel="actuals")*/
    public final io.usethesource.vallang.type.Type TypeArg_default_Type;	/*acons(aadt("TypeArg",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_DateAndTime;	/*aadt("DateAndTime",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_DateAndTime;	/*aadt("DateAndTime",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_CaseInsensitiveStringConstant;	/*aadt("CaseInsensitiveStringConstant",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_CaseInsensitiveStringConstant;	/*aadt("CaseInsensitiveStringConstant",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_Char;	/*aadt("Char",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Char;	/*aadt("Char",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Expression_all_iter_seps_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators")],[],alabel="all")*/
    public final io.usethesource.vallang.type.Type Pattern_asType_Type_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Pattern",[],contextFreeSyntax(),alabel="argument")],[],alabel="asType")*/
    public final io.usethesource.vallang.type.Type Visibility_public_;	/*acons(aadt("Visibility",[],contextFreeSyntax()),[],[],alabel="public")*/
    public final io.usethesource.vallang.type.Type ADT_Backslash;	/*aadt("Backslash",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Backslash;	/*aadt("Backslash",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ConcreteHole_one_Sym_Name;	/*acons(aadt("ConcreteHole",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="one")*/
    public final io.usethesource.vallang.type.Type Tag_empty_Name;	/*acons(aadt("Tag",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="empty")*/
    public final io.usethesource.vallang.type.Type $T11;	/*\iter-seps(aadt("KeywordArgument",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=false)],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="keywordArgumentList")*/
    public final io.usethesource.vallang.type.Type KeywordArguments_1_default_OptionalComma_iter_seps_KeywordArgument_1;	/*acons(aadt("KeywordArguments",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax()),[aadt("OptionalComma",[],lexicalSyntax(),alabel="optionalComma"),\iter-seps(aadt("KeywordArgument",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=false)],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="keywordArgumentList")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type ADT_CommonKeywordParameters;	/*aadt("CommonKeywordParameters",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type NT_CommonKeywordParameters;	/*aadt("CommonKeywordParameters",[],contextFreeSyntax())*/
    public final io.usethesource.vallang.type.Type CommonKeywordParameters_absent_;	/*acons(aadt("CommonKeywordParameters",[],contextFreeSyntax()),[],[],alabel="absent")*/
    public final io.usethesource.vallang.type.Type Range_fromTo_Char_Char;	/*acons(aadt("Range",[],contextFreeSyntax()),[aadt("Char",[],lexicalSyntax(),alabel="start"),aadt("Char",[],lexicalSyntax(),alabel="end")],[],alabel="fromTo")*/
    public final io.usethesource.vallang.type.Type Command_statement_Statement;	/*acons(aadt("Command",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="statement")*/
    public final io.usethesource.vallang.type.Type EvalCommand_import_Import;	/*acons(aadt("EvalCommand",[],contextFreeSyntax()),[aadt("Import",[],contextFreeSyntax(),alabel="imported")],[],alabel="import")*/
    public final io.usethesource.vallang.type.Type Sym_unequal_Sym_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("Sym",[],contextFreeSyntax(),alabel="match")],[],alabel="unequal")*/
    public final io.usethesource.vallang.type.Type Comprehension_list_iter_seps_Expression_iter_seps_Expression;	/*acons(aadt("Comprehension",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="results"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators")],[],alabel="list")*/
    public final io.usethesource.vallang.type.Type Catch_binding_Pattern_Statement;	/*acons(aadt("Catch",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern"),aadt("Statement",[],contextFreeSyntax(),alabel="body")],[],alabel="binding")*/
    public final io.usethesource.vallang.type.Type Statement_break_Target;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Target",[],contextFreeSyntax(),alabel="target")],[],alabel="break")*/
    public final io.usethesource.vallang.type.Type SyntaxDefinition_lexical_Sym_Prod;	/*acons(aadt("SyntaxDefinition",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="defined"),aadt("Prod",[],contextFreeSyntax(),alabel="production")],[],alabel="lexical")*/
    public final io.usethesource.vallang.type.Type Assignable_slice_Assignable_OptionalExpression_OptionalExpression;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="receiver"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optFirst"),aadt("OptionalExpression",[],contextFreeSyntax(),alabel="optLast")],[],alabel="slice")*/
    public final io.usethesource.vallang.type.Type $T37;	/*\iter-seps(aadt("Type",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="parameters")*/
    public final io.usethesource.vallang.type.Type Sym_notPrecede_Sym_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="match"),aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="notPrecede")*/
    public final io.usethesource.vallang.type.Type ADT_RealLiteral;	/*aadt("RealLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_RealLiteral;	/*aadt("RealLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Assoc_associative_;	/*acons(aadt("Assoc",[],contextFreeSyntax()),[],[],alabel="associative")*/
    public final io.usethesource.vallang.type.Type Expression_map_iter_star_seps_Mapping_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[\iter-star-seps(aadt("Mapping",[aadt("Expression",[],contextFreeSyntax())],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="mappings")],[],alabel="map")*/
    public final io.usethesource.vallang.type.Type DataTarget_empty_;	/*acons(aadt("DataTarget",[],contextFreeSyntax()),[],[],alabel="empty")*/
    public final io.usethesource.vallang.type.Type EvalCommand_statement_Statement;	/*acons(aadt("EvalCommand",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="statement")*/
    public final io.usethesource.vallang.type.Type Expression_range_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="first"),aadt("Expression",[],contextFreeSyntax(),alabel="last")],[],alabel="range")*/
    public final io.usethesource.vallang.type.Type Expression_appendAfter_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="appendAfter")*/
    public final io.usethesource.vallang.type.Type Expression_enumerator_Pattern_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern"),aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="enumerator")*/
    public final io.usethesource.vallang.type.Type Sym_notFollow_Sym_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("Sym",[],contextFreeSyntax(),alabel="match")],[],alabel="notFollow")*/
    public final io.usethesource.vallang.type.Type ShellCommand_clear_;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[],[],alabel="clear")*/
    public final io.usethesource.vallang.type.Type Assignment_append_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="append")*/
    public final io.usethesource.vallang.type.Type Type_function_FunctionType;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("FunctionType",[],contextFreeSyntax(),alabel="function")],[],alabel="function")*/
    public final io.usethesource.vallang.type.Type Assignable_subscript_Assignable_Expression;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="receiver"),aadt("Expression",[],contextFreeSyntax(),alabel="subscript")],[],alabel="subscript")*/
    public final io.usethesource.vallang.type.Type KeywordFormals_none_;	/*acons(aadt("KeywordFormals",[],contextFreeSyntax()),[],[],alabel="none")*/
    public final io.usethesource.vallang.type.Type Command_import_Import;	/*acons(aadt("Command",[],contextFreeSyntax()),[aadt("Import",[],contextFreeSyntax(),alabel="imported")],[],alabel="import")*/
    public final io.usethesource.vallang.type.Type Sym_startOfLine_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="startOfLine")*/
    public final io.usethesource.vallang.type.Type FunctionDeclaration_abstract_Tags_Visibility_Signature;	/*acons(aadt("FunctionDeclaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("Signature",[],contextFreeSyntax(),alabel="signature")],[],alabel="abstract")*/
    public final io.usethesource.vallang.type.Type Kind_anno_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="anno")*/
    public final io.usethesource.vallang.type.Type Expression_noMatch_Pattern_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern"),aadt("Expression",[],contextFreeSyntax(),alabel="expression")],[],alabel="noMatch")*/
    public final io.usethesource.vallang.type.Type Declaration_function_FunctionDeclaration;	/*acons(aadt("Declaration",[],contextFreeSyntax()),[aadt("FunctionDeclaration",[],contextFreeSyntax(),alabel="functionDeclaration")],[],alabel="function")*/
    public final io.usethesource.vallang.type.Type Expression_visit_Label_Visit;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Label",[],contextFreeSyntax(),alabel="label"),aadt("Visit",[],contextFreeSyntax(),alabel="visit")],[],alabel="visit")*/
    public final io.usethesource.vallang.type.Type StringTail_midInterpolated_MidStringChars_Expression_StringTail;	/*acons(aadt("StringTail",[],contextFreeSyntax()),[aadt("MidStringChars",[],lexicalSyntax(),alabel="mid"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("StringTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="midInterpolated")*/
    public final io.usethesource.vallang.type.Type SyntaxDefinition_language_Start_Sym_Prod;	/*acons(aadt("SyntaxDefinition",[],contextFreeSyntax()),[aadt("Start",[],contextFreeSyntax(),alabel="start"),aadt("Sym",[],contextFreeSyntax(),alabel="defined"),aadt("Prod",[],contextFreeSyntax(),alabel="production")],[],alabel="language")*/
    public final io.usethesource.vallang.type.Type ADT_Comment;	/*aadt("Comment",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_Comment;	/*aadt("Comment",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type BasicType_bool_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="bool")*/
    public final io.usethesource.vallang.type.Type Assignment_intersection_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="intersection")*/
    public final io.usethesource.vallang.type.Type ADT_OctalIntegerLiteral;	/*aadt("OctalIntegerLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_OctalIntegerLiteral;	/*aadt("OctalIntegerLiteral",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type $T38;	/*\iter-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="sequence")*/
    public final io.usethesource.vallang.type.Type Sym_sequence_Sym_iter_seps_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="first"),\iter-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="sequence")],[],alabel="sequence")*/
    public final io.usethesource.vallang.type.Type Assignment_product_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="product")*/
    public final io.usethesource.vallang.type.Type ADT_MidProtocolChars;	/*aadt("MidProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_MidProtocolChars;	/*aadt("MidProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_RascalKeywords;	/*aadt("RascalKeywords",[],keywordSyntax())*/
    public final io.usethesource.vallang.type.Type Prod_first_Prod_Prod;	/*acons(aadt("Prod",[],contextFreeSyntax()),[aadt("Prod",[],contextFreeSyntax(),alabel="lhs"),aadt("Prod",[],contextFreeSyntax(),alabel="rhs")],[],alabel="first")*/
    public final io.usethesource.vallang.type.Type ADT_NamedRegExp;	/*aadt("NamedRegExp",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_NamedRegExp;	/*aadt("NamedRegExp",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Pattern_concrete_Concrete;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Concrete",[],lexicalSyntax(),alabel="concrete")],[],alabel="concrete")*/
    public final io.usethesource.vallang.type.Type $T41;	/*\iter-star-seps(aadt("FunctionModifier",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="modifiers")*/
    public final io.usethesource.vallang.type.Type FunctionModifiers_modifierlist_iter_star_seps_FunctionModifier;	/*acons(aadt("FunctionModifiers",[],contextFreeSyntax()),[\iter-star-seps(aadt("FunctionModifier",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="modifiers")],[],alabel="modifierlist")*/
    public final io.usethesource.vallang.type.Type Expression_insertBefore_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="insertBefore")*/
    public final io.usethesource.vallang.type.Type Toplevel_givenVisibility_Declaration;	/*acons(aadt("Toplevel",[],contextFreeSyntax()),[aadt("Declaration",[],contextFreeSyntax(),alabel="declaration")],[],alabel="givenVisibility")*/
    public final io.usethesource.vallang.type.Type Statement_emptyStatement_;	/*acons(aadt("Statement",[],contextFreeSyntax()),[],[],alabel="emptyStatement")*/
    public final io.usethesource.vallang.type.Type ADT_PreProtocolChars;	/*aadt("PreProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PreProtocolChars;	/*aadt("PreProtocolChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Declaration_annotation_Tags_Visibility_Type_Type_Name;	/*acons(aadt("Declaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("Type",[],contextFreeSyntax(),alabel="annoType"),aadt("Type",[],contextFreeSyntax(),alabel="onType"),aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="annotation")*/
    public final io.usethesource.vallang.type.Type DataTarget_labeled_Name;	/*acons(aadt("DataTarget",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="label")],[],alabel="labeled")*/
    public final io.usethesource.vallang.type.Type PathPart_interpolated_PrePathChars_Expression_PathTail;	/*acons(aadt("PathPart",[],contextFreeSyntax()),[aadt("PrePathChars",[],lexicalSyntax(),alabel="pre"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("PathTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="interpolated")*/
    public final io.usethesource.vallang.type.Type FunctionModifier_java_;	/*acons(aadt("FunctionModifier",[],contextFreeSyntax()),[],[],alabel="java")*/
    public final io.usethesource.vallang.type.Type ProtocolTail_mid_MidProtocolChars_Expression_ProtocolTail;	/*acons(aadt("ProtocolTail",[],contextFreeSyntax()),[aadt("MidProtocolChars",[],lexicalSyntax(),alabel="mid"),aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("ProtocolTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="mid")*/
    public final io.usethesource.vallang.type.Type Variant_nAryConstructor_Name_iter_star_seps_TypeArg_KeywordFormals;	/*acons(aadt("Variant",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name"),\iter-star-seps(aadt("TypeArg",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="arguments"),aadt("KeywordFormals",[],contextFreeSyntax(),alabel="keywordArguments")],[],alabel="nAryConstructor")*/
    public final io.usethesource.vallang.type.Type Pattern_set_iter_star_seps_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[\iter-star-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements0")],[],alabel="set")*/
    public final io.usethesource.vallang.type.Type Expression_division_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="division")*/
    public final io.usethesource.vallang.type.Type Sym_except_Sym_NonterminalLabel;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol"),aadt("NonterminalLabel",[],lexicalSyntax(),alabel="label")],[],alabel="except")*/
    public final io.usethesource.vallang.type.Type Type_selector_DataTypeSelector;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("DataTypeSelector",[],contextFreeSyntax(),alabel="selector")],[],alabel="selector")*/
    public final io.usethesource.vallang.type.Type KeywordFormals_default_OptionalComma_iter_seps_KeywordFormal;	/*acons(aadt("KeywordFormals",[],contextFreeSyntax()),[aadt("OptionalComma",[],lexicalSyntax(),alabel="optionalComma"),\iter-seps(aadt("KeywordFormal",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="keywordFormalList")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Expression_notIn_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="notIn")*/
    public final io.usethesource.vallang.type.Type Sym_parametrized_Nonterminal_iter_seps_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Nonterminal",[],lexicalSyntax(),alabel="nonterminal"),\iter-seps(aadt("Sym",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="parameters")],[],alabel="parametrized")*/
    public final io.usethesource.vallang.type.Type TypeVar_bounded_Name_Type;	/*acons(aadt("TypeVar",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Type",[],contextFreeSyntax(),alabel="bound")],[],alabel="bounded")*/
    public final io.usethesource.vallang.type.Type BasicType_loc_;	/*acons(aadt("BasicType",[],contextFreeSyntax()),[],[],alabel="loc")*/
    public final io.usethesource.vallang.type.Type Literal_real_RealLiteral;	/*acons(aadt("Literal",[],contextFreeSyntax()),[aadt("RealLiteral",[],lexicalSyntax(),alabel="realLiteral")],[],alabel="real")*/
    public final io.usethesource.vallang.type.Type ADT_NamedBackslash;	/*aadt("NamedBackslash",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_NamedBackslash;	/*aadt("NamedBackslash",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type KeywordArgument_1_default_Name;	/*acons(aadt("KeywordArgument",[aparameter("T",aadt("Tree",[],dataSyntax()),closed=true)],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Pattern_typedVariable_Type_Name;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="typedVariable")*/
    public final io.usethesource.vallang.type.Type Assignable_variable_QualifiedName;	/*acons(aadt("Assignable",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="qualifiedName")],[],alabel="variable")*/
    public final io.usethesource.vallang.type.Type ADT_StringCharacter;	/*aadt("StringCharacter",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_StringCharacter;	/*aadt("StringCharacter",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Header_parameters_Tags_QualifiedName_ModuleParameters_iter_star_seps_Import;	/*acons(aadt("Header",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),aadt("ModuleParameters",[],contextFreeSyntax(),alabel="params"),\iter-star-seps(aadt("Import",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="imports")],[],alabel="parameters")*/
    public final io.usethesource.vallang.type.Type StringTemplate_for_iter_seps_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement;	/*acons(aadt("StringTemplate",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="generators"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStats"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="body"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStats")],[],alabel="for")*/
    public final io.usethesource.vallang.type.Type StringMiddle_mid_MidStringChars;	/*acons(aadt("StringMiddle",[],contextFreeSyntax()),[aadt("MidStringChars",[],lexicalSyntax(),alabel="mid")],[],alabel="mid")*/
    public final io.usethesource.vallang.type.Type Import_external_QualifiedName_LocationLiteral;	/*acons(aadt("Import",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),aadt("LocationLiteral",[],contextFreeSyntax(),alabel="at")],[],alabel="external")*/
    public final io.usethesource.vallang.type.Type Body_toplevels_iter_star_seps_Toplevel;	/*acons(aadt("Body",[],contextFreeSyntax()),[\iter-star-seps(aadt("Toplevel",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="toplevels")],[],alabel="toplevels")*/
    public final io.usethesource.vallang.type.Type Statement_try_Statement_iter_seps_Catch;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="body"),\iter-seps(aadt("Catch",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="handlers")],[],alabel="try")*/
    public final io.usethesource.vallang.type.Type ADT_PathChars;	/*aadt("PathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PathChars;	/*aadt("PathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type ADT_PostPathChars;	/*aadt("PostPathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_PostPathChars;	/*aadt("PostPathChars",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Kind_view_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="view")*/
    public final io.usethesource.vallang.type.Type Replacement_conditional_Expression_iter_seps_Expression;	/*acons(aadt("Replacement",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="replacementExpression"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions")],[],alabel="conditional")*/
    public final io.usethesource.vallang.type.Type DateTimeLiteral_dateLiteral_JustDate;	/*acons(aadt("DateTimeLiteral",[],contextFreeSyntax()),[aadt("JustDate",[],lexicalSyntax(),alabel="date")],[],alabel="dateLiteral")*/
    public final io.usethesource.vallang.type.Type Variable_unInitialized_Name;	/*acons(aadt("Variable",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="unInitialized")*/
    public final io.usethesource.vallang.type.Type Sym_literal_StringConstant;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("StringConstant",[],lexicalSyntax(),alabel="string")],[],alabel="literal")*/
    public final io.usethesource.vallang.type.Type TypeVar_free_Name;	/*acons(aadt("TypeVar",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name")],[],alabel="free")*/
    public final io.usethesource.vallang.type.Type Declarator_default_Type_iter_seps_Variable;	/*acons(aadt("Declarator",[],contextFreeSyntax()),[aadt("Type",[],contextFreeSyntax(),alabel="type"),\iter-seps(aadt("Variable",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="variables")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Declaration_tag_Tags_Visibility_Kind_Name_iter_seps_Type;	/*acons(aadt("Declaration",[],contextFreeSyntax()),[aadt("Tags",[],contextFreeSyntax(),alabel="tags"),aadt("Visibility",[],contextFreeSyntax(),alabel="visibility"),aadt("Kind",[],contextFreeSyntax(),alabel="kind"),aadt("Name",[],lexicalSyntax(),alabel="name"),\iter-seps(aadt("Type",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="types")],[],alabel="tag")*/
    public final io.usethesource.vallang.type.Type Expression_fieldAccess_Expression_Name;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),aadt("Name",[],lexicalSyntax(),alabel="field")],[],alabel="fieldAccess")*/
    public final io.usethesource.vallang.type.Type CommonKeywordParameters_present_iter_seps_KeywordFormal;	/*acons(aadt("CommonKeywordParameters",[],contextFreeSyntax()),[\iter-seps(aadt("KeywordFormal",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="keywordFormalList")],[],alabel="present")*/
    public final io.usethesource.vallang.type.Type Type_symbol_Sym;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="symbol")*/
    public final io.usethesource.vallang.type.Type Sym_parameter_Nonterminal;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Nonterminal",[],lexicalSyntax(),alabel="nonterminal")],[],alabel="parameter")*/
    public final io.usethesource.vallang.type.Type Expression_voidClosure_Parameters_iter_star_seps_Statement;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Parameters",[],contextFreeSyntax(),alabel="parameters"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="statements0")],[],alabel="voidClosure")*/
    public final io.usethesource.vallang.type.Type Command_shell_ShellCommand;	/*acons(aadt("Command",[],contextFreeSyntax()),[aadt("ShellCommand",[],contextFreeSyntax(),alabel="command")],[],alabel="shell")*/
    public final io.usethesource.vallang.type.Type Strategy_bottomUp_;	/*acons(aadt("Strategy",[],contextFreeSyntax()),[],[],alabel="bottomUp")*/
    public final io.usethesource.vallang.type.Type Pattern_tuple_iter_seps_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[\iter-seps(aadt("Pattern",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="elements")],[],alabel="tuple")*/
    public final io.usethesource.vallang.type.Type Sym_nonterminal_Nonterminal;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Nonterminal",[],lexicalSyntax(),alabel="nonterminal")],[],alabel="nonterminal")*/
    public final io.usethesource.vallang.type.Type Assignment_addition_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="addition")*/
    public final io.usethesource.vallang.type.Type Statement_assignment_Assignable_Assignment_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Assignable",[],contextFreeSyntax(),alabel="assignable"),aadt("Assignment",[],contextFreeSyntax(),alabel="operator"),aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="assignment")*/
    public final io.usethesource.vallang.type.Type Pattern_splicePlus_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="argument")],[],alabel="splicePlus")*/
    public final io.usethesource.vallang.type.Type Statement_throw_Statement;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Statement",[],contextFreeSyntax(),alabel="statement")],[],alabel="throw")*/
    public final io.usethesource.vallang.type.Type Pattern_descendant_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Pattern",[],contextFreeSyntax(),alabel="pattern")],[],alabel="descendant")*/
    public final io.usethesource.vallang.type.Type ShellCommand_listDeclarations_;	/*acons(aadt("ShellCommand",[],contextFreeSyntax()),[],[],alabel="listDeclarations")*/
    public final io.usethesource.vallang.type.Type Expression_negative_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="argument")],[],alabel="negative")*/
    public final io.usethesource.vallang.type.Type Pattern_variableBecomes_Name_Pattern;	/*acons(aadt("Pattern",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="name"),aadt("Pattern",[],contextFreeSyntax(),alabel="pattern")],[],alabel="variableBecomes")*/
    public final io.usethesource.vallang.type.Type Assoc_nonAssociative_;	/*acons(aadt("Assoc",[],contextFreeSyntax()),[],[],alabel="nonAssociative")*/
    public final io.usethesource.vallang.type.Type Sym_iter_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="iter")*/
    public final io.usethesource.vallang.type.Type Expression_and_Expression_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="lhs"),aadt("Expression",[],contextFreeSyntax(),alabel="rhs")],[],alabel="and")*/
    public final io.usethesource.vallang.type.Type Kind_alias_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="alias")*/
    public final io.usethesource.vallang.type.Type Type_structured_StructuredType;	/*acons(aadt("Type",[],contextFreeSyntax()),[aadt("StructuredType",[],contextFreeSyntax(),alabel="structured")],[],alabel="structured")*/
    public final io.usethesource.vallang.type.Type Sym_precede_Sym_Sym;	/*acons(aadt("Sym",[],contextFreeSyntax()),[aadt("Sym",[],contextFreeSyntax(),alabel="match"),aadt("Sym",[],contextFreeSyntax(),alabel="symbol")],[],alabel="precede")*/
    public final io.usethesource.vallang.type.Type Assignment_subtraction_;	/*acons(aadt("Assignment",[],contextFreeSyntax()),[],[],alabel="subtraction")*/
    public final io.usethesource.vallang.type.Type Expression_isDefined_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="argument")],[],alabel="isDefined")*/
    public final io.usethesource.vallang.type.Type QualifiedName_default_iter_seps_Name;	/*acons(aadt("QualifiedName",[],contextFreeSyntax()),[\iter-seps(aadt("Name",[],lexicalSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit("::"),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="names")],[],alabel="default")*/
    public final io.usethesource.vallang.type.Type Expression_subscript_Expression_iter_seps_Expression;	/*acons(aadt("Expression",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="expression"),\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="subscripts")],[],alabel="subscript")*/
    public final io.usethesource.vallang.type.Type StringTemplate_ifThen_iter_seps_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement;	/*acons(aadt("StringTemplate",[],contextFreeSyntax()),[\iter-seps(aadt("Expression",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="conditions"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="preStats"),aadt("StringMiddle",[],contextFreeSyntax(),alabel="body"),\iter-star-seps(aadt("Statement",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="postStats")],[],alabel="ifThen")*/
    public final io.usethesource.vallang.type.Type Kind_tag_;	/*acons(aadt("Kind",[],contextFreeSyntax()),[],[],alabel="tag")*/
    public final io.usethesource.vallang.type.Type Field_name_Name;	/*acons(aadt("Field",[],contextFreeSyntax()),[aadt("Name",[],lexicalSyntax(),alabel="fieldName")],[],alabel="name")*/
    public final io.usethesource.vallang.type.Type ConcretePart_text_str;	/*acons(aadt("ConcretePart",[],lexicalSyntax()),[astr()],[],alabel="text")*/
    public final io.usethesource.vallang.type.Type EvalCommand_output_Output;	/*acons(aadt("EvalCommand",[],contextFreeSyntax()),[aadt("Output",[],lexicalSyntax())],[],alabel="output")*/
    public final io.usethesource.vallang.type.Type UserType_parametric_QualifiedName_iter_seps_Type;	/*acons(aadt("UserType",[],contextFreeSyntax()),[aadt("QualifiedName",[],contextFreeSyntax(),alabel="name"),\iter-seps(aadt("Type",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax()),alit(","),aadt("LAYOUTLIST",[],layoutSyntax())],alabel="parameters")],[],alabel="parametric")*/
    public final io.usethesource.vallang.type.Type StringLiteral_template_PreStringChars_StringTemplate_StringTail;	/*acons(aadt("StringLiteral",[],contextFreeSyntax()),[aadt("PreStringChars",[],lexicalSyntax(),alabel="pre"),aadt("StringTemplate",[],contextFreeSyntax(),alabel="template"),aadt("StringTail",[],contextFreeSyntax(),alabel="tail")],[],alabel="template")*/
    public final io.usethesource.vallang.type.Type ADT_JustTime;	/*aadt("JustTime",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type NT_JustTime;	/*aadt("JustTime",[],lexicalSyntax())*/
    public final io.usethesource.vallang.type.Type Statement_continue_Target;	/*acons(aadt("Statement",[],contextFreeSyntax()),[aadt("Target",[],contextFreeSyntax(),alabel="target")],[],alabel="continue")*/
    public final io.usethesource.vallang.type.Type Visit_defaultStrategy_Expression_iter_seps_Case;	/*acons(aadt("Visit",[],contextFreeSyntax()),[aadt("Expression",[],contextFreeSyntax(),alabel="subject"),\iter-seps(aadt("Case",[],contextFreeSyntax()),[aadt("LAYOUTLIST",[],layoutSyntax())],alabel="cases")],[],alabel="defaultStrategy")*/

    public $Rascal(RascalExecutionContext rex){
        this(rex, null);
    }
    
    public $Rascal(RascalExecutionContext rex, Object extended){
       super(rex);
       this.$me = extended == null ? this : ($Rascal_$I)extended;
       ModuleStore mstore = rex.getModuleStore();
       mstore.put(rascal.lang.rascal.syntax.$Rascal.class, this);
        
        
       
                          
       
       
       $constants = readBinaryConstantsFile(this.getClass(), "rascal/lang/rascal/syntax/$Rascal.constants", 0, "d751713988987e9331980363e24189ce");
       NT_Concrete = $lex("Concrete");
       ADT_Concrete = $adt("Concrete");
       NT_Expression = $sort("Expression");
       ADT_Expression = $adt("Expression");
       NT_Statement = $sort("Statement");
       ADT_Statement = $adt("Statement");
       ADT_LAYOUTLIST = $layouts("LAYOUTLIST");
       NT_UnicodeEscape = $lex("UnicodeEscape");
       ADT_UnicodeEscape = $adt("UnicodeEscape");
       NT_BooleanLiteral = $lex("BooleanLiteral");
       ADT_BooleanLiteral = $adt("BooleanLiteral");
       NT_Case = $sort("Case");
       ADT_Case = $adt("Case");
       NT_Pattern = $sort("Pattern");
       ADT_Pattern = $adt("Pattern");
       NT_ProtocolPart = $sort("ProtocolPart");
       ADT_ProtocolPart = $adt("ProtocolPart");
       NT_MidStringChars = $lex("MidStringChars");
       ADT_MidStringChars = $adt("MidStringChars");
       NT_Strategy = $sort("Strategy");
       ADT_Strategy = $adt("Strategy");
       NT_ShellCommand = $sort("ShellCommand");
       ADT_ShellCommand = $adt("ShellCommand");
       ADT_Tree = $adt("Tree");
       NT_Type = $sort("Type");
       ADT_Type = $adt("Type");
       NT_StringLiteral = $sort("StringLiteral");
       ADT_StringLiteral = $adt("StringLiteral");
       NT_Renamings = $sort("Renamings");
       ADT_Renamings = $adt("Renamings");
       NT_Renaming = $sort("Renaming");
       ADT_Renaming = $adt("Renaming");
       NT_KeywordFormal = $sort("KeywordFormal");
       ADT_KeywordFormal = $adt("KeywordFormal");
       NT_FunctionModifier = $sort("FunctionModifier");
       ADT_FunctionModifier = $adt("FunctionModifier");
       NT_TimePartNoTZ = $lex("TimePartNoTZ");
       ADT_TimePartNoTZ = $adt("TimePartNoTZ");
       NT_Assignable = $sort("Assignable");
       ADT_Assignable = $adt("Assignable");
       NT_Sym = $sort("Sym");
       ADT_Sym = $adt("Sym");
       NT_Target = $sort("Target");
       ADT_Target = $adt("Target");
       NT_IntegerLiteral = $sort("IntegerLiteral");
       ADT_IntegerLiteral = $adt("IntegerLiteral");
       NT_Catch = $sort("Catch");
       ADT_Catch = $adt("Catch");
       NT_OptionalExpression = $sort("OptionalExpression");
       ADT_OptionalExpression = $adt("OptionalExpression");
       NT_Comprehension = $sort("Comprehension");
       ADT_Comprehension = $adt("Comprehension");
       NT_Kind = $sort("Kind");
       ADT_Kind = $adt("Kind");
       NT_ImportedModule = $sort("ImportedModule");
       ADT_ImportedModule = $adt("ImportedModule");
       NT_Class = $sort("Class");
       ADT_Class = $adt("Class");
       NT_FunctionType = $sort("FunctionType");
       ADT_FunctionType = $adt("FunctionType");
       NT_Range = $sort("Range");
       ADT_Range = $adt("Range");
       NT_PostProtocolChars = $lex("PostProtocolChars");
       ADT_PostProtocolChars = $adt("PostProtocolChars");
       NT_Output = $lex("Output");
       ADT_Output = $adt("Output");
       NT_BasicType = $sort("BasicType");
       ADT_BasicType = $adt("BasicType");
       NT_Variable = $sort("Variable");
       ADT_Variable = $adt("Variable");
       NT_Signature = $sort("Signature");
       ADT_Signature = $adt("Signature");
       NT_LAYOUT = $lex("LAYOUT");
       ADT_LAYOUT = $adt("LAYOUT");
       NT_Literal = $sort("Literal");
       ADT_Literal = $adt("Literal");
       NT_Tag = $sort("Tag");
       ADT_Tag = $adt("Tag");
       NT_LocalVariableDeclaration = $sort("LocalVariableDeclaration");
       ADT_LocalVariableDeclaration = $adt("LocalVariableDeclaration");
       NT_Replacement = $sort("Replacement");
       ADT_Replacement = $adt("Replacement");
       NT_PatternWithAction = $sort("PatternWithAction");
       ADT_PatternWithAction = $adt("PatternWithAction");
       NT_Assignment = $sort("Assignment");
       ADT_Assignment = $adt("Assignment");
       NT_Prod = $sort("Prod");
       ADT_Prod = $adt("Prod");
       NT_ProdModifier = $sort("ProdModifier");
       ADT_ProdModifier = $adt("ProdModifier");
       NT_Visibility = $sort("Visibility");
       ADT_Visibility = $adt("Visibility");
       NT_ProtocolChars = $lex("ProtocolChars");
       ADT_ProtocolChars = $adt("ProtocolChars");
       NT_ConcretePart = $lex("ConcretePart");
       ADT_ConcretePart = $adt("ConcretePart");
       NT_Label = $sort("Label");
       ADT_Label = $adt("Label");
       NT_SyntaxDefinition = $sort("SyntaxDefinition");
       ADT_SyntaxDefinition = $adt("SyntaxDefinition");
       NT_TypeArg = $sort("TypeArg");
       ADT_TypeArg = $adt("TypeArg");
       NT_RegExpModifier = $lex("RegExpModifier");
       ADT_RegExpModifier = $adt("RegExpModifier");
       NT_ProtocolTail = $sort("ProtocolTail");
       ADT_ProtocolTail = $adt("ProtocolTail");
       NT_StringTail = $sort("StringTail");
       ADT_StringTail = $adt("StringTail");
       NT_EvalCommand = $sort("EvalCommand");
       ADT_EvalCommand = $adt("EvalCommand");
       NT_Assoc = $sort("Assoc");
       ADT_Assoc = $adt("Assoc");
       NT_DecimalIntegerLiteral = $lex("DecimalIntegerLiteral");
       ADT_DecimalIntegerLiteral = $adt("DecimalIntegerLiteral");
       NT_DateTimeLiteral = $sort("DateTimeLiteral");
       ADT_DateTimeLiteral = $adt("DateTimeLiteral");
       NT_FunctionDeclaration = $sort("FunctionDeclaration");
       ADT_FunctionDeclaration = $adt("FunctionDeclaration");
       NT_Toplevel = $sort("Toplevel");
       ADT_Toplevel = $adt("Toplevel");
       NT_RationalLiteral = $lex("RationalLiteral");
       ADT_RationalLiteral = $adt("RationalLiteral");
       NT_DatePart = $lex("DatePart");
       ADT_DatePart = $adt("DatePart");
       NT_Declarator = $sort("Declarator");
       ADT_Declarator = $adt("Declarator");
       NT_PathTail = $sort("PathTail");
       ADT_PathTail = $adt("PathTail");
       NT_Field = $sort("Field");
       ADT_Field = $adt("Field");
       NT_StringMiddle = $sort("StringMiddle");
       ADT_StringMiddle = $adt("StringMiddle");
       NT_RegExpLiteral = $lex("RegExpLiteral");
       ADT_RegExpLiteral = $adt("RegExpLiteral");
       NT_Import = $sort("Import");
       ADT_Import = $adt("Import");
       NT_ModuleParameters = $sort("ModuleParameters");
       ADT_ModuleParameters = $adt("ModuleParameters");
       NT_StructuredType = $sort("StructuredType");
       ADT_StructuredType = $adt("StructuredType");
       NT_Command = $sort("Command");
       ADT_Command = $adt("Command");
       NT_QualifiedName = $sort("QualifiedName");
       ADT_QualifiedName = $adt("QualifiedName");
       NT_Name = $lex("Name");
       ADT_Name = $adt("Name");
       NT_UserType = $sort("UserType");
       ADT_UserType = $adt("UserType");
       NT_ModuleActuals = $sort("ModuleActuals");
       ADT_ModuleActuals = $adt("ModuleActuals");
       NT_PathPart = $sort("PathPart");
       ADT_PathPart = $adt("PathPart");
       NT_Tags = $sort("Tags");
       ADT_Tags = $adt("Tags");
       NT_URLChars = $lex("URLChars");
       ADT_URLChars = $adt("URLChars");
       NT_Parameters = $sort("Parameters");
       ADT_Parameters = $adt("Parameters");
       NT_FunctionBody = $sort("FunctionBody");
       ADT_FunctionBody = $adt("FunctionBody");
       NT_Declaration = $sort("Declaration");
       ADT_Declaration = $adt("Declaration");
       NT_LocationLiteral = $sort("LocationLiteral");
       ADT_LocationLiteral = $adt("LocationLiteral");
       NT_DataTypeSelector = $sort("DataTypeSelector");
       ADT_DataTypeSelector = $adt("DataTypeSelector");
       NT_OptionalComma = $lex("OptionalComma");
       ADT_OptionalComma = $adt("OptionalComma");
       NT_DataTarget = $sort("DataTarget");
       ADT_DataTarget = $adt("DataTarget");
       NT_HexIntegerLiteral = $lex("HexIntegerLiteral");
       ADT_HexIntegerLiteral = $adt("HexIntegerLiteral");
       NT_TimeZonePart = $lex("TimeZonePart");
       ADT_TimeZonePart = $adt("TimeZonePart");
       NT_KeywordFormals = $sort("KeywordFormals");
       ADT_KeywordFormals = $adt("KeywordFormals");
       NT_Variant = $sort("Variant");
       ADT_Variant = $adt("Variant");
       NT_Start = $sort("Start");
       ADT_Start = $adt("Start");
       NT_TagString = $lex("TagString");
       ADT_TagString = $adt("TagString");
       NT_NonterminalLabel = $lex("NonterminalLabel");
       ADT_NonterminalLabel = $adt("NonterminalLabel");
       NT_Nonterminal = $lex("Nonterminal");
       ADT_Nonterminal = $adt("Nonterminal");
       NT_RegExp = $lex("RegExp");
       ADT_RegExp = $adt("RegExp");
       NT_PostStringChars = $lex("PostStringChars");
       ADT_PostStringChars = $adt("PostStringChars");
       NT_PreStringChars = $lex("PreStringChars");
       ADT_PreStringChars = $adt("PreStringChars");
       NT_Header = $sort("Header");
       ADT_Header = $adt("Header");
       NT_Bound = $sort("Bound");
       ADT_Bound = $adt("Bound");
       NT_TypeVar = $sort("TypeVar");
       ADT_TypeVar = $adt("TypeVar");
       NT_StringTemplate = $sort("StringTemplate");
       ADT_StringTemplate = $adt("StringTemplate");
       NT_Commands = $sort("Commands");
       ADT_Commands = $adt("Commands");
       NT_Formals = $sort("Formals");
       ADT_Formals = $adt("Formals");
       NT_PrePathChars = $lex("PrePathChars");
       ADT_PrePathChars = $adt("PrePathChars");
       NT_Visit = $sort("Visit");
       ADT_Visit = $adt("Visit");
       NT_Body = $sort("Body");
       ADT_Body = $adt("Body");
       NT_JustDate = $lex("JustDate");
       ADT_JustDate = $adt("JustDate");
       NT_StringConstant = $lex("StringConstant");
       ADT_StringConstant = $adt("StringConstant");
       NT_FunctionModifiers = $sort("FunctionModifiers");
       ADT_FunctionModifiers = $adt("FunctionModifiers");
       NT_Module = $sort("Module");
       ADT_Module = $adt("Module");
       NT_MidPathChars = $lex("MidPathChars");
       ADT_MidPathChars = $adt("MidPathChars");
       NT_ConcreteHole = $sort("ConcreteHole");
       ADT_ConcreteHole = $adt("ConcreteHole");
       NT_DateAndTime = $lex("DateAndTime");
       ADT_DateAndTime = $adt("DateAndTime");
       NT_CaseInsensitiveStringConstant = $lex("CaseInsensitiveStringConstant");
       ADT_CaseInsensitiveStringConstant = $adt("CaseInsensitiveStringConstant");
       NT_Char = $lex("Char");
       ADT_Char = $adt("Char");
       NT_Backslash = $lex("Backslash");
       ADT_Backslash = $adt("Backslash");
       NT_CommonKeywordParameters = $sort("CommonKeywordParameters");
       ADT_CommonKeywordParameters = $adt("CommonKeywordParameters");
       NT_RealLiteral = $lex("RealLiteral");
       ADT_RealLiteral = $adt("RealLiteral");
       NT_Comment = $lex("Comment");
       ADT_Comment = $adt("Comment");
       NT_OctalIntegerLiteral = $lex("OctalIntegerLiteral");
       ADT_OctalIntegerLiteral = $adt("OctalIntegerLiteral");
       NT_MidProtocolChars = $lex("MidProtocolChars");
       ADT_MidProtocolChars = $adt("MidProtocolChars");
       ADT_RascalKeywords = $keywords("RascalKeywords");
       NT_NamedRegExp = $lex("NamedRegExp");
       ADT_NamedRegExp = $adt("NamedRegExp");
       NT_PreProtocolChars = $lex("PreProtocolChars");
       ADT_PreProtocolChars = $adt("PreProtocolChars");
       NT_NamedBackslash = $lex("NamedBackslash");
       ADT_NamedBackslash = $adt("NamedBackslash");
       NT_StringCharacter = $lex("StringCharacter");
       ADT_StringCharacter = $adt("StringCharacter");
       NT_PathChars = $lex("PathChars");
       ADT_PathChars = $adt("PathChars");
       NT_PostPathChars = $lex("PostPathChars");
       ADT_PostPathChars = $adt("PostPathChars");
       NT_JustTime = $lex("JustTime");
       ADT_JustTime = $adt("JustTime");
       $T36 = $TF.stringType();
       $T15 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T1 = $TF.parameterType("T", ADT_Tree);
       NT_KeywordArguments_1 = $parameterizedSort("KeywordArguments", new Type[] { $T1 }, $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Parameter, $RVF.string("T"), $RVF.constructor(RascalValueFactory.Symbol_Adt, $RVF.string("Tree"), $RVF.list()))));
       $T3 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")));
       $T47 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Renaming")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       NT_Mapping_Expression = $parameterizedSort("Mapping", new Type[] { ADT_Expression }, $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression"))));
       $T46 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T33 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Catch")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       NT_KeywordArguments_Expression = $parameterizedSort("KeywordArguments", new Type[] { ADT_Expression }, $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression"))));
       $T4 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T5 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       NT_Mapping_1 = $parameterizedSort("Mapping", new Type[] { $T1 }, $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Parameter, $RVF.string("T"), $RVF.constructor(RascalValueFactory.Symbol_Adt, $RVF.string("Tree"), $RVF.list()))));
       $T24 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T7 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T28 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T9 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("|")));
       $T10 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("|")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T18 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T48 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ProdModifier")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T49 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T54 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeArg")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T12 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T58 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T32 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Toplevel")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T53 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T44 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T16 = $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("EvalCommand")), $TS, p -> Collections.emptySet());
       $T17 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Start, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("EvalCommand"))), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T40 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T39 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeArg")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T45 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Field")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T43 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T0 = $TF.parameterType("T", ADT_Tree);
       $T31 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T19 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Case")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       NT_KeywordArgument_1 = $parameterizedSort("KeywordArgument", new Type[] { $T1 }, $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Parameter, $RVF.string("T"), $RVF.constructor(RascalValueFactory.Symbol_Adt, $RVF.string("Tree"), $RVF.list()))));
       $T55 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T34 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("::")));
       $T35 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Lex, $RVF.string("Name")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("::")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T14 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T29 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Import")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T42 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T2 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T56 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Range")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T57 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T6 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T50 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tag")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T51 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Variant")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("|")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T23 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       NT_Mapping_Pattern = $parameterizedSort("Mapping", new Type[] { ADT_Pattern }, $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern"))));
       $T30 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       NT_KeywordArguments_Pattern = $parameterizedSort("KeywordArguments", new Type[] { ADT_Pattern }, $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern"))));
       $T27 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Variable")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T52 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeVar")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T22 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T26 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordFormal")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T13 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T21 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T25 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T20 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Mapping")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T8 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Mapping")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T11 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordArgument")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T37 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T38 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       $T41 = $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionModifier")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")))));
       ADT_KeywordArguments_1 = $TF.abstractDataType($TS, "KeywordArguments", new Type[] { $T1 });
       ADT_Mapping_Expression = $TF.abstractDataType($TS, "Mapping", new Type[] { ADT_Expression });
       ADT_KeywordArguments_Expression = $TF.abstractDataType($TS, "KeywordArguments", new Type[] { ADT_Expression });
       ADT_Mapping_1 = $TF.abstractDataType($TS, "Mapping", new Type[] { $T1 });
       ADT_KeywordArgument_1 = $TF.abstractDataType($TS, "KeywordArgument", new Type[] { $T1 });
       ADT_Mapping_Pattern = $TF.abstractDataType($TS, "Mapping", new Type[] { ADT_Pattern });
       ADT_KeywordArguments_Pattern = $TF.abstractDataType($TS, "KeywordArguments", new Type[] { ADT_Pattern });
       Concrete_typed_str_Sym_str_str_str = $TF.constructor($TS, ADT_Concrete, "typed", $TF.stringType(), $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), $TF.stringType(), $TF.stringType(), $TF.stringType());
       Expression_qualifiedName_QualifiedName = $TF.constructor($TS, ADT_Expression, "qualifiedName", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "qualifiedName");
       Expression_greaterThanOrEq_Expression_Expression = $TF.constructor($TS, ADT_Expression, "greaterThanOrEq", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       UnicodeEscape_utf32_ = $TF.constructor($TS, ADT_UnicodeEscape, "utf32");
       ProtocolPart_nonInterpolated_ProtocolChars = $TF.constructor($TS, ADT_ProtocolPart, "nonInterpolated", ADT_ProtocolChars, "protocolChars");
       ShellCommand_setOption_QualifiedName_Expression = $TF.constructor($TS, ADT_ShellCommand, "setOption", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Type_bracket_Type = $TF.constructor($TS, ADT_Type, "bracket", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type");
       StringLiteral_interpolated_PreStringChars_Expression_StringTail = $TF.constructor($TS, ADT_StringLiteral, "interpolated", ADT_PreStringChars, "pre", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringTail")), $TS, p -> Collections.emptySet()), "tail");
       Renamings_default_iter_seps_Renaming = $TF.constructor($TS, ADT_Renamings, "default", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Renaming")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "renamings");
       KeywordFormal_default_Type_Name_Expression = $TF.constructor($TS, ADT_KeywordFormal, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Statement_expression_Expression = $TF.constructor($TS, ADT_Statement, "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       FunctionModifier_default_ = $TF.constructor($TS, ADT_FunctionModifier, "default");
       Assignable_tuple_iter_seps_Assignable = $TF.constructor($TS, ADT_Assignable, "tuple", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "elements");
       Sym_iterStarSep_Sym_Sym = $TF.constructor($TS, ADT_Sym, "iterStarSep", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "sep");
       OptionalExpression_expression_Expression = $TF.constructor($TS, ADT_OptionalExpression, "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Expression_composition_Expression_Expression = $TF.constructor($TS, ADT_Expression, "composition", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Comprehension_set_iter_seps_Expression_iter_seps_Expression = $TF.constructor($TS, ADT_Comprehension, "set", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "results", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators");
       Kind_all_ = $TF.constructor($TS, ADT_Kind, "all");
       Sym_iterStar_Sym = $TF.constructor($TS, ADT_Sym, "iterStar", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       Statement_ifThenElse_Label_iter_seps_Expression_Statement_Statement = $TF.constructor($TS, ADT_Statement, "ifThenElse", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "conditions", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "thenStatement", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "elseStatement");
       Expression_join_Expression_Expression = $TF.constructor($TS, ADT_Expression, "join", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Class_intersection_Class_Class = $TF.constructor($TS, ADT_Class, "intersection", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "rhs");
       Output_resultOutput_ = $TF.constructor($TS, ADT_Output, "resultOutput");
       BasicType_tuple_ = $TF.constructor($TS, ADT_BasicType, "tuple");
       Expression_sliceStep_Expression_OptionalExpression_Expression_OptionalExpression = $TF.constructor($TS, ADT_Expression, "sliceStep", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optFirst", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "second", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optLast");
       Expression_has_Expression_Name = $TF.constructor($TS, ADT_Expression, "has", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", ADT_Name, "name");
       BasicType_dateTime_ = $TF.constructor($TS, ADT_BasicType, "dateTime");
       ShellCommand_edit_QualifiedName = $TF.constructor($TS, ADT_ShellCommand, "edit", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name");
       Variable_initialized_Name_Expression = $TF.constructor($TS, ADT_Variable, "initialized", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "initial");
       Signature_noThrows_FunctionModifiers_Type_Name_Parameters = $TF.constructor($TS, ADT_Signature, "noThrows", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionModifiers")), $TS, p -> Collections.emptySet()), "modifiers", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Parameters")), $TS, p -> Collections.emptySet()), "parameters");
       Expression_concrete_Concrete = $TF.constructor($TS, ADT_Expression, "concrete", ADT_Concrete, "concrete");
       Literal_string_StringLiteral = $TF.constructor($TS, ADT_Literal, "string", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringLiteral")), $TS, p -> Collections.emptySet()), "stringLiteral");
       UnicodeEscape_ascii_ = $TF.constructor($TS, ADT_UnicodeEscape, "ascii");
       Tag_expression_Name_Expression = $TF.constructor($TS, ADT_Tag, "expression", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Kind_module_ = $TF.constructor($TS, ADT_Kind, "module");
       ImportedModule_renamings_QualifiedName_Renamings = $TF.constructor($TS, ADT_ImportedModule, "renamings", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Renamings")), $TS, p -> Collections.emptySet()), "renamings");
       KeywordArguments_1_none_ = $TF.constructor($TS, ADT_KeywordArguments_1, "none");
       PatternWithAction_replacing_Pattern_Replacement = $TF.constructor($TS, ADT_PatternWithAction, "replacing", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Replacement")), $TS, p -> Collections.emptySet()), "replacement");
       Assignment_division_ = $TF.constructor($TS, ADT_Assignment, "division");
       Sym_optional_Sym = $TF.constructor($TS, ADT_Sym, "optional", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       Class_bracket_Class = $TF.constructor($TS, ADT_Class, "bracket", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "charClass");
       Prod_labeled_iter_star_seps_ProdModifier_Name_iter_star_seps_Sym = $TF.constructor($TS, ADT_Prod, "labeled", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ProdModifier")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "modifiers", ADT_Name, "name", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "syms");
       BasicType_bag_ = $TF.constructor($TS, ADT_BasicType, "bag");
       Pattern_multiVariable_QualifiedName = $TF.constructor($TS, ADT_Pattern, "multiVariable", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "qualifiedName");
       Literal_boolean_BooleanLiteral = $TF.constructor($TS, ADT_Literal, "boolean", ADT_BooleanLiteral, "booleanLiteral");
       ConcretePart_gt_ = $TF.constructor($TS, ADT_ConcretePart, "gt");
       Output_stdoutOutput_ = $TF.constructor($TS, ADT_Output, "stdoutOutput");
       Expression_transitiveReflexiveClosure_Expression = $TF.constructor($TS, ADT_Expression, "transitiveReflexiveClosure", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "argument");
       SyntaxDefinition_layout_Visibility_Sym_Prod = $TF.constructor($TS, ADT_SyntaxDefinition, "layout", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "vis", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "defined", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "production");
       Expression_modulo_Expression_Expression = $TF.constructor($TS, ADT_Expression, "modulo", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Range_character_Char = $TF.constructor($TS, ADT_Range, "character", ADT_Char, "character");
       SyntaxDefinition_keyword_Sym_Prod = $TF.constructor($TS, ADT_SyntaxDefinition, "keyword", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "defined", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "production");
       Statement_filter_ = $TF.constructor($TS, ADT_Statement, "filter");
       Expression_reifiedType_Expression_Expression = $TF.constructor($TS, ADT_Expression, "reifiedType", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "definitions");
       StringLiteral_nonInterpolated_StringConstant = $TF.constructor($TS, ADT_StringLiteral, "nonInterpolated", ADT_StringConstant, "constant");
       Visibility_private_ = $TF.constructor($TS, ADT_Visibility, "private");
       Statement_doWhile_Label_Statement_Expression = $TF.constructor($TS, ADT_Statement, "doWhile", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "condition");
       ProtocolTail_post_PostProtocolChars = $TF.constructor($TS, ADT_ProtocolTail, "post", ADT_PostProtocolChars, "post");
       StringTail_midTemplate_MidStringChars_StringTemplate_StringTail = $TF.constructor($TS, ADT_StringTail, "midTemplate", ADT_MidStringChars, "mid", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringTemplate")), $TS, p -> Collections.emptySet()), "template", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringTail")), $TS, p -> Collections.emptySet()), "tail");
       BasicType_real_ = $TF.constructor($TS, ADT_BasicType, "real");
       EvalCommand_declaration_Declaration = $TF.constructor($TS, ADT_EvalCommand, "declaration", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Declaration")), $TS, p -> Collections.emptySet()), "declaration");
       ShellCommand_help_ = $TF.constructor($TS, ADT_ShellCommand, "help");
       Pattern_negative_Pattern = $TF.constructor($TS, ADT_Pattern, "negative", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "argument");
       Statement_return_Statement = $TF.constructor($TS, ADT_Statement, "return", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       Comprehension_map_Expression_Expression_iter_seps_Expression = $TF.constructor($TS, ADT_Comprehension, "map", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "from", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "to", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators");
       FunctionDeclaration_conditional_Tags_Visibility_Signature_Expression_iter_seps_Expression = $TF.constructor($TS, ADT_FunctionDeclaration, "conditional", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Signature")), $TS, p -> Collections.emptySet()), "signature", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "conditions");
       BasicType_list_ = $TF.constructor($TS, ADT_BasicType, "list");
       Strategy_bottomUpBreak_ = $TF.constructor($TS, ADT_Strategy, "bottomUpBreak");
       Strategy_innermost_ = $TF.constructor($TS, ADT_Strategy, "innermost");
       Expression_tuple_iter_seps_Expression = $TF.constructor($TS, ADT_Expression, "tuple", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "elements");
       Literal_rational_RationalLiteral = $TF.constructor($TS, ADT_Literal, "rational", ADT_RationalLiteral, "rationalLiteral");
       Strategy_topDown_ = $TF.constructor($TS, ADT_Strategy, "topDown");
       Expression_equals_Expression_Expression = $TF.constructor($TS, ADT_Expression, "equals", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Expression_nonEquals_Expression_Expression = $TF.constructor($TS, ADT_Expression, "nonEquals", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       ProdModifier_associativity_Assoc = $TF.constructor($TS, ADT_ProdModifier, "associativity", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assoc")), $TS, p -> Collections.emptySet()), "associativity");
       FunctionType_typeArguments_Type_iter_star_seps_TypeArg = $TF.constructor($TS, ADT_FunctionType, "typeArguments", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeArg")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "arguments");
       PathTail_mid_MidPathChars_Expression_PathTail = $TF.constructor($TS, ADT_PathTail, "mid", ADT_MidPathChars, "mid", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("PathTail")), $TS, p -> Collections.emptySet()), "tail");
       Expression_fieldProject_Expression_iter_seps_Field = $TF.constructor($TS, ADT_Expression, "fieldProject", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Field")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "fields");
       StringMiddle_template_MidStringChars_StringTemplate_StringMiddle = $TF.constructor($TS, ADT_StringMiddle, "template", ADT_MidStringChars, "mid", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringTemplate")), $TS, p -> Collections.emptySet()), "template", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "tail");
       IntegerLiteral_decimalIntegerLiteral_DecimalIntegerLiteral = $TF.constructor($TS, ADT_IntegerLiteral, "decimalIntegerLiteral", ADT_DecimalIntegerLiteral, "decimal");
       ProtocolPart_interpolated_PreProtocolChars_Expression_ProtocolTail = $TF.constructor($TS, ADT_ProtocolPart, "interpolated", ADT_PreProtocolChars, "pre", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ProtocolTail")), $TS, p -> Collections.emptySet()), "tail");
       Expression_equivalence_Expression_Expression = $TF.constructor($TS, ADT_Expression, "equivalence", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       StringTail_post_PostStringChars = $TF.constructor($TS, ADT_StringTail, "post", ADT_PostStringChars, "post");
       Expression_set_iter_star_seps_Expression = $TF.constructor($TS, ADT_Expression, "set", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "elements0");
       OptionalExpression_noExpression_ = $TF.constructor($TS, ADT_OptionalExpression, "noExpression");
       Literal_location_LocationLiteral = $TF.constructor($TS, ADT_Literal, "location", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("LocationLiteral")), $TS, p -> Collections.emptySet()), "locationLiteral");
       Assignable_ifDefinedOrDefault_Assignable_Expression = $TF.constructor($TS, ADT_Assignable, "ifDefinedOrDefault", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "receiver", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "defaultExpression");
       Label_empty_ = $TF.constructor($TS, ADT_Label, "empty");
       Import_default_ImportedModule = $TF.constructor($TS, ADT_Import, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ImportedModule")), $TS, p -> Collections.emptySet()), "module");
       Sym_column_Sym_IntegerLiteral = $TF.constructor($TS, ADT_Sym, "column", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("IntegerLiteral")), $TS, p -> Collections.emptySet()), "column");
       Expression_reducer_Expression_Expression_iter_seps_Expression = $TF.constructor($TS, ADT_Expression, "reducer", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "init", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "result", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators");
       BasicType_void_ = $TF.constructor($TS, ADT_BasicType, "void");
       Expression_stepRange_Expression_Expression_Expression = $TF.constructor($TS, ADT_Expression, "stepRange", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "first", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "second", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "last");
       Kind_function_ = $TF.constructor($TS, ADT_Kind, "function");
       Pattern_qualifiedName_QualifiedName = $TF.constructor($TS, ADT_Pattern, "qualifiedName", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "qualifiedName");
       BasicType_type_ = $TF.constructor($TS, ADT_BasicType, "type");
       Pattern_literal_Literal = $TF.constructor($TS, ADT_Pattern, "literal", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Literal")), $TS, p -> Collections.emptySet()), "literal");
       Literal_regExp_RegExpLiteral = $TF.constructor($TS, ADT_Literal, "regExp", ADT_RegExpLiteral, "regExpLiteral");
       StructuredType_default_BasicType_iter_seps_TypeArg = $TF.constructor($TS, ADT_StructuredType, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("BasicType")), $TS, p -> Collections.emptySet()), "basicType", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeArg")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "arguments");
       Command_declaration_Declaration = $TF.constructor($TS, ADT_Command, "declaration", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Declaration")), $TS, p -> Collections.emptySet()), "declaration");
       Statement_solve_iter_seps_QualifiedName_Bound_Statement = $TF.constructor($TS, ADT_Statement, "solve", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "variables", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Bound")), $TS, p -> Collections.emptySet()), "bound", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body");
       Pattern_typedVariableBecomes_Type_Name_Pattern = $TF.constructor($TS, ADT_Pattern, "typedVariableBecomes", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern");
       Assoc_left_ = $TF.constructor($TS, ADT_Assoc, "left");
       UserType_name_QualifiedName = $TF.constructor($TS, ADT_UserType, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name");
       Assignment_ifDefined_ = $TF.constructor($TS, ADT_Assignment, "ifDefined");
       ImportedModule_actualsRenaming_QualifiedName_ModuleActuals_Renamings = $TF.constructor($TS, ADT_ImportedModule, "actualsRenaming", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ModuleActuals")), $TS, p -> Collections.emptySet()), "actuals", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Renamings")), $TS, p -> Collections.emptySet()), "renamings");
       ShellCommand_unimport_QualifiedName = $TF.constructor($TS, ADT_ShellCommand, "unimport", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name");
       PathPart_nonInterpolated_PathChars = $TF.constructor($TS, ADT_PathPart, "nonInterpolated", ADT_PathChars, "pathChars");
       ShellCommand_test_ = $TF.constructor($TS, ADT_ShellCommand, "test");
       BasicType_int_ = $TF.constructor($TS, ADT_BasicType, "int");
       BasicType_listRelation_ = $TF.constructor($TS, ADT_BasicType, "listRelation");
       Expression_negation_Expression = $TF.constructor($TS, ADT_Expression, "negation", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "argument");
       DateTimeLiteral_dateAndTimeLiteral_DateAndTime = $TF.constructor($TS, ADT_DateTimeLiteral, "dateAndTimeLiteral", ADT_DateAndTime, "dateAndTime");
       Pattern_list_iter_star_seps_Pattern = $TF.constructor($TS, ADT_Pattern, "list", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "elements0");
       Visibility_default_ = $TF.constructor($TS, ADT_Visibility, "default");
       Parameters_varArgs_Formals_KeywordFormals = $TF.constructor($TS, ADT_Parameters, "varArgs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Formals")), $TS, p -> Collections.emptySet()), "formals", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordFormals")), $TS, p -> Collections.emptySet()), "keywordFormals");
       Assignable_constructor_Name_iter_seps_Assignable = $TF.constructor($TS, ADT_Assignable, "constructor", ADT_Name, "name", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "arguments");
       Expression_ifDefinedOtherwise_Expression_Expression = $TF.constructor($TS, ADT_Expression, "ifDefinedOtherwise", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Assignable_bracket_Assignable = $TF.constructor($TS, ADT_Assignable, "bracket", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "arg");
       LocalVariableDeclaration_default_Declarator = $TF.constructor($TS, ADT_LocalVariableDeclaration, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Declarator")), $TS, p -> Collections.emptySet()), "declarator");
       Statement_visit_Label_Visit = $TF.constructor($TS, ADT_Statement, "visit", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visit")), $TS, p -> Collections.emptySet()), "visit");
       StringMiddle_interpolated_MidStringChars_Expression_StringMiddle = $TF.constructor($TS, ADT_StringMiddle, "interpolated", ADT_MidStringChars, "mid", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "tail");
       Expression_list_iter_star_seps_Expression = $TF.constructor($TS, ADT_Expression, "list", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "elements0");
       Expression_asType_Type_Expression = $TF.constructor($TS, ADT_Expression, "asType", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "argument");
       Expression_closure_Type_Parameters_iter_seps_Statement = $TF.constructor($TS, ADT_Expression, "closure", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Parameters")), $TS, p -> Collections.emptySet()), "parameters", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "statements");
       Statement_append_DataTarget_Statement = $TF.constructor($TS, ADT_Statement, "append", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("DataTarget")), $TS, p -> Collections.emptySet()), "dataTarget", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       PathTail_post_PostPathChars = $TF.constructor($TS, ADT_PathTail, "post", ADT_PostPathChars, "post");
       DateTimeLiteral_timeLiteral_JustTime = $TF.constructor($TS, ADT_DateTimeLiteral, "timeLiteral", ADT_JustTime, "time");
       Pattern_splice_Pattern = $TF.constructor($TS, ADT_Pattern, "splice", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "argument");
       Class_simpleCharclass_iter_star_seps_Range = $TF.constructor($TS, ADT_Class, "simpleCharclass", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Range")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "ranges");
       DataTypeSelector_selector_QualifiedName_Name = $TF.constructor($TS, ADT_DataTypeSelector, "selector", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "sort", ADT_Name, "production");
       OptionalComma_default_str = $TF.constructor($TS, ADT_OptionalComma, "default", $TF.stringType());
       ConcretePart_newline_ = $TF.constructor($TS, ADT_ConcretePart, "newline");
       IntegerLiteral_octalIntegerLiteral_OctalIntegerLiteral = $TF.constructor($TS, ADT_IntegerLiteral, "octalIntegerLiteral", ADT_OctalIntegerLiteral, "octal");
       Prod_unlabeled_iter_star_seps_ProdModifier_iter_star_seps_Sym = $TF.constructor($TS, ADT_Prod, "unlabeled", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ProdModifier")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "modifiers", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "syms");
       Signature_withThrows_FunctionModifiers_Type_Name_Parameters_iter_seps_Type = $TF.constructor($TS, ADT_Signature, "withThrows", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionModifiers")), $TS, p -> Collections.emptySet()), "modifiers", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Parameters")), $TS, p -> Collections.emptySet()), "parameters", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "exceptions");
       Assignable_annotation_Assignable_Name = $TF.constructor($TS, ADT_Assignable, "annotation", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "receiver", ADT_Name, "annotation");
       Sym_characterClass_Class = $TF.constructor($TS, ADT_Sym, "characterClass", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "charClass");
       Expression_intersection_Expression_Expression = $TF.constructor($TS, ADT_Expression, "intersection", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Tags_default_iter_star_seps_Tag = $TF.constructor($TS, ADT_Tags, "default", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tag")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "tags");
       Declaration_data_Tags_Visibility_UserType_CommonKeywordParameters_iter_seps_Variant = $TF.constructor($TS, ADT_Declaration, "data", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("UserType")), $TS, p -> Collections.emptySet()), "user", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("CommonKeywordParameters")), $TS, p -> Collections.emptySet()), "commonKeywordParameters", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Variant")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("|")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "variants");
       Class_complement_Class = $TF.constructor($TS, ADT_Class, "complement", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "charClass");
       ShellCommand_history_ = $TF.constructor($TS, ADT_ShellCommand, "history");
       BasicType_num_ = $TF.constructor($TS, ADT_BasicType, "num");
       Declaration_alias_Tags_Visibility_UserType_Type = $TF.constructor($TS, ADT_Declaration, "alias", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("UserType")), $TS, p -> Collections.emptySet()), "user", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "base");
       BasicType_string_ = $TF.constructor($TS, ADT_BasicType, "string");
       Literal_dateTime_DateTimeLiteral = $TF.constructor($TS, ADT_Literal, "dateTime", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("DateTimeLiteral")), $TS, p -> Collections.emptySet()), "dateTimeLiteral");
       Pattern_reifiedType_Pattern_Pattern = $TF.constructor($TS, ADT_Pattern, "reifiedType", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "definitions");
       Expression_lessThanOrEq_Expression_Expression = $TF.constructor($TS, ADT_Expression, "lessThanOrEq", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Statement_for_Label_iter_seps_Expression_Statement = $TF.constructor($TS, ADT_Statement, "for", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body");
       Target_labeled_Name = $TF.constructor($TS, ADT_Target, "labeled", ADT_Name, "name");
       BasicType_value_ = $TF.constructor($TS, ADT_BasicType, "value");
       Expression_setAnnotation_Expression_Name_Expression = $TF.constructor($TS, ADT_Expression, "setAnnotation", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "value");
       Start_present_ = $TF.constructor($TS, ADT_Start, "present");
       ShellCommand_listModules_ = $TF.constructor($TS, ADT_ShellCommand, "listModules");
       Expression_getAnnotation_Expression_Name = $TF.constructor($TS, ADT_Expression, "getAnnotation", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", ADT_Name, "name");
       Kind_data_ = $TF.constructor($TS, ADT_Kind, "data");
       Prod_associativityGroup_Assoc_Prod = $TF.constructor($TS, ADT_Prod, "associativityGroup", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assoc")), $TS, p -> Collections.emptySet()), "associativity", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "group");
       Statement_variableDeclaration_LocalVariableDeclaration = $TF.constructor($TS, ADT_Statement, "variableDeclaration", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("LocalVariableDeclaration")), $TS, p -> Collections.emptySet()), "declaration");
       Expression_comprehension_Comprehension = $TF.constructor($TS, ADT_Expression, "comprehension", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Comprehension")), $TS, p -> Collections.emptySet()), "comprehension");
       Expression_splice_Expression = $TF.constructor($TS, ADT_Expression, "splice", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "argument");
       Sym_empty_ = $TF.constructor($TS, ADT_Sym, "empty");
       Replacement_unconditional_Expression = $TF.constructor($TS, ADT_Replacement, "unconditional", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "replacementExpression");
       Declaration_dataAbstract_Tags_Visibility_UserType_CommonKeywordParameters = $TF.constructor($TS, ADT_Declaration, "dataAbstract", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("UserType")), $TS, p -> Collections.emptySet()), "user", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("CommonKeywordParameters")), $TS, p -> Collections.emptySet()), "commonKeywordParameters");
       Sym_iterSep_Sym_Sym = $TF.constructor($TS, ADT_Sym, "iterSep", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "sep");
       ConcretePart_hole_ConcreteHole = $TF.constructor($TS, ADT_ConcretePart, "hole", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ConcreteHole")), $TS, p -> Collections.emptySet()), "hole");
       BasicType_map_ = $TF.constructor($TS, ADT_BasicType, "map");
       Sym_labeled_Sym_NonterminalLabel = $TF.constructor($TS, ADT_Sym, "labeled", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", ADT_NonterminalLabel, "label");
       Expression_slice_Expression_OptionalExpression_OptionalExpression = $TF.constructor($TS, ADT_Expression, "slice", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optFirst", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optLast");
       Sym_start_Nonterminal = $TF.constructor($TS, ADT_Sym, "start", ADT_Nonterminal, "nonterminal");
       Assignable_sliceStep_Assignable_OptionalExpression_Expression_OptionalExpression = $TF.constructor($TS, ADT_Assignable, "sliceStep", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "receiver", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optFirst", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "second", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optLast");
       TypeArg_named_Type_Name = $TF.constructor($TS, ADT_TypeArg, "named", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", ADT_Name, "name");
       Header_default_Tags_QualifiedName_iter_star_seps_Import = $TF.constructor($TS, ADT_Header, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Import")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "imports");
       Expression_ifThenElse_Expression_Expression_Expression = $TF.constructor($TS, ADT_Expression, "ifThenElse", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "condition", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "thenExp", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "elseExp");
       Case_default_Statement = $TF.constructor($TS, ADT_Case, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       Statement_tryFinally_Statement_iter_seps_Catch_Statement = $TF.constructor($TS, ADT_Statement, "tryFinally", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Catch")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "handlers", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "finallyBody");
       Declaration_variable_Tags_Visibility_Type_iter_seps_Variable = $TF.constructor($TS, ADT_Declaration, "variable", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Variable")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "variables");
       Target_empty_ = $TF.constructor($TS, ADT_Target, "empty");
       FunctionDeclaration_expression_Tags_Visibility_Signature_Expression = $TF.constructor($TS, ADT_FunctionDeclaration, "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Signature")), $TS, p -> Collections.emptySet()), "signature", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Sym_caseInsensitiveLiteral_CaseInsensitiveStringConstant = $TF.constructor($TS, ADT_Sym, "caseInsensitiveLiteral", ADT_CaseInsensitiveStringConstant, "cistring");
       Pattern_anti_Pattern = $TF.constructor($TS, ADT_Pattern, "anti", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern");
       ModuleParameters_default_iter_seps_TypeVar = $TF.constructor($TS, ADT_ModuleParameters, "default", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeVar")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "parameters");
       Prod_all_Prod_Prod = $TF.constructor($TS, ADT_Prod, "all", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "rhs");
       BasicType_relation_ = $TF.constructor($TS, ADT_BasicType, "relation");
       Class_difference_Class_Class = $TF.constructor($TS, ADT_Class, "difference", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "rhs");
       FunctionBody_default_iter_star_seps_Statement = $TF.constructor($TS, ADT_FunctionBody, "default", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "statements");
       Case_patternWithAction_PatternWithAction = $TF.constructor($TS, ADT_Case, "patternWithAction", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("PatternWithAction")), $TS, p -> Collections.emptySet()), "patternWithAction");
       Assignment_default_ = $TF.constructor($TS, ADT_Assignment, "default");
       Renaming_default_Name_Name = $TF.constructor($TS, ADT_Renaming, "default", ADT_Name, "from", ADT_Name, "to");
       Expression_subtraction_Expression_Expression = $TF.constructor($TS, ADT_Expression, "subtraction", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       StringTemplate_doWhile_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement_Expression = $TF.constructor($TS, ADT_StringTemplate, "doWhile", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "preStats", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "body", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "postStats", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "condition");
       Bound_default_Expression = $TF.constructor($TS, ADT_Bound, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Prod_reference_Name = $TF.constructor($TS, ADT_Prod, "reference", ADT_Name, "referenced");
       Expression_reifyType_Type = $TF.constructor($TS, ADT_Expression, "reifyType", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type");
       Assignable_fieldAccess_Assignable_Name = $TF.constructor($TS, ADT_Assignable, "fieldAccess", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "receiver", ADT_Name, "field");
       BasicType_node_ = $TF.constructor($TS, ADT_BasicType, "node");
       Expression_remainder_Expression_Expression = $TF.constructor($TS, ADT_Expression, "remainder", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Statement_while_Label_iter_seps_Expression_Statement = $TF.constructor($TS, ADT_Statement, "while", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "conditions", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body");
       Expression_in_Expression_Expression = $TF.constructor($TS, ADT_Expression, "in", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Commands_commandlist_iter_seps_start_EvalCommand = $TF.constructor($TS, ADT_Commands, "commandlist", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Start, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("EvalCommand"))), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "commands");
       BasicType_set_ = $TF.constructor($TS, ADT_BasicType, "set");
       Import_extend_ImportedModule = $TF.constructor($TS, ADT_Import, "extend", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ImportedModule")), $TS, p -> Collections.emptySet()), "module");
       ModuleActuals_default_iter_seps_Type = $TF.constructor($TS, ADT_ModuleActuals, "default", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "types");
       Start_absent_ = $TF.constructor($TS, ADT_Start, "absent");
       Statement_insert_DataTarget_Statement = $TF.constructor($TS, ADT_Statement, "insert", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("DataTarget")), $TS, p -> Collections.emptySet()), "dataTarget", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       Statement_functionDeclaration_FunctionDeclaration = $TF.constructor($TS, ADT_Statement, "functionDeclaration", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionDeclaration")), $TS, p -> Collections.emptySet()), "functionDeclaration");
       IntegerLiteral_hexIntegerLiteral_HexIntegerLiteral = $TF.constructor($TS, ADT_IntegerLiteral, "hexIntegerLiteral", ADT_HexIntegerLiteral, "hex");
       ProdModifier_bracket_ = $TF.constructor($TS, ADT_ProdModifier, "bracket");
       Expression_bracket_Expression = $TF.constructor($TS, ADT_Expression, "bracket", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       ProdModifier_tag_Tag = $TF.constructor($TS, ADT_ProdModifier, "tag", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tag")), $TS, p -> Collections.emptySet()), "tag");
       Assoc_right_ = $TF.constructor($TS, ADT_Assoc, "right");
       Expression_any_iter_seps_Expression = $TF.constructor($TS, ADT_Expression, "any", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators");
       ConcretePart_bs_ = $TF.constructor($TS, ADT_ConcretePart, "bs");
       Expression_literal_Literal = $TF.constructor($TS, ADT_Expression, "literal", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Literal")), $TS, p -> Collections.emptySet()), "literal");
       Expression_lessThan_Expression_Expression = $TF.constructor($TS, ADT_Expression, "lessThan", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Statement_switch_Label_Expression_iter_seps_Case = $TF.constructor($TS, ADT_Statement, "switch", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Case")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "cases");
       Bound_empty_ = $TF.constructor($TS, ADT_Bound, "empty");
       StringTemplate_ifThenElse_iter_seps_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement = $TF.constructor($TS, ADT_StringTemplate, "ifThenElse", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "conditions", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "preStatsThen", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "thenString", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "postStatsThen", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "preStatsElse", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "elseString", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "postStatsElse");
       ShellCommand_undeclare_QualifiedName = $TF.constructor($TS, ADT_ShellCommand, "undeclare", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name");
       Catch_default_Statement = $TF.constructor($TS, ADT_Catch, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body");
       Import_syntax_SyntaxDefinition = $TF.constructor($TS, ADT_Import, "syntax", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("SyntaxDefinition")), $TS, p -> Collections.emptySet()), "syntax");
       PatternWithAction_arbitrary_Pattern_Statement = $TF.constructor($TS, ADT_PatternWithAction, "arbitrary", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       Pattern_callOrTree_Pattern_iter_star_seps_Pattern_KeywordArguments_Pattern = $TF.constructor($TS, ADT_Pattern, "callOrTree", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "expression", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "arguments", ADT_KeywordArguments_1, "keywordArguments");
       Expression_match_Pattern_Expression = $TF.constructor($TS, ADT_Expression, "match", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Statement_assert_Expression = $TF.constructor($TS, ADT_Statement, "assert", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Expression_transitiveClosure_Expression = $TF.constructor($TS, ADT_Expression, "transitiveClosure", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "argument");
       Formals_default_iter_star_seps_Pattern = $TF.constructor($TS, ADT_Formals, "default", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "formals");
       UnicodeEscape_utf16_ = $TF.constructor($TS, ADT_UnicodeEscape, "utf16");
       Expression_callOrTree_Expression_iter_star_seps_Expression_KeywordArguments_Expression = $TF.constructor($TS, ADT_Expression, "callOrTree", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "arguments", ADT_KeywordArguments_1, "keywordArguments");
       Literal_integer_IntegerLiteral = $TF.constructor($TS, ADT_Literal, "integer", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("IntegerLiteral")), $TS, p -> Collections.emptySet()), "integerLiteral");
       Statement_fail_Target = $TF.constructor($TS, ADT_Statement, "fail", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Target")), $TS, p -> Collections.emptySet()), "target");
       StringTemplate_while_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement = $TF.constructor($TS, ADT_StringTemplate, "while", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "condition", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "preStats", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "body", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "postStats");
       Expression_or_Expression_Expression = $TF.constructor($TS, ADT_Expression, "or", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Expression_is_Expression_Name = $TF.constructor($TS, ADT_Expression, "is", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", ADT_Name, "name");
       Strategy_topDownBreak_ = $TF.constructor($TS, ADT_Strategy, "topDownBreak");
       Visit_givenStrategy_Strategy_Expression_iter_seps_Case = $TF.constructor($TS, ADT_Visit, "givenStrategy", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Strategy")), $TS, p -> Collections.emptySet()), "strategy", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "subject", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Case")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "cases");
       ConcretePart_bq_ = $TF.constructor($TS, ADT_ConcretePart, "bq");
       Expression_fieldUpdate_Expression_Name_Expression = $TF.constructor($TS, ADT_Expression, "fieldUpdate", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", ADT_Name, "key", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "replacement");
       Output_stderrOutput_ = $TF.constructor($TS, ADT_Output, "stderrOutput");
       ImportedModule_default_QualifiedName = $TF.constructor($TS, ADT_ImportedModule, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name");
       Type_variable_TypeVar = $TF.constructor($TS, ADT_Type, "variable", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeVar")), $TS, p -> Collections.emptySet()), "typeVar");
       Pattern_map_iter_star_seps_Mapping_Pattern = $TF.constructor($TS, ADT_Pattern, "map", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Mapping")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "mappings");
       FunctionDeclaration_default_Tags_Visibility_Signature_FunctionBody = $TF.constructor($TS, ADT_FunctionDeclaration, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Signature")), $TS, p -> Collections.emptySet()), "signature", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionBody")), $TS, p -> Collections.emptySet()), "body");
       Type_user_UserType = $TF.constructor($TS, ADT_Type, "user", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("UserType")), $TS, p -> Collections.emptySet()), "user");
       Kind_variable_ = $TF.constructor($TS, ADT_Kind, "variable");
       Expression_it_Expression = $TF.constructor($TS, ADT_Expression, "it", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()));
       Module_default_Header_Body = $TF.constructor($TS, ADT_Module, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Header")), $TS, p -> Collections.emptySet()), "header", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Body")), $TS, p -> Collections.emptySet()), "body");
       Statement_assertWithMessage_Expression_Expression = $TF.constructor($TS, ADT_Statement, "assertWithMessage", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "message");
       Sym_endOfLine_Sym = $TF.constructor($TS, ADT_Sym, "endOfLine", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       Command_expression_Expression = $TF.constructor($TS, ADT_Command, "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Label_default_Name = $TF.constructor($TS, ADT_Label, "default", ADT_Name, "name");
       Statement_ifThen_Label_iter_seps_Expression_Statement = $TF.constructor($TS, ADT_Statement, "ifThen", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "conditions", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "thenStatement");
       Mapping_1_default_ = $TF.constructor($TS, ADT_Mapping_1, "default");
       Statement_globalDirective_Type_iter_seps_QualifiedName = $TF.constructor($TS, ADT_Statement, "globalDirective", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "names");
       LocationLiteral_default_ProtocolPart_PathPart = $TF.constructor($TS, ADT_LocationLiteral, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ProtocolPart")), $TS, p -> Collections.emptySet()), "protocolPart", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("PathPart")), $TS, p -> Collections.emptySet()), "pathPart");
       ConcretePart_lt_ = $TF.constructor($TS, ADT_ConcretePart, "lt");
       Field_index_IntegerLiteral = $TF.constructor($TS, ADT_Field, "index", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("IntegerLiteral")), $TS, p -> Collections.emptySet()), "fieldIndex");
       Expression_implication_Expression_Expression = $TF.constructor($TS, ADT_Expression, "implication", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Tag_default_Name_TagString = $TF.constructor($TS, ADT_Tag, "default", ADT_Name, "name", ADT_TagString, "contents");
       Expression_nonEmptyBlock_iter_seps_Statement = $TF.constructor($TS, ADT_Expression, "nonEmptyBlock", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "statements");
       FunctionModifier_test_ = $TF.constructor($TS, ADT_FunctionModifier, "test");
       Expression_greaterThan_Expression_Expression = $TF.constructor($TS, ADT_Expression, "greaterThan", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Class_union_Class_Class = $TF.constructor($TS, ADT_Class, "union", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Class")), $TS, p -> Collections.emptySet()), "rhs");
       BasicType_rational_ = $TF.constructor($TS, ADT_BasicType, "rational");
       LocalVariableDeclaration_dynamic_Declarator = $TF.constructor($TS, ADT_LocalVariableDeclaration, "dynamic", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Declarator")), $TS, p -> Collections.emptySet()), "declarator");
       Strategy_outermost_ = $TF.constructor($TS, ADT_Strategy, "outermost");
       Type_basic_BasicType = $TF.constructor($TS, ADT_Type, "basic", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("BasicType")), $TS, p -> Collections.emptySet()), "basic");
       Statement_nonEmptyBlock_Label_iter_seps_Statement = $TF.constructor($TS, ADT_Statement, "nonEmptyBlock", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "statements");
       Parameters_default_Formals_KeywordFormals = $TF.constructor($TS, ADT_Parameters, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Formals")), $TS, p -> Collections.emptySet()), "formals", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordFormals")), $TS, p -> Collections.emptySet()), "keywordFormals");
       Sym_alternative_Sym_iter_seps_Sym = $TF.constructor($TS, ADT_Sym, "alternative", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "first", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("|")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "alternatives");
       Sym_follow_Sym_Sym = $TF.constructor($TS, ADT_Sym, "follow", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "match");
       Expression_product_Expression_Expression = $TF.constructor($TS, ADT_Expression, "product", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       ShellCommand_quit_ = $TF.constructor($TS, ADT_ShellCommand, "quit");
       Expression_addition_Expression_Expression = $TF.constructor($TS, ADT_Expression, "addition", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       ImportedModule_actuals_QualifiedName_ModuleActuals = $TF.constructor($TS, ADT_ImportedModule, "actuals", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ModuleActuals")), $TS, p -> Collections.emptySet()), "actuals");
       TypeArg_default_Type = $TF.constructor($TS, ADT_TypeArg, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type");
       Expression_all_iter_seps_Expression = $TF.constructor($TS, ADT_Expression, "all", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators");
       Pattern_asType_Type_Pattern = $TF.constructor($TS, ADT_Pattern, "asType", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "argument");
       Visibility_public_ = $TF.constructor($TS, ADT_Visibility, "public");
       ConcreteHole_one_Sym_Name = $TF.constructor($TS, ADT_ConcreteHole, "one", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", ADT_Name, "name");
       Tag_empty_Name = $TF.constructor($TS, ADT_Tag, "empty", ADT_Name, "name");
       KeywordArguments_1_default_OptionalComma_iter_seps_KeywordArgument_1 = $TF.constructor($TS, ADT_KeywordArguments_1, "default", ADT_OptionalComma, "optionalComma", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordArgument")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "keywordArgumentList");
       CommonKeywordParameters_absent_ = $TF.constructor($TS, ADT_CommonKeywordParameters, "absent");
       Range_fromTo_Char_Char = $TF.constructor($TS, ADT_Range, "fromTo", ADT_Char, "start", ADT_Char, "end");
       Command_statement_Statement = $TF.constructor($TS, ADT_Command, "statement", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       EvalCommand_import_Import = $TF.constructor($TS, ADT_EvalCommand, "import", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Import")), $TS, p -> Collections.emptySet()), "imported");
       Sym_unequal_Sym_Sym = $TF.constructor($TS, ADT_Sym, "unequal", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "match");
       Comprehension_list_iter_seps_Expression_iter_seps_Expression = $TF.constructor($TS, ADT_Comprehension, "list", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "results", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators");
       Catch_binding_Pattern_Statement = $TF.constructor($TS, ADT_Catch, "binding", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body");
       Statement_break_Target = $TF.constructor($TS, ADT_Statement, "break", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Target")), $TS, p -> Collections.emptySet()), "target");
       SyntaxDefinition_lexical_Sym_Prod = $TF.constructor($TS, ADT_SyntaxDefinition, "lexical", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "defined", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "production");
       Assignable_slice_Assignable_OptionalExpression_OptionalExpression = $TF.constructor($TS, ADT_Assignable, "slice", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "receiver", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optFirst", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("OptionalExpression")), $TS, p -> Collections.emptySet()), "optLast");
       Sym_notPrecede_Sym_Sym = $TF.constructor($TS, ADT_Sym, "notPrecede", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "match", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       Assoc_associative_ = $TF.constructor($TS, ADT_Assoc, "associative");
       Expression_map_iter_star_seps_Mapping_Expression = $TF.constructor($TS, ADT_Expression, "map", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Mapping")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "mappings");
       DataTarget_empty_ = $TF.constructor($TS, ADT_DataTarget, "empty");
       EvalCommand_statement_Statement = $TF.constructor($TS, ADT_EvalCommand, "statement", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       Expression_range_Expression_Expression = $TF.constructor($TS, ADT_Expression, "range", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "first", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "last");
       Expression_appendAfter_Expression_Expression = $TF.constructor($TS, ADT_Expression, "appendAfter", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Expression_enumerator_Pattern_Expression = $TF.constructor($TS, ADT_Expression, "enumerator", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Sym_notFollow_Sym_Sym = $TF.constructor($TS, ADT_Sym, "notFollow", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "match");
       ShellCommand_clear_ = $TF.constructor($TS, ADT_ShellCommand, "clear");
       Assignment_append_ = $TF.constructor($TS, ADT_Assignment, "append");
       Type_function_FunctionType = $TF.constructor($TS, ADT_Type, "function", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionType")), $TS, p -> Collections.emptySet()), "function");
       Assignable_subscript_Assignable_Expression = $TF.constructor($TS, ADT_Assignable, "subscript", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "receiver", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "subscript");
       KeywordFormals_none_ = $TF.constructor($TS, ADT_KeywordFormals, "none");
       Command_import_Import = $TF.constructor($TS, ADT_Command, "import", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Import")), $TS, p -> Collections.emptySet()), "imported");
       Sym_startOfLine_Sym = $TF.constructor($TS, ADT_Sym, "startOfLine", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       FunctionDeclaration_abstract_Tags_Visibility_Signature = $TF.constructor($TS, ADT_FunctionDeclaration, "abstract", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Signature")), $TS, p -> Collections.emptySet()), "signature");
       Kind_anno_ = $TF.constructor($TS, ADT_Kind, "anno");
       Expression_noMatch_Pattern_Expression = $TF.constructor($TS, ADT_Expression, "noMatch", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression");
       Declaration_function_FunctionDeclaration = $TF.constructor($TS, ADT_Declaration, "function", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionDeclaration")), $TS, p -> Collections.emptySet()), "functionDeclaration");
       Expression_visit_Label_Visit = $TF.constructor($TS, ADT_Expression, "visit", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Label")), $TS, p -> Collections.emptySet()), "label", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visit")), $TS, p -> Collections.emptySet()), "visit");
       StringTail_midInterpolated_MidStringChars_Expression_StringTail = $TF.constructor($TS, ADT_StringTail, "midInterpolated", ADT_MidStringChars, "mid", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringTail")), $TS, p -> Collections.emptySet()), "tail");
       SyntaxDefinition_language_Start_Sym_Prod = $TF.constructor($TS, ADT_SyntaxDefinition, "language", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Start")), $TS, p -> Collections.emptySet()), "start", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "defined", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "production");
       BasicType_bool_ = $TF.constructor($TS, ADT_BasicType, "bool");
       Assignment_intersection_ = $TF.constructor($TS, ADT_Assignment, "intersection");
       Sym_sequence_Sym_iter_seps_Sym = $TF.constructor($TS, ADT_Sym, "sequence", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "first", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "sequence");
       Assignment_product_ = $TF.constructor($TS, ADT_Assignment, "product");
       Prod_first_Prod_Prod = $TF.constructor($TS, ADT_Prod, "first", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Prod")), $TS, p -> Collections.emptySet()), "rhs");
       Pattern_concrete_Concrete = $TF.constructor($TS, ADT_Pattern, "concrete", ADT_Concrete, "concrete");
       FunctionModifiers_modifierlist_iter_star_seps_FunctionModifier = $TF.constructor($TS, ADT_FunctionModifiers, "modifierlist", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("FunctionModifier")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "modifiers");
       Expression_insertBefore_Expression_Expression = $TF.constructor($TS, ADT_Expression, "insertBefore", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Toplevel_givenVisibility_Declaration = $TF.constructor($TS, ADT_Toplevel, "givenVisibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Declaration")), $TS, p -> Collections.emptySet()), "declaration");
       Statement_emptyStatement_ = $TF.constructor($TS, ADT_Statement, "emptyStatement");
       Declaration_annotation_Tags_Visibility_Type_Type_Name = $TF.constructor($TS, ADT_Declaration, "annotation", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "annoType", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "onType", ADT_Name, "name");
       DataTarget_labeled_Name = $TF.constructor($TS, ADT_DataTarget, "labeled", ADT_Name, "label");
       PathPart_interpolated_PrePathChars_Expression_PathTail = $TF.constructor($TS, ADT_PathPart, "interpolated", ADT_PrePathChars, "pre", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("PathTail")), $TS, p -> Collections.emptySet()), "tail");
       FunctionModifier_java_ = $TF.constructor($TS, ADT_FunctionModifier, "java");
       ProtocolTail_mid_MidProtocolChars_Expression_ProtocolTail = $TF.constructor($TS, ADT_ProtocolTail, "mid", ADT_MidProtocolChars, "mid", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ProtocolTail")), $TS, p -> Collections.emptySet()), "tail");
       Variant_nAryConstructor_Name_iter_star_seps_TypeArg_KeywordFormals = $TF.constructor($TS, ADT_Variant, "nAryConstructor", ADT_Name, "name", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("TypeArg")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "arguments", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordFormals")), $TS, p -> Collections.emptySet()), "keywordArguments");
       Pattern_set_iter_star_seps_Pattern = $TF.constructor($TS, ADT_Pattern, "set", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "elements0");
       Expression_division_Expression_Expression = $TF.constructor($TS, ADT_Expression, "division", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Sym_except_Sym_NonterminalLabel = $TF.constructor($TS, ADT_Sym, "except", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol", ADT_NonterminalLabel, "label");
       Type_selector_DataTypeSelector = $TF.constructor($TS, ADT_Type, "selector", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("DataTypeSelector")), $TS, p -> Collections.emptySet()), "selector");
       KeywordFormals_default_OptionalComma_iter_seps_KeywordFormal = $TF.constructor($TS, ADT_KeywordFormals, "default", ADT_OptionalComma, "optionalComma", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordFormal")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "keywordFormalList");
       Expression_notIn_Expression_Expression = $TF.constructor($TS, ADT_Expression, "notIn", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Sym_parametrized_Nonterminal_iter_seps_Sym = $TF.constructor($TS, ADT_Sym, "parametrized", ADT_Nonterminal, "nonterminal", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "parameters");
       TypeVar_bounded_Name_Type = $TF.constructor($TS, ADT_TypeVar, "bounded", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "bound");
       BasicType_loc_ = $TF.constructor($TS, ADT_BasicType, "loc");
       Literal_real_RealLiteral = $TF.constructor($TS, ADT_Literal, "real", ADT_RealLiteral, "realLiteral");
       KeywordArgument_1_default_Name = $TF.constructor($TS, ADT_KeywordArgument_1, "default", ADT_Name, "name");
       Pattern_typedVariable_Type_Name = $TF.constructor($TS, ADT_Pattern, "typedVariable", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", ADT_Name, "name");
       Assignable_variable_QualifiedName = $TF.constructor($TS, ADT_Assignable, "variable", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "qualifiedName");
       Header_parameters_Tags_QualifiedName_ModuleParameters_iter_star_seps_Import = $TF.constructor($TS, ADT_Header, "parameters", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ModuleParameters")), $TS, p -> Collections.emptySet()), "params", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Import")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "imports");
       StringTemplate_for_iter_seps_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement = $TF.constructor($TS, ADT_StringTemplate, "for", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "generators", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "preStats", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "body", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "postStats");
       StringMiddle_mid_MidStringChars = $TF.constructor($TS, ADT_StringMiddle, "mid", ADT_MidStringChars, "mid");
       Import_external_QualifiedName_LocationLiteral = $TF.constructor($TS, ADT_Import, "external", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("LocationLiteral")), $TS, p -> Collections.emptySet()), "at");
       Body_toplevels_iter_star_seps_Toplevel = $TF.constructor($TS, ADT_Body, "toplevels", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Toplevel")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "toplevels");
       Statement_try_Statement_iter_seps_Catch = $TF.constructor($TS, ADT_Statement, "try", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "body", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Catch")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "handlers");
       Kind_view_ = $TF.constructor($TS, ADT_Kind, "view");
       Replacement_conditional_Expression_iter_seps_Expression = $TF.constructor($TS, ADT_Replacement, "conditional", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "replacementExpression", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "conditions");
       DateTimeLiteral_dateLiteral_JustDate = $TF.constructor($TS, ADT_DateTimeLiteral, "dateLiteral", ADT_JustDate, "date");
       Variable_unInitialized_Name = $TF.constructor($TS, ADT_Variable, "unInitialized", ADT_Name, "name");
       Sym_literal_StringConstant = $TF.constructor($TS, ADT_Sym, "literal", ADT_StringConstant, "string");
       TypeVar_free_Name = $TF.constructor($TS, ADT_TypeVar, "free", ADT_Name, "name");
       Declarator_default_Type_iter_seps_Variable = $TF.constructor($TS, ADT_Declarator, "default", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $TS, p -> Collections.emptySet()), "type", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Variable")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "variables");
       Declaration_tag_Tags_Visibility_Kind_Name_iter_seps_Type = $TF.constructor($TS, ADT_Declaration, "tag", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Tags")), $TS, p -> Collections.emptySet()), "tags", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Visibility")), $TS, p -> Collections.emptySet()), "visibility", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Kind")), $TS, p -> Collections.emptySet()), "kind", ADT_Name, "name", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "types");
       Expression_fieldAccess_Expression_Name = $TF.constructor($TS, ADT_Expression, "fieldAccess", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", ADT_Name, "field");
       CommonKeywordParameters_present_iter_seps_KeywordFormal = $TF.constructor($TS, ADT_CommonKeywordParameters, "present", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("KeywordFormal")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "keywordFormalList");
       Type_symbol_Sym = $TF.constructor($TS, ADT_Type, "symbol", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       Sym_parameter_Nonterminal = $TF.constructor($TS, ADT_Sym, "parameter", ADT_Nonterminal, "nonterminal");
       Expression_voidClosure_Parameters_iter_star_seps_Statement = $TF.constructor($TS, ADT_Expression, "voidClosure", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Parameters")), $TS, p -> Collections.emptySet()), "parameters", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "statements0");
       Command_shell_ShellCommand = $TF.constructor($TS, ADT_Command, "shell", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("ShellCommand")), $TS, p -> Collections.emptySet()), "command");
       Strategy_bottomUp_ = $TF.constructor($TS, ADT_Strategy, "bottomUp");
       Pattern_tuple_iter_seps_Pattern = $TF.constructor($TS, ADT_Pattern, "tuple", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "elements");
       Sym_nonterminal_Nonterminal = $TF.constructor($TS, ADT_Sym, "nonterminal", ADT_Nonterminal, "nonterminal");
       Assignment_addition_ = $TF.constructor($TS, ADT_Assignment, "addition");
       Statement_assignment_Assignable_Assignment_Statement = $TF.constructor($TS, ADT_Statement, "assignment", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignable")), $TS, p -> Collections.emptySet()), "assignable", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Assignment")), $TS, p -> Collections.emptySet()), "operator", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       Pattern_splicePlus_Pattern = $TF.constructor($TS, ADT_Pattern, "splicePlus", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "argument");
       Statement_throw_Statement = $TF.constructor($TS, ADT_Statement, "throw", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $TS, p -> Collections.emptySet()), "statement");
       Pattern_descendant_Pattern = $TF.constructor($TS, ADT_Pattern, "descendant", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern");
       ShellCommand_listDeclarations_ = $TF.constructor($TS, ADT_ShellCommand, "listDeclarations");
       Expression_negative_Expression = $TF.constructor($TS, ADT_Expression, "negative", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "argument");
       Pattern_variableBecomes_Name_Pattern = $TF.constructor($TS, ADT_Pattern, "variableBecomes", ADT_Name, "name", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Pattern")), $TS, p -> Collections.emptySet()), "pattern");
       Assoc_nonAssociative_ = $TF.constructor($TS, ADT_Assoc, "nonAssociative");
       Sym_iter_Sym = $TF.constructor($TS, ADT_Sym, "iter", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       Expression_and_Expression_Expression = $TF.constructor($TS, ADT_Expression, "and", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "lhs", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "rhs");
       Kind_alias_ = $TF.constructor($TS, ADT_Kind, "alias");
       Type_structured_StructuredType = $TF.constructor($TS, ADT_Type, "structured", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StructuredType")), $TS, p -> Collections.emptySet()), "structured");
       Sym_precede_Sym_Sym = $TF.constructor($TS, ADT_Sym, "precede", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "match", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Sym")), $TS, p -> Collections.emptySet()), "symbol");
       Assignment_subtraction_ = $TF.constructor($TS, ADT_Assignment, "subtraction");
       Expression_isDefined_Expression = $TF.constructor($TS, ADT_Expression, "isDefined", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "argument");
       QualifiedName_default_iter_seps_Name = $TF.constructor($TS, ADT_QualifiedName, "default", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Lex, $RVF.string("Name")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string("::")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "names");
       Expression_subscript_Expression_iter_seps_Expression = $TF.constructor($TS, ADT_Expression, "subscript", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "expression", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "subscripts");
       StringTemplate_ifThen_iter_seps_Expression_iter_star_seps_Statement_StringMiddle_iter_star_seps_Statement = $TF.constructor($TS, ADT_StringTemplate, "ifThen", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "conditions", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "preStats", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringMiddle")), $TS, p -> Collections.emptySet()), "body", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterStarSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Statement")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "postStats");
       Kind_tag_ = $TF.constructor($TS, ADT_Kind, "tag");
       Field_name_Name = $TF.constructor($TS, ADT_Field, "name", ADT_Name, "fieldName");
       ConcretePart_text_str = $TF.constructor($TS, ADT_ConcretePart, "text", $TF.stringType());
       EvalCommand_output_Output = $TF.constructor($TS, ADT_EvalCommand, "output", ADT_Output);
       UserType_parametric_QualifiedName_iter_seps_Type = $TF.constructor($TS, ADT_UserType, "parametric", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("QualifiedName")), $TS, p -> Collections.emptySet()), "name", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Type")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST")), $RVF.constructor(RascalValueFactory.Symbol_Lit, $RVF.string(",")), $RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "parameters");
       StringLiteral_template_PreStringChars_StringTemplate_StringTail = $TF.constructor($TS, ADT_StringLiteral, "template", ADT_PreStringChars, "pre", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringTemplate")), $TS, p -> Collections.emptySet()), "template", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("StringTail")), $TS, p -> Collections.emptySet()), "tail");
       Statement_continue_Target = $TF.constructor($TS, ADT_Statement, "continue", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Target")), $TS, p -> Collections.emptySet()), "target");
       Visit_defaultStrategy_Expression_iter_seps_Case = $TF.constructor($TS, ADT_Visit, "defaultStrategy", $TF.fromSymbol($RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Expression")), $TS, p -> Collections.emptySet()), "subject", $RTF.nonTerminalType($RVF.constructor(RascalValueFactory.Symbol_IterSeps, $RVF.constructor(RascalValueFactory.Symbol_Sort, $RVF.string("Case")), $RVF.list($RVF.constructor(RascalValueFactory.Symbol_Layouts, $RVF.string("LAYOUTLIST"))))), "cases");
    
       
       
    }
    
    
    public static void main(String[] args) {
      throw new RuntimeException("No function `main` found in Rascal module `lang::rascal::syntax::Rascal`");
    }
}