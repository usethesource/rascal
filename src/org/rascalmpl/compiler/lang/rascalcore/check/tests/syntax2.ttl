test SynSynOverloadOk [[
    module A 
        syntax A = "a"; 
        syntax A = "b";
]]

test LexLexOverloadOk [[
    module A 
        lexical A = "a"; 
        lexical A = "b";
]]

test LayoutLayoutOverloadOk [[
    module A 
        layout A = "a"; 
        layout A = "b";
]]

test LexSynOverloadNotOk [[
    module A 
        lexical A = [a-z]+;
        syntax A = "a"; 
]] expect { "Double declaration of `A`"}

test LexLayoutOverloadNotOk [[
    module A 
        lexical A = [a-z]+;
        layout A = "a"; 
]] expect { "Double declaration of `A`"}


test LexKeywordOverloadNotOk [[
    module A 
        lexical A = [a-z]+;
        keyword A = "a"; 
]] expect { "Double declaration of `A`"}


test DataLexOverloadOk [[
    module A 
        lexical A = [a-z]+;
        data A = a(); 
]]

test DataSynOverloadOk [[
    module A 
        syntax A = [a-z]+;
        data A = a(); 
       
]]

test DataLayoutOverloadOk [[
    module A 
        layout A = [a-z]+;
        data A = a(); 
]]

test DataKeywordOverloadOk [[
    module A 
        keyword A = "if";
        data A = a(); 
]]

test NestingLexicalOk [[ 
    module A 
        lexical Id = [a-z]+;
        syntax EXP = Id; 
]]

test InvertedLexicalNestingOk [[
    module A 
        syntax EXP = "a"; 
        lexical Id = [a-z]+ | "-" EXP;
]]

test LexicalInLayoutOk [[
    module A 
        syntax EXP = "a"; 
        lexical Id = [a-z]+;
        layout WS = [\ \t\n]* | "/*" Id+ "*/";
]]

test MissingNonterminal [[ 
    module A 
        syntax EXP = "a" | EXP "+" E; 
        data E = e();
]] expect { "Undefined lexical, alias, layout, keyword or nonterminal `E`" }

test MayNotBeginWithLayout [[ 
    module A 
        layout L = " ";
        syntax EXP = L "a" | EXP "+" EXP; 
]] expect { "Layout type `L` not allowed at begin of production" }

test MayNotEndWithLayout [[ 
    module A 
        layout L = " ";
        syntax EXP = "a" L | EXP "+" EXP; 
]] expect { "Layout type `L` not allowed at end of production" }

test SingleInternalLayoutOk [[ 
    module A 
        layout L = " ";
        syntax EXP = "a" | EXP  L "+" EXP; 
]]

test ConsecutiveInternalLayoutNotOk [[ 
    module A 
        layout L = " ";
        syntax EXP = "a" | EXP  L L "+" EXP; 
]] expect { "Consecutive layout types `L` and `L` not allowed" }

test LayoutInLexOk [[ 
    module A 
        layout WS = [\ \t\n]* ;
        lexical Dig = [0-9]+;
        lexical Real = Dig WS "." WS Dig;
]]

test LitInKeywordOk [[ 
    module A 
        keyword Keywords = "if" | "then"| "else";
]]

test CiLitInKeywordNotOk [[ 
    module A 
        keyword Keywords = "if" | "then"| 'else';
]] expect { "In keyword declaration only literals are allowed, found `else`" }

test LexInKeywordNotOk [[ 
    module A 
        lexical Dig = [0-9]+;
        keyword Keywords = "if" | "then"| "else" | Dig;
]] expect { "In keyword declaration only literals are allowed, found `Dig`" }

test ExcludeKeywordOk [[ 
    module A 
        lexical Id = [a-z]+;
        
        keyword Keywords = "if" | "then"| "else";
        syntax EXP = Id \ Keywords;
]]

test ExcludeNonKeywordNotOk [[ 
    module A 
        lexical Id = [a-z]+;
        lexical Dig = [0-9]+;
        keyword Keywords = "if" | "then"| "else";
        syntax EXP = Id \ Dig;
]] expect { "Exclude `\\` requires keywords as right argument, found `Dig`" }

test RegexpInKeywordNotOk [[ 
    module A 
        keyword Keywords = "if" | "then"| [a-z]+;
]] expect { "In keyword declaration only literals are allowed, found `[97-122]+`" }

test CharClassesLitsOk [[
    module A 
        layout A = [a-z] 'hello' "goodbye";
        lexical B = [a-z] 'hello' "goodbye";
        syntax C = [a-z] 'hello' "goodbye"; 
]]

test LexAsSepOk [[
    module A 
        lexical Id = [a-z]+;
        syntax EXP = Id;
        lexical SEP = "X"+;
        syntax Block = "{" {EXP SEP}* "}";
]]

test KeywordAsSepOk [[
    module A 
        lexical Id = [a-z]+;
        syntax EXP = Id;
        keyword Keywords = "if" | "then"| "else";
        syntax Block = "{" {EXP Keywords}* "}";
]]

test LayoutAsSepNotOk [[
    module A 
        layout WS = [\ \t\n]* ;
        lexical Id = [a-z]+;
        syntax EXP = Id;
        syntax Block = "{" {EXP WS}* "}";
]] expect { "At least one element of separators should be layout" }

test WarnNestedSS [[
    module A 
        lexical A = "a";
        syntax B = A**;
]] expect { "Nested iteration" }

test WarnNestedSP [[
    module A 
        lexical A = "a";
        syntax B = A*+;
]] expect { "Nested iteration" }

test WarnNestedPS [[
    module A 
        lexical A = "a";
        syntax B = A+*;
]] expect { "Nested iteration" }

test WarnNestedPP [[
    module A 
        lexical A = "a";
        syntax B = A++;
]] expect { "Nested iteration" }

test WarnNestedSepSS [[
    module A 
        lexical A = "a";
        syntax B = {A* ","}*;
]] expect { "Nested iteration" }

test WarnNestedSepSP [[
    module A 
        lexical A = "a";
        syntax B = {A* ","}+;
]] expect { "Nested iteration" }

test WarnNestedSepPS [[
    module A 
        lexical A = "a";
        syntax B = {A+ ","}*;
]] expect { "Nested iteration" }

test WarnNestedSepPP [[
    module A 
        lexical A = "a";
        syntax B = {A+ ","}+;
]] expect { "Nested iteration" }











