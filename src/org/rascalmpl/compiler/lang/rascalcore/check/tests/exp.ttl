test E1 [[ module A value zz = 1 + 2; ]]
test E2 [[ module A value zz = 1 + 2.5; ]]
test E3 [[ module A value zz = 1 + true; ]] expect { "Addition not defined on `int` and `bool`" }

test And1 [[ module A value zz = true && false; ]]
test And2 [[ module A value zz = 1 && false; ]] expect { "Argument of && should be `bool`, found `int`"}
test And3 [[ module A value zz = true && "abc"; ]] expect { "Argument of && should be `bool`, found `str`"}

test Or1 [[ module A value zz = true || false; ]]
test Or2 [[ module A value zz = 1 || false; ]] expect { "Argument of || should be `bool`, found `int`"}
test Or3 [[ module A value zz = true || "abc"; ]] expect { "Argument of || should be `bool`, found `str`"}

test Eq1 [[ module A value zz = 1 == 1; ]]
test Eq2 [[ module A value zz = 1 == "a"; ]] expect { "Comparison not defined on `int` and `str`" }

test Lst1 [[ module A value zz = []; ]]
test Lst2 [[ module A value zz = [1,2] + 1; ]]
test Lst3 [[ module A value zz = 1 + [2,3]; ]]
test Lst4 [[ module A value zz = 1 + []; ]]
test Lst5 [[ module A value zz = [] + 1; ]]
test Lst6 [[ module A value zz = 1 + [1.5]; ]]
test Lst7 [[ module A value zz = 1 + [true]; ]]

test Set1 [[ module A value zz = {}; ]]
test Set2 [[ module A value zz = {1,2} + 1; ]]
test Set3 [[ module A value zz = 1 + {2,3}; ]]
test Set4 [[ module A value zz = 1 + {}; ]]
test Set5 [[ module A value zz = {} + 1; ]]
test Set6 [[ module A value zz = 1 + {1.5}; ]]
test Set7 [[ module A value zz = 1 + {true}; ]]

test Stat1 [[ module A value zz = 1 + {true, 2}; ]]
test Stat2 [[ module A value zz = {int n = 1;}; ]]
test Stat3 [[ module A value zz = { n = 1; n = true; }; ]]
test Stat4 [[ module A value zz = { n = 1; n = 1.5; n + 2;}; ]]

test Stat5 [[ module A value zz = { n = 1; m = n; n + 2;}; ]]
test Stat6 [[ module A value zz = { n = 1; m = n;  m = 1.5; n + 2;}; ]]
test Stat7 [[ module A value zz = { l = []; l = l + 1.5; }; ]]
test Stat8 [[ module A value zz = { l = []; m = l; l = m + 1.5; }; ]]
test Stat9 [[ module A value zz = { l = []; m = l; l = l + 1.5; }; ]]
test Stat10 [[ module A value zz = { l = []; m = l; m = m + 1.5; }; ]]
test Stat11 [[ module A value zz = { l = []; m = l; n = m; m = m + 1.5; n = n + 2r3; }; ]]

test IfElse1 [[ module A value zz = { if(true) 10; else 11; }; ]]
test IfElse2 [[ module A value zz = { if(1) 10; else 11; }; ]] expect {"Condition should be `bool`, found `int`"}

test IfThen1 [[ module A value zz = { if(true) 10;}; ]]
test IfThen2 [[ module A value zz = { if(1) 10; }; ]] expect {"Condition should be `bool`, found `int`"}

