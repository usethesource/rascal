test ADTWithTypeParameter [[
    module A
    data D[&T] = d1(&T n);
]]

test UnusedTypeParameter [[
    module A
    data D[&T] = d1(&U n);
]]

test UnboundTypeParameter [[
    module A
    data D[&T] = d1();
]]

test UndefinedBound1 [[
    module A
    data D[&T] = d1(&U <: &S n);
]] expect {  "Undefined typeVar `S`" }

test UndefinedBound2 [[
    module A
    data D[&T] = d1(&U <: &S v = 1);
]] expect {  "Undefined typeVar `S`" }


test MissingTypeParameter [[
    module A
    data D[&T] = d1(&T n);
    
    int f(){ D x = d1(10); return x.n; }
]] expect { "Expected 1 type parameter(s) for `D`" }


test MultipleInstances [[
    module A
    data D[&T] = d1(&T n);
    
    int f() { D[int] x = d1(10); D[str] y = d1("abc"); int m = x.n; str s = y.n; }
]]


test ADTWithTypeParameterAndKW [[
    module A
    data D[&T] = d1(&T n, &T kw = n);
]]

test ADTWithTypeParameterAndKW [[
    module A
    data D[&T] = d1(&T n, &T kw = n);
    
    int f() { D[int] x = d1(10); int m = x.kw; }
]]

test ADTWithTypeParameterAndKWerror [[
    module A
    data D[&T] = d1(&T n, &T kw = n);
    
    int f() { D[int] x = d1(10); str m = x.kw; }
]] expect { "Initialization of `m` should be subtype of `str`, found `int`" }