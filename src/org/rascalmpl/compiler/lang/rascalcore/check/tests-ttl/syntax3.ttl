test Param1 [[
    module A
    syntax EXP[&T]  = con: &T con;
]]

test Param2 [[
    module A
    lexical INT     = [0-9]+;
    lexical STR     = "\"" ![\"]* "\"";
    syntax EXP[&T]  = con: &T con;
    EXP[INT] exp1;
    EXP[STR] exp2;
]]

test Param3 [[
    module A
    lexical INT     = [0-9]+;
    lexical STR     = "\"" ![\"]* "\"";

    syntax EXP[&T]  = con: &T con 
                    | right( mul: EXP[&T] lhs "*" EXP[&T] rhs
                    > add: EXP[&T] lhs "+" EXP[&T] rhs !>> [0-9]
                    );
    EXP[INT] exp1;
    EXP[INT] exp2 = add(exp1, exp2);
]]

test UndefinedParam1 [[
    module A

    syntax EXP[&T]  = con: &T con 
                    | right( mul: EXP[&U] lhs "*" EXP[&T] rhs
                    > add: EXP[&T] lhs "+" EXP[&T] rhs !>> [0-9]
                    );
]] expect { "Undefined typeVar `U`" }

test WrongNumberOfParams1 [[
    module A

    syntax EXP[&T]  = con: &T con 
                    | right( mul: EXP[&T,&T] lhs "*" EXP[&T] rhs
                    > add: EXP[&T] lhs "+" EXP[&T] rhs !>> [0-9]
                    );
]] expect { "Expected 1 type parameter(s) for `EXP`, found 2" }

test WrongNumberOfParams2 [[
    module A

    syntax EXP[&T]  = con: &T con 
                    | right( mul: EXP lhs "*" EXP[&T] rhs
                    > add: EXP[&T] lhs "+" EXP[&T] rhs !>> [0-9]
                    );
]] expect { "Expected 1 type parameter(s) for `EXP`, found 0" }

test WrongNonterminal1 [[
    module A
  
    syntax EXP[&T]  = con: &T con 
                    | right( mul: ZZZ lhs "*" EXP[&T] rhs
                    > add: EXP[&T] lhs "+" EXP[&T] rhs !>> [0-9]
                    );
    alias ZZZ = int;
]] expect { "Expected a non-terminal type, found `int`" }

test WrongNonterminal2 [[
    module A
  
    syntax EXP[&T]  = con: &T con 
                    | right( mul: ZZZ[&T] lhs "*" EXP[&T] rhs
                    > add: EXP[&T] lhs "+" EXP[&T] rhs !>> [0-9]
                    );
    alias ZZZ = int;
]] expect { "Expected a non-terminal type, found `int`" }