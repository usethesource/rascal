test F1 [[ module rascal::F1
    int f(int n, int k = 0) { return n; }
    void main(){ int x = f(1); }
]]

test F2 [[ module rascal::F2
    int f(int n, int k = 0) { return n; }
    void main(){ int x = f(true); }
]] expect { "Argument should have type `int`, found `bool`"}

test F3 [[ module rascal::F3
    int f(int n, int k = 0) { return n; }
    void main(){ int x = f(); }
]] expect { "Expected 1 argument, found 0"}

test F4 [[ module rascal::F4
    int f(int n, int k = 0) { return n; }
    void main(){ int x = f(1, "a"); }
]] expect { "Expected 1 argument, found 2" }

test F5 [[ module rascal::F5
    int f(int n, int k = 0) { return n; }
    void main(){ int x = f(1, k=3); }
]]

test F6 [[ module rascal::F6
    int f(int n, int k = 0) { return n; }
    void main(){ int x = f(1, k="a"); }
]] expect { "Keyword argument `k` has type `str`, expected `int`" }

test F7 [[ module rascal::F7
    int f(int n, int k = 0) { return n; }
    void main(){ int x = f(1, kkk="a"); }
]] expect { "Undefined keyword argument `kkk`" }

test F8 [[ module rascal::F8
    int f(int n, int k = 0) { return n; }
    void main(){ int x = g(1, kkk="a"); }
]] expect { "Undefined variable, function, field or constructor `g`" }

test O1 [[ module rascal::O1
    int f(int n, int k = 0) { return n; }
    str f(str s, bool b = false) { return s; }
    
    void main(){ int x = f(1, k=1); str y = f("a"); }
]]

test O2 [[ module rascal::O2
    data D
        = f(bool n, str s, int z = 0)
        | f(str q, bool b);
    int f(int n, int k = 0) { return n; }
    str f(str s, bool b = false) { return s; }
    
    void main(){ int x = f(1, k=1); str y = f("a"); z = f(true, "a"); z = f("a", false); }
]]

test K1 [[ module rascal::K1
    data D(int n = 0) = d1();
    void f(){ D x = d1(); }
]]

test K2 [[ module rascal::K2
    data D(int n = 0) = d1();
    void f(){ D x = d1(n=3); }
]]

test K3 [[ module rascal::K3
    data D(int n = 0) = d1();
    void f(){ D x = d1(m=3); }
]] expect{ "Undefined keyword argument `m`" }

test K4 [[ module rascal::K4
    data D(int n = 0) = d1();
    void f(){ D x = d1(n=true); }
]] expect { "Keyword argument `n` has type `bool`, expected `int`" }

test K5 [[ module rascal::K5
    data D(int n = 0) = d1();
    data D(bool b = true) = d2();
    void f(){ D x = d2(b=true); }
]]

test K6 [[ module rascal::K6
    data D(int n = 0) = d1();
    data D(bool b = true) = d2();
    void f(){ D x = d2(n=3); }
]]

test R1 [[module rascal::R1
    int f() { return 10; }
]]

test R2 [[module rascal::R2
    int f() { return "a"; }
]] expect {"Return type should be subtype of `int`, found `str`"}

test R3 [[module rascal::R3
    int f(n) { return n; }
]] expect { "Return type should be subtype of `int`, found `value`" }

test R4 [[module rascal::R4
    list[int] f([n]) { return [n]; }
]] expect { "Return type should be subtype of `list[int]`, found `list[value]`" }

test R5 [[ module rascal::R5
    value f(b) { return b; }
]]

test R6 [[ module rascal::R6
    value f(b) { if(b) 10; return b; }
]] 
expect { "Condition should be `bool`, found `value`" }

test R7 [[ module rascal::R7
    value f(b) { b || true; return b; }
]] 
expect { "Argument of || should be `bool`, found `value`" }

test R8 [[ module rascal::R8
    value f(b) { n = b || true; return b; }
]] 

expect { "Argument of || should be `bool`, found `value`" }

test R9 [[ module rascal::R9
    value f(b) { n = b || true; if(b) 10; return b; }
]] 
expect { "Argument of || should be `bool`, found `value`" }

test R10 [[ module rascal::R10
    value f(b) { n = b || true; if(b) 10; return b; b && false; }
]] 
expect { "Argument of || should be `bool`, found `value`" }

test Issue1051 [[
    module A
    data F = f() | g();
    
    int func(f()) = 1;
    int func(g()) = 2;
    
    int apply(int (F) theFun, F theArg) = theFun(theArg);
    
    int main() = apply(func, f());
]]

test Var1 [[ module rascal::Var1
            int f(str s, int n...) = n[0];
            
            value main(){ int z = f("a"); }
]] 

